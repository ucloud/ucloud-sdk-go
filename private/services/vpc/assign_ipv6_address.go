// Code is generated by ucloud-model, DO NOT EDIT IT.

package vpc

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// AssignIPv6AddressRequest is request schema for AssignIPv6Address action
type AssignIPv6AddressRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 付费类型，按月，按年或者按时，默认按月
	ChargeType *string `required:"false"`

	// 指定分配的IPv6地址。若不填写，则系统自动分配。
	IPv6Address *string `required:"false"`

	// 是否从公共子网分配， 默认为false
	PublicSubnet *bool `required:"false"`

	// 分配IPv6地址的资源ID。
	ResourceId *string `required:"true"`

	// 分配IPv6地址的资源类型。 枚举值为: uhost: 云主机; ulb, 负载均衡器 upm: 物理机; hadoophost: 大数据集群;fortresshost：堡垒机；udockhost：容器；udhost：私有专区主机；natgw：natgw；udb：udb；vpngw：ipsec vpn；ucdr：云灾备；dbaudit：数据库审计；uni：虚拟网卡。
	ResourceType *string `required:"true"`

	// 共享带宽ID
	ShareBandwidthId *string `required:"false"`

	// 分配地址的子网ID，要求该子网已关联IPv6网段。
	SubnetworkId *string `required:"true"`
}

// AssignIPv6AddressResponse is response schema for AssignIPv6Address action
type AssignIPv6AddressResponse struct {
	response.CommonBase

	// IPv6地址
	IPv6Address string

	// IPv6地址Id
	IPv6AddressId string
}

// NewAssignIPv6AddressRequest will create request of AssignIPv6Address action.
func (c *VPCClient) NewAssignIPv6AddressRequest() *AssignIPv6AddressRequest {
	req := &AssignIPv6AddressRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

// AssignIPv6Address - 分配IPv6地址
func (c *VPCClient) AssignIPv6Address(req *AssignIPv6AddressRequest) (*AssignIPv6AddressResponse, error) {
	var err error
	var res AssignIPv6AddressResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AssignIPv6Address", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
