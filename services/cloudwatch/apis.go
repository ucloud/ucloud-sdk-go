// Code is generated by ucloud-model, DO NOT EDIT IT.

package cloudwatch

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// CloudWatch API Schema

// BindAlertStrategyRequest is request schema for BindAlertStrategy action
type BindAlertStrategyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID
	// ProjectId *string `required:"true"`

	// 告警策略id数组
	AlertStrategyIDs []int `required:"true"`

	// 产品类型名称
	ProductKey *string `required:"true"`

	// 资源数组
	Resources []string `required:"true"`
}

// BindAlertStrategyResponse is response schema for BindAlertStrategy action
type BindAlertStrategyResponse struct {
	response.CommonBase
}

// NewBindAlertStrategyRequest will create request of BindAlertStrategy action.
func (c *CloudWatchClient) NewBindAlertStrategyRequest() *BindAlertStrategyRequest {
	req := &BindAlertStrategyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindAlertStrategy

绑定告警策略
*/
func (c *CloudWatchClient) BindAlertStrategy(req *BindAlertStrategyRequest) (*BindAlertStrategyResponse, error) {
	var err error
	var res BindAlertStrategyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindAlertStrategy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
CreateAlertStrategyTemplateParamRuleSet is request schema for complex param
*/
type CreateAlertStrategyTemplateParamRuleSet struct {

	// 告警等级。枚举值：P0,P1,P2,P3
	Level *string `required:"true"`

	// 规则指标ID。参考该类型产品下返回的指标列表GetProductMetrics
	MetricID *int `required:"true"`

	// 沉默周期(告警周期选择为连续时必填)
	SendInterval *int `required:"false"`

	// 触发周期。枚举值：continuous连续 exponent 指数 single 不重复
	SendPeriodType *string `required:"true"`

	// 告警状态。枚举值：0-关闭 1-开启
	Status *int `required:"true"`

	// 阈值比较方式。枚举值比较方式: 1->=2-<= 3-> 4-< 5-== 6-!=
	ThresholdCompare *int `required:"true"`

	// 触发阈值
	ThresholdValue *int `required:"true"`

	// 触发次数
	TriggerCount *int `required:"true"`
}

// CreateAlertStrategyTemplateRequest is request schema for CreateAlertStrategyTemplate action
type CreateAlertStrategyTemplateRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 告警模板名称。最大长度64个字符
	Name *string `required:"true"`

	// 产品类型。参考ListMonitorProduct获取监控对象类型列表
	ProductKey *string `required:"true"`

	// 备注
	Remark *string `required:"false"`

	//
	RuleSet []CreateAlertStrategyTemplateParamRuleSet `required:"false"`
}

// CreateAlertStrategyTemplateResponse is response schema for CreateAlertStrategyTemplate action
type CreateAlertStrategyTemplateResponse struct {
	response.CommonBase

	// 创建告警模板返回对象
	Data AlertTemplate
}

// NewCreateAlertStrategyTemplateRequest will create request of CreateAlertStrategyTemplate action.
func (c *CloudWatchClient) NewCreateAlertStrategyTemplateRequest() *CreateAlertStrategyTemplateRequest {
	req := &CreateAlertStrategyTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateAlertStrategyTemplate

新建条件模板
*/
func (c *CloudWatchClient) CreateAlertStrategyTemplate(req *CreateAlertStrategyTemplateRequest) (*CreateAlertStrategyTemplateResponse, error) {
	var err error
	var res CreateAlertStrategyTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateAlertStrategyTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteAlertStrategyTemplateRequest is request schema for DeleteAlertStrategyTemplate action
type DeleteAlertStrategyTemplateRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 告警模板ID(支持批量删除)
	TemplateID []int `required:"true"`
}

// DeleteAlertStrategyTemplateResponse is response schema for DeleteAlertStrategyTemplate action
type DeleteAlertStrategyTemplateResponse struct {
	response.CommonBase

	// 删除告警模板返回对象
	Data DelAlertTemplate
}

// NewDeleteAlertStrategyTemplateRequest will create request of DeleteAlertStrategyTemplate action.
func (c *CloudWatchClient) NewDeleteAlertStrategyTemplateRequest() *DeleteAlertStrategyTemplateRequest {
	req := &DeleteAlertStrategyTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteAlertStrategyTemplate

删除告警策略模板
*/
func (c *CloudWatchClient) DeleteAlertStrategyTemplate(req *DeleteAlertStrategyTemplateRequest) (*DeleteAlertStrategyTemplateResponse, error) {
	var err error
	var res DeleteAlertStrategyTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteAlertStrategyTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetProductMetricsRequest is request schema for GetProductMetrics action
type GetProductMetricsRequest struct {
	request.CommonBase

	// 云产品key 例如 uhost
	ProductKey *string `required:"true"`
}

// GetProductMetricsResponse is response schema for GetProductMetrics action
type GetProductMetricsResponse struct {
	response.CommonBase

	// 返回数据
	Data GetProductMetricsRespData
}

// NewGetProductMetricsRequest will create request of GetProductMetrics action.
func (c *CloudWatchClient) NewGetProductMetricsRequest() *GetProductMetricsRequest {
	req := &GetProductMetricsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetProductMetrics

获取云产品关联的指标列表
*/
func (c *CloudWatchClient) GetProductMetrics(req *GetProductMetricsRequest) (*GetProductMetricsResponse, error) {
	var err error
	var res GetProductMetricsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetProductMetrics", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
ListAlertRecordParamFilter is request schema for complex param
*/
type ListAlertRecordParamFilter struct {

	// 告警级别，根据告警级别精确搜索对应的告警记录
	Levels []string `required:"false"`

	// 产品类型，根据产品类型精确搜索对应的告警记录
	ProductTypes []int `required:"false"`

	// 告警状态，根据告警状态精确搜索对应的告警记录
	Status []string `required:"false"`
}

// ListAlertRecordRequest is request schema for ListAlertRecord action
type ListAlertRecordRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。
	// ProjectId *string `required:"true"`

	// 结束时间，查询告警记录结束时间(查询开始时间和结束时间不能超过一个月)
	EndAt *int `required:"true"`

	//
	Filter *ListAlertRecordParamFilter `required:"false"`

	// 模糊查询(支持资源id模糊搜索)
	Fuzzy *string `required:"false"`

	// 查询返回数量，默认值300，最大值：300。
	Limit *int `required:"false"`

	// 数据偏移量 (默认0)
	Offset *int `required:"false"`

	// 排序(默认根据告警发生时间倒序)
	OrderType *string `required:"false"`

	// 开始时间，查询告警记录开始时间(不支持查询距当前时间一年前的数据)
	StartAt *int `required:"true"`
}

// ListAlertRecordResponse is response schema for ListAlertRecord action
type ListAlertRecordResponse struct {
	response.CommonBase

	// 告警记录集合
	Data []AlertRecord

	// 告警记录总数
	TotalCount int
}

// NewListAlertRecordRequest will create request of ListAlertRecord action.
func (c *CloudWatchClient) NewListAlertRecordRequest() *ListAlertRecordRequest {
	req := &ListAlertRecordRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListAlertRecord

获取时间段内的告警记录
*/
func (c *CloudWatchClient) ListAlertRecord(req *ListAlertRecordRequest) (*ListAlertRecordResponse, error) {
	var err error
	var res ListAlertRecordResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListAlertRecord", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
ListAlertStrategyParamFilter is request schema for complex param
*/
type ListAlertStrategyParamFilter struct {

	// 产品类型，根据产品类型精确搜索对应的告警策略
	ProductTypes []int `required:"false"`

	// 告警策略状态，根据告警策略状态精确搜索对应的告警策略
	Status []int `required:"false"`
}

// ListAlertStrategyRequest is request schema for ListAlertStrategy action
type ListAlertStrategyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID
	// ProjectId *string `required:"true"`

	//
	Filter *ListAlertStrategyParamFilter `required:"false"`

	// 模糊查询(支持告警策略名称模糊搜索)
	Fuzzy *string `required:"false"`

	// 查询返回数量，默认值300，最大值：300。
	Limit *int `required:"false"`

	// 数据偏移量 (默认0)
	Offset *int `required:"false"`
}

// ListAlertStrategyResponse is response schema for ListAlertStrategy action
type ListAlertStrategyResponse struct {
	response.CommonBase

	// 告警策略集合
	Data []AlertStrategy

	// 错误信息
	Message string

	// 告警策略总数
	TotalCount int

	// 链路ID
	TraceId string
}

// NewListAlertStrategyRequest will create request of ListAlertStrategy action.
func (c *CloudWatchClient) NewListAlertStrategyRequest() *ListAlertStrategyRequest {
	req := &ListAlertStrategyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListAlertStrategy

获取告警策略列表
*/
func (c *CloudWatchClient) ListAlertStrategy(req *ListAlertStrategyRequest) (*ListAlertStrategyResponse, error) {
	var err error
	var res ListAlertStrategyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListAlertStrategy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ListMonitorProductRequest is request schema for ListMonitorProduct action
type ListMonitorProductRequest struct {
	request.CommonBase
}

// ListMonitorProductResponse is response schema for ListMonitorProduct action
type ListMonitorProductResponse struct {
	response.CommonBase

	// 返回数据
	Data ListMonitorProduct

	// 错误信息
	Message string

	// 链路ID
	TraceId string
}

// NewListMonitorProductRequest will create request of ListMonitorProduct action.
func (c *CloudWatchClient) NewListMonitorProductRequest() *ListMonitorProductRequest {
	req := &ListMonitorProductRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListMonitorProduct

获取监控对象类型列表
*/
func (c *CloudWatchClient) ListMonitorProduct(req *ListMonitorProductRequest) (*ListMonitorProductResponse, error) {
	var err error
	var res ListMonitorProductResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListMonitorProduct", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
QueryMetricDataSetParamMetricInfosTagList is request schema for complex param
*/
type QueryMetricDataSetParamMetricInfosTagList struct {

	// 要查询指标的Tag的key
	TagKey *string `required:"false"`

	// 要查询指标的Tag的Value
	TagValues []string `required:"false"`
}

/*
QueryMetricDataSetParamMetricInfos is request schema for complex param
*/
type QueryMetricDataSetParamMetricInfos struct {

	// 指标名
	Metric *string `required:"true"`

	// 指标所属资源id
	ResourceId *string `required:"true"`

	//
	TagList []QueryMetricDataSetParamMetricInfosTagList `required:"false"`
}

// QueryMetricDataSetRequest is request schema for QueryMetricDataSet action
type QueryMetricDataSetRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 全局产品可不传，其他类型必传。
	// Region *string `required:"true"`

	// 计算方式，枚举值如下：raw:原始值,max:最大值,min:最小值,avg:平均值,sum:求和
	CalcMethod *string `required:"true"`

	// 截止时间
	EndTime *int `required:"true"`

	//
	MetricInfos []QueryMetricDataSetParamMetricInfos `required:"false"`

	// 周期即：数据查询时，后端上报数据点的频率，选择不同的自定义时间范围，对应的周期不同：0<时间范围<=1h——周期：1分钟/5分钟1h<时间范围<=3h——周期：1分钟/5分钟/1小时3h<时间范围<=24h——周期：5分钟/1小时1天<时间范围<=30天——周期：1小时/6小时/24小时需将周期转化为单位为秒的数值，传入参数
	Period *int `required:"true"`

	// 资源类型
	ProductKey *string `required:"true"`

	// 开始时间
	StartTime *int `required:"true"`
}

// QueryMetricDataSetResponse is response schema for QueryMetricDataSet action
type QueryMetricDataSetResponse struct {
	response.CommonBase

	// QueryMetricDataResp
	Data QueryMetricDataResp

	// 错误信息
	Message string

	// 日志链路id
	TraceId string
}

// NewQueryMetricDataSetRequest will create request of QueryMetricDataSet action.
func (c *CloudWatchClient) NewQueryMetricDataSetRequest() *QueryMetricDataSetRequest {
	req := &QueryMetricDataSetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: QueryMetricDataSet

查询监控指标数据集
*/
func (c *CloudWatchClient) QueryMetricDataSet(req *QueryMetricDataSetRequest) (*QueryMetricDataSetResponse, error) {
	var err error
	var res QueryMetricDataSetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("QueryMetricDataSet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// QueryMetricDataSummaryRequest is request schema for QueryMetricDataSummary action
type QueryMetricDataSummaryRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。
	// ProjectId *string `required:"true"`

	// [公共参数] 地域，全局产品可以不传，其他必传
	// Region *string `required:"true"`

	// 当前页数据尺寸
	Limit *int `required:"true"`

	// 指定要查询的指标列表，不指定则使用默认的指标集合
	Metrics []string `required:"false"`

	// 跳过的数量
	Offset *int `required:"true"`

	// 产品类型
	ProductKey *string `required:"true"`

	// 指定要查询的资源ID列表
	ResourceIds []string `required:"false"`
}

// QueryMetricDataSummaryResponse is response schema for QueryMetricDataSummary action
type QueryMetricDataSummaryResponse struct {
	response.CommonBase

	// 数据
	Data QueryMetricDataSummaryRespData

	// 错误信息
	Message string

	// 总数
	TotalCount int

	// 链路id
	TraceId string
}

// NewQueryMetricDataSummaryRequest will create request of QueryMetricDataSummary action.
func (c *CloudWatchClient) NewQueryMetricDataSummaryRequest() *QueryMetricDataSummaryRequest {
	req := &QueryMetricDataSummaryRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: QueryMetricDataSummary

获取资源看图属性列表
*/
func (c *CloudWatchClient) QueryMetricDataSummary(req *QueryMetricDataSummaryRequest) (*QueryMetricDataSummaryResponse, error) {
	var err error
	var res QueryMetricDataSummaryResponse

	reqCopier := *req

	err = c.Client.InvokeAction("QueryMetricDataSummary", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnBindAlertStrategyRequest is request schema for UnBindAlertStrategy action
type UnBindAlertStrategyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID
	// ProjectId *string `required:"true"`

	// 告警策略数组
	AlertStrategyIDs []int `required:"true"`

	// 产品类型名称
	ProductKey *string `required:"true"`

	// 资源数组
	Resources []string `required:"true"`
}

// UnBindAlertStrategyResponse is response schema for UnBindAlertStrategy action
type UnBindAlertStrategyResponse struct {
	response.CommonBase
}

// NewUnBindAlertStrategyRequest will create request of UnBindAlertStrategy action.
func (c *CloudWatchClient) NewUnBindAlertStrategyRequest() *UnBindAlertStrategyRequest {
	req := &UnBindAlertStrategyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnBindAlertStrategy

解绑告警策略
*/
func (c *CloudWatchClient) UnBindAlertStrategy(req *UnBindAlertStrategyRequest) (*UnBindAlertStrategyResponse, error) {
	var err error
	var res UnBindAlertStrategyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnBindAlertStrategy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
