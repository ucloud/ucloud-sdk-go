// Code is generated by ucloud-model, DO NOT EDIT IT.

package uddb

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UDDB API Schema

// ChangeUDDBInstanceNameRequest is request schema for ChangeUDDBInstanceName action
type ChangeUDDBInstanceNameRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 名称
	NewName *string `required:"true"`

	// UDDB实例Id
	UDDBId *string `required:"true"`
}

// ChangeUDDBInstanceNameResponse is response schema for ChangeUDDBInstanceName action
type ChangeUDDBInstanceNameResponse struct {
	response.CommonBase
}

// NewChangeUDDBInstanceNameRequest will create request of ChangeUDDBInstanceName action.
func (c *UDDBClient) NewChangeUDDBInstanceNameRequest() *ChangeUDDBInstanceNameRequest {
	req := &ChangeUDDBInstanceNameRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ChangeUDDBInstanceName

修改分布式数据库中间件名称
*/
func (c *UDDBClient) ChangeUDDBInstanceName(req *ChangeUDDBInstanceNameRequest) (*ChangeUDDBInstanceNameResponse, error) {
	var err error
	var res ChangeUDDBInstanceNameResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ChangeUDDBInstanceName", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ChangeUDDBSlaveCountRequest is request schema for ChangeUDDBSlaveCount action
type ChangeUDDBSlaveCountRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 每个数据节点的只读实例个数, 取值必须>=0
	SlaveCount *string `required:"true"`

	// UDDB资源id
	UDDBId *string `required:"true"`
}

// ChangeUDDBSlaveCountResponse is response schema for ChangeUDDBSlaveCount action
type ChangeUDDBSlaveCountResponse struct {
	response.CommonBase
}

// NewChangeUDDBSlaveCountRequest will create request of ChangeUDDBSlaveCount action.
func (c *UDDBClient) NewChangeUDDBSlaveCountRequest() *ChangeUDDBSlaveCountRequest {
	req := &ChangeUDDBSlaveCountRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ChangeUDDBSlaveCount

改变分布式数据库数据节点的只读实例个数
每一个UDDB的数据节点负责处理所有的写入请求。与此同时，每一个数据节点可以配置若干个该节点的只读实例。当主节点的数据写入完毕后，只读实例把这次的写入操作进行更新，从而和数据节点保持一致。
只读实例可以使得数据由多份复制，在数据节点和只读实例之间，可以做请求的读写分离, 也就是说, 主节点写入数据之后, 数据的读操作可以由数据只读实例进行分担, 这样减少主节点的压力, 增加性能
当改变了数据节点的只读实例个数之后，对于现有的和以后的每一个数据节点都采用这个配置。如果UDDB实例有现有的数据节点, 那么它会根据新配置的参数，自动创建或删除数据节点的只读实例
如下状态的UDDB实例可以进行这个操作:
Running: 系统正常运行中
当请求返回成功之后，UDDB实例的状态变成"ChangingSlaveCount"; 如果返回失败, UDDB实例状态保持不变 当UDDB更改数据分区的只读实例个数成功之后, UDDB实例的状态变成"Running"(正常运行中); 如果更改过程中出现异常, 状态变成"Abnormal"(异常运行中)或者"Error"(运行错误)
*/
func (c *UDDBClient) ChangeUDDBSlaveCount(req *ChangeUDDBSlaveCountRequest) (*ChangeUDDBSlaveCountResponse, error) {
	var err error
	var res ChangeUDDBSlaveCountResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ChangeUDDBSlaveCount", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUDDBInstanceRequest is request schema for CreateUDDBInstance action
type CreateUDDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 管理员密码, 密码需要使用base64加密
	AdminPassword *string `required:"true"`

	// 管理员帐户名，默认root
	AdminUser *string `required:"false"`

	// 付费类型，可选值如下:Year: 按年付费 Month: 按月付费 Dynamic: 按需付费(单位: 小时) Trial: 免费试用  默认值为: Dynamic
	ChargeType *string `required:"false"`

	// 使用的代金券id
	CouponId *string `required:"false"`

	// UDDB的数据库版本，支持版本如下：mysql-5.6 mysql-5.7. 如果不填，则默认为mysql-5.6
	DBTypeId *string `required:"true"`

	// 初始的数据节点个数 取值必须>0.
	DataNodeCount *int `required:"true"`

	// 新的数据节点的磁盘大小配置. 单位: GB 具体数值参考UDB的磁盘大小取值.
	DataNodeDiskSpace *int `required:"true"`

	// 新的数据节点的内存配置, 单位：MB 具体数值参考UDB的内存取值.
	DataNodeMemory *int `required:"true"`

	// 每个数据节点的只读实例个数, 取值必须>=0. 默认取值为0.
	DataNodeSlaveCount *int `required:"false"`

	// 存储节点的高可用模式， 分为高可用UDB（HA）和普通UDB（Normal），如果不填， 则默认为HA
	InstanceMode *string `required:"false"`

	// 存储节点和只读实例的磁盘类型。分为：SSD磁盘（SATA_SSD）或普通磁盘(Normal)。 如果不填，则默认为SATA_SSD
	InstanceType *string `required:"false"`

	// 实例名称，至少6位
	Name *string `required:"true"`

	// 端口号，mysql默认端口为3306
	Port *int `required:"false"`

	// 购买时长，默认值1
	Quantity *int `required:"false"`

	// 其他版本：该参数可不填；专享版：物理机台数
	RouterNodeNum *int `required:"true"`

	// UDDB路由节点的版本。分为三种： Trival(免费版)： 2中间件节点； QPS：1.5W FellFree(标准版)： 固定为4中间件节点，后续将根据业务请求量自动扩展，最多扩展到12个节点，QPS为3w - 10w； EnjoyAlone(物理机版)：专享物理机，节点数让客户可选
	RouterVersion *string `required:"true"`

	// 子网ID
	SubnetId *string `required:"false"`

	// VPC的ID
	VPCId *string `required:"false"`
}

// CreateUDDBInstanceResponse is response schema for CreateUDDBInstance action
type CreateUDDBInstanceResponse struct {
	response.CommonBase

	// 如果执行失败, 失败的错误消息
	Message string

	// UDDB实例ID
	UDDBId string
}

// NewCreateUDDBInstanceRequest will create request of CreateUDDBInstance action.
func (c *UDDBClient) NewCreateUDDBInstanceRequest() *CreateUDDBInstanceRequest {
	req := &CreateUDDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUDDBInstance

创建创建分布式数据库UDDB实例, 简称UDDB实例。
*/
func (c *UDDBClient) CreateUDDBInstance(req *CreateUDDBInstanceRequest) (*CreateUDDBInstanceResponse, error) {
	var err error
	var res CreateUDDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUDDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUDDBInstanceRequest is request schema for DeleteUDDBInstance action
type DeleteUDDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// UDDB实例ID
	UDDBId *string `required:"true"`
}

// DeleteUDDBInstanceResponse is response schema for DeleteUDDBInstance action
type DeleteUDDBInstanceResponse struct {
	response.CommonBase

	// 如果执行失败, 失败的错误消息
	Message string
}

// NewDeleteUDDBInstanceRequest will create request of DeleteUDDBInstance action.
func (c *UDDBClient) NewDeleteUDDBInstanceRequest() *DeleteUDDBInstanceRequest {
	req := &DeleteUDDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUDDBInstance

删除UDDB实例。
如下状态的UDDB实例可以进行这个操作:
InitFail: 初始化失败
Shutoff: 已关闭
当请求返回成功之后，UDDB实例就已经被删除, 列表上看不到对应的UDDB实例
*/
func (c *UDDBClient) DeleteUDDBInstance(req *DeleteUDDBInstanceRequest) (*DeleteUDDBInstanceResponse, error) {
	var err error
	var res DeleteUDDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUDDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDDBInstanceRequest is request schema for DescribeUDDBInstance action
type DescribeUDDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// UDDB实例ID
	UDDBId *string `required:"true"`
}

// DescribeUDDBInstanceResponse is response schema for DescribeUDDBInstance action
type DescribeUDDBInstanceResponse struct {
	response.CommonBase

	// UDDB实例信息列表, 参见DataSetUDDB项定义
	DataSet []DataSetUDDB

	// 如果执行失败, 失败的错误消息
	Message string
}

// NewDescribeUDDBInstanceRequest will create request of DescribeUDDBInstance action.
func (c *UDDBClient) NewDescribeUDDBInstanceRequest() *DescribeUDDBInstanceRequest {
	req := &DescribeUDDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDDBInstance

获取分布式数据库UDDB的详细信息
*/
func (c *UDDBClient) DescribeUDDBInstance(req *DescribeUDDBInstanceRequest) (*DescribeUDDBInstanceResponse, error) {
	var err error
	var res DescribeUDDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDDBInstancePriceRequest is request schema for DescribeUDDBInstancePrice action
type DescribeUDDBInstancePriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 付费类型，可选值如下: Year: 按年付费 Month: 按月付费 Dynamic: 按需付费(单位: 小时) Trial: 免费试用 默认值为: Dynamic
	ChargeType *string `required:"false"`

	// 初始的数据节点个数 取值必须>0.
	DataNodeCount *int `required:"true"`

	// 新的数据节点的磁盘大小配置. 单位: GB 具体数值参考UDB的磁盘大小取值.
	DataNodeDiskSpace *int `required:"true"`

	// 新的数据节点的内存配置, 单位：MB 具体数值参考UDB的内存取值.
	DataNodeMemory *string `required:"true"`

	// 每个数据节点的只读实例个数, 取值必须>=0. 默认取值为0.
	DataNodeSlaveCount *int `required:"false"`

	// 存储节点的高可用模式， 分为高可用UDB（HA）和普通UDB（Normal），如果不填， 则默认为HA
	InstanceMode *string `required:"false"`

	// 存储节点和只读实例的磁盘类型。分为：SSD磁盘（SATA_SSD）或普通磁盘(Normal)。 如果不填，则默认为SATA_SSD
	InstanceType *string `required:"false"`

	// 购买时长，默认值1
	Quantity *int `required:"false"`

	// 其他版本：该参数可不填；专享版：物理机节点个数。一台物理机有2个节点
	RouterNodeNum *int `required:"true"`

	// UDDB路由节点的版本。分为三种： Trival(免费版)： 2中间件节点； QPS：1.5WFeelFree(标准版)： 固定为4中间件节点，后续将根据业务请求量自动扩展，最多扩展到12个节点，QPS为3w - 10w；EnjoyAlone(物理机版)：专享物理机，节点数让客户可选
	RouterVersion *string `required:"true"`
}

// DescribeUDDBInstancePriceResponse is response schema for DescribeUDDBInstancePrice action
type DescribeUDDBInstancePriceResponse struct {
	response.CommonBase

	// 如果执行失败, 失败的错误消息
	Message string

	// 价格明细, 参考PriceDetailInfo对象定义
	PriceInfo PriceDetailInfo
}

// NewDescribeUDDBInstancePriceRequest will create request of DescribeUDDBInstancePrice action.
func (c *UDDBClient) NewDescribeUDDBInstancePriceRequest() *DescribeUDDBInstancePriceRequest {
	req := &DescribeUDDBInstancePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDDBInstancePrice

获取分布式数据库UDDB价格
*/
func (c *UDDBClient) DescribeUDDBInstancePrice(req *DescribeUDDBInstancePriceRequest) (*DescribeUDDBInstancePriceResponse, error) {
	var err error
	var res DescribeUDDBInstancePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDDBInstancePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDDBInstanceUpgradePriceRequest is request schema for DescribeUDDBInstanceUpgradePrice action
type DescribeUDDBInstanceUpgradePriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 新的数据节点个数 取值必须>0.
	DataNodeCount *int `required:"false"`

	// 新的数据节点的磁盘大小配置. 单位: GB 具体数值参考UDB的磁盘大小取值.
	DataNodeDiskSpace *int `required:"false"`

	// 新的数据节点的内存配置, 单位：MB 具体数值参考UDB的内存取值.
	DataNodeMemory *int `required:"false"`

	// 每个数据节点的只读实例个数, 取值必须>=0.
	DataNodeSlaveCount *int `required:"false"`

	// 存储节点的高可用模式， 分为高可用UDB（HA）和普通UDB（Normal），如果不填， 则默认为HA
	InstanceMode *string `required:"false"`

	// 存储节点和只读实例的磁盘类型。分为：SSD磁盘（SATA_SSD）或普通磁盘(Normal)。 如果不填，则默认为SATA_SSD
	InstanceType *string `required:"false"`

	// 其他版本：该参数可不填；专享版：物理机节点的个数。一台物理机有2个节点
	RouterNodeNum *int `required:"true"`

	// UDDB路由节点的版本。分为三种： Trival(免费版)： 2中间件节点； QPS：1.5WFeelFree(标准版)： 固定为4中间件节点，后续将根据业务请求量自动扩展，最多扩展到12个节点，QPS为3w - 10w；EnjoyAlone(物理机版)：专享物理机，节点数让客户可选
	RouterVersion *string `required:"true"`

	// UDDB实例ID
	UDDBId *string `required:"true"`
}

// DescribeUDDBInstanceUpgradePriceResponse is response schema for DescribeUDDBInstanceUpgradePrice action
type DescribeUDDBInstanceUpgradePriceResponse struct {
	response.CommonBase

	// 如果执行失败, 失败的错误消息
	Message string

	// 价格明细, 参考PriceInfo对象定义
	PriceInfo PriceInfo
}

// NewDescribeUDDBInstanceUpgradePriceRequest will create request of DescribeUDDBInstanceUpgradePrice action.
func (c *UDDBClient) NewDescribeUDDBInstanceUpgradePriceRequest() *DescribeUDDBInstanceUpgradePriceRequest {
	req := &DescribeUDDBInstanceUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDDBInstanceUpgradePrice

升级UDDB时，获取升级后的价格
*/
func (c *UDDBClient) DescribeUDDBInstanceUpgradePrice(req *DescribeUDDBInstanceUpgradePriceRequest) (*DescribeUDDBInstanceUpgradePriceResponse, error) {
	var err error
	var res DescribeUDDBInstanceUpgradePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDDBInstanceUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RestartUDDBInstanceRequest is request schema for RestartUDDBInstance action
type RestartUDDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// UDDB实例ID
	UDDBId *string `required:"true"`
}

// RestartUDDBInstanceResponse is response schema for RestartUDDBInstance action
type RestartUDDBInstanceResponse struct {
	response.CommonBase

	// 如果执行失败, 失败的错误消息
	Message string
}

// NewRestartUDDBInstanceRequest will create request of RestartUDDBInstance action.
func (c *UDDBClient) NewRestartUDDBInstanceRequest() *RestartUDDBInstanceRequest {
	req := &RestartUDDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RestartUDDBInstance

重启UDDB实例，开始提供服务。

如下状态的UDDB实例可以进行这个操作:

Running: 正常运行中
Abnormal: 异常运行中
当请求返回成功之后，UDDB实例的状态变成"Starting"(启动中); 如果返回失败, UDDB实例状态保持不变 UDDB实例在重启过程中, 当UDDB实例启动成功之后, UDDB实例的状态变成"Running"(正常运行中); 如果启动过程中出现异常, 状态变成"Abnormal"(异常运行中), 或者"Shutoff"(已关闭
*/
func (c *UDDBClient) RestartUDDBInstance(req *RestartUDDBInstanceRequest) (*RestartUDDBInstanceResponse, error) {
	var err error
	var res RestartUDDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RestartUDDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StartUDDBInstanceRequest is request schema for StartUDDBInstance action
type StartUDDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// UDDB实例ID
	UDDBId *string `required:"true"`
}

// StartUDDBInstanceResponse is response schema for StartUDDBInstance action
type StartUDDBInstanceResponse struct {
	response.CommonBase

	// 如果执行失败, 失败的错误消息
	Message string
}

// NewStartUDDBInstanceRequest will create request of StartUDDBInstance action.
func (c *UDDBClient) NewStartUDDBInstanceRequest() *StartUDDBInstanceRequest {
	req := &StartUDDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StartUDDBInstance

启动UDDB实例，开始提供服务。

如下状态的UDDB实例可以进行这个操作:

Shutoff: 已关闭
当请求返回成功之后，UDDB实例的状态变成"Starting"(启动中); 如果返回失败, UDDB实例状态保持不变 UDDB实例在启动过程中, 当UDDB实例启动成功之后, UDDB实例的状态变成"Running"(正常运行中); 如果启动过程中出现异常, 状态变成"Abnormal"(异常运行中), 或者"Shutoff"(已关闭)
*/
func (c *UDDBClient) StartUDDBInstance(req *StartUDDBInstanceRequest) (*StartUDDBInstanceResponse, error) {
	var err error
	var res StartUDDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StartUDDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StopUDDBInstanceRequest is request schema for StopUDDBInstance action
type StopUDDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// UDDB实例ID
	UDDBId *string `required:"true"`
}

// StopUDDBInstanceResponse is response schema for StopUDDBInstance action
type StopUDDBInstanceResponse struct {
	response.CommonBase

	// 如果执行失败, 失败的错误消息
	Message string
}

// NewStopUDDBInstanceRequest will create request of StopUDDBInstance action.
func (c *UDDBClient) NewStopUDDBInstanceRequest() *StopUDDBInstanceRequest {
	req := &StopUDDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StopUDDBInstance

关闭UDDB实例，停止提供服务。

如下状态的UDDB实例可以进行这个操作:

Running: 正常运行中
Abnormal: 异常运行中
当请求返回成功之后，UDDB实例的状态变成"Shutdown"(关闭中); 如果返回失败, UDDB实例状态保持不变 UDDB实例在关闭过程中, 当UDDB实例关闭成功之后, UDDB实例的状态变成"Shutoff"(已关闭); 如果关闭过程中出现异常, 根据UDDB实例的情况, 状态变成"Abnormal"(异常运行中), 或者"Running"(正常运行中)
*/
func (c *UDDBClient) StopUDDBInstance(req *StopUDDBInstanceRequest) (*StopUDDBInstanceResponse, error) {
	var err error
	var res StopUDDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StopUDDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpgradeUDDBDataNodeRequest is request schema for UpgradeUDDBDataNode action
type UpgradeUDDBDataNodeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 使用的代金券id
	CouponId *string `required:"false"`

	// 新的数据节点的磁盘大小配置. 单位: GB 具体数值参考UDB的磁盘大小取值.
	DataNodeDiskSpace *int `required:"true"`

	// 新的数据节点的内存配置, 单位：MB 具体数值参考UDB的内存取值
	DataNodeMemory *int `required:"true"`

	// UDDB实例ID
	UDDBId *string `required:"true"`
}

// UpgradeUDDBDataNodeResponse is response schema for UpgradeUDDBDataNode action
type UpgradeUDDBDataNodeResponse struct {
	response.CommonBase

	// 如果执行失败, 失败的错误消息
	Message string
}

// NewUpgradeUDDBDataNodeRequest will create request of UpgradeUDDBDataNode action.
func (c *UDDBClient) NewUpgradeUDDBDataNodeRequest() *UpgradeUDDBDataNodeRequest {
	req := &UpgradeUDDBDataNodeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpgradeUDDBDataNode

升降级分布式数据库数据节点的配置, 提高/降低数据节点的数据容量和内存

所有数据节点以及其所挂载的只读实例的配置都受到影响

升降级数据节点的配置之后之后, 会按照数据节点新的磁盘和内存大小重新计费

如下状态的数据节点实例可以进行这个操作:

Shutoff: 已关闭
当请求返回成功之后，UDDB实例的状态变成"UpgradingDataNode"，相关数据节点的状态变成"Upgrading"; 如果返回失败, UDDB实例状态保持不变 当UDDB实例升级结束之后, UDDB实例的状态变成"Shutoff"
*/
func (c *UDDBClient) UpgradeUDDBDataNode(req *UpgradeUDDBDataNodeRequest) (*UpgradeUDDBDataNodeResponse, error) {
	var err error
	var res UpgradeUDDBDataNodeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpgradeUDDBDataNode", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpgradeUDDBInstanceRequest is request schema for UpgradeUDDBInstance action
type UpgradeUDDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 使用的代金券id
	CouponId *string `required:"false"`

	// 其他版本：该参数可不填；专享版：物理机台数
	RouterNodeNum *int `required:"true"`

	// UDDB路由节点的版本。分为三种： Trival(免费版)： 2中间件节点； QPS：1.5W FellFree(标准版)： 固定为4中间件节点，后续将根据业务请求量自动扩展，最多扩展到12个节点，QPS为3w - 10w； EnjoyAlone(物理机版)：专享物理机，节点数让客户可选
	RouterVersion *string `required:"true"`

	// UDDB实例ID
	UDDBId *string `required:"true"`
}

// UpgradeUDDBInstanceResponse is response schema for UpgradeUDDBInstance action
type UpgradeUDDBInstanceResponse struct {
	response.CommonBase

	// 如果执行失败, 失败的错误消息
	Message string
}

// NewUpgradeUDDBInstanceRequest will create request of UpgradeUDDBInstance action.
func (c *UDDBClient) NewUpgradeUDDBInstanceRequest() *UpgradeUDDBInstanceRequest {
	req := &UpgradeUDDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpgradeUDDBInstance

升降级分布式数据库中间件的配置, 提高/降低请求处理的并发性

修改请求处理节点个数之后, 按照所有请求处理节点的总内存容量和CPU核数重新计费

如下状态的UDDB实例可以进行这个操作:

Running: 系统正常运行中
当请求返回成功之后，UDDB实例的状态变成"UpgradingUDDB"; 如果返回失败, UDDB实例状态保持不变 当UDDB实例升级成功之后, UDDB实例的状态变成"Running"; 如果更改过程中出现异常, 状态变成"Abnormal", 或者"Error"
*/
func (c *UDDBClient) UpgradeUDDBInstance(req *UpgradeUDDBInstanceRequest) (*UpgradeUDDBInstanceResponse, error) {
	var err error
	var res UpgradeUDDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpgradeUDDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
