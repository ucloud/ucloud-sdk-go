// Code is generated by ucloud-model, DO NOT EDIT IT.




package uslk

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// USLK API Schema
















// BatchCreateUSLKShortLinkRequest is request schema for BatchCreateUSLKShortLink action
type BatchCreateUSLKShortLinkRequest struct {
	request.CommonBase




    // 过期时间戳（秒级），传 3376656000 表示生成永久生效短链接 
    EndTime *int `required:"true"`

    // 长链接数组，示例: "LongLinks.0": "http://ucloud.cn/0", "LongLinks.1": "http://ucloud.cn/1" 
    LongLinks []string `required:"true"`

    // 协议名称：http/https 
    Proto *string `required:"true"`

    // 场景ID 
    ScenarioID *int `required:"true"`

    // 短链接域名 
    ShortLinkDomain *string `required:"true"`

    // 开始生效时间戳（秒级）, 传 3376656000 表示生成永久生效短链接 
    StartTime *int `required:"true"`

}


// BatchCreateUSLKShortLinkResponse is response schema for BatchCreateUSLKShortLink action
type BatchCreateUSLKShortLinkResponse struct {
	response.CommonBase


    // Message 
    Message string 

    // 创建成功的短链接，根据传LongLinks顺序排列 
    ShortLinks []string 

}


// NewBatchCreateUSLKShortLinkRequest will create request of BatchCreateUSLKShortLink action.
func (c *USLKClient) NewBatchCreateUSLKShortLinkRequest() *BatchCreateUSLKShortLinkRequest {
    req := &BatchCreateUSLKShortLinkRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: BatchCreateUSLKShortLink

批量创建短链接【免审】
*/
func (c *USLKClient) BatchCreateUSLKShortLink(req *BatchCreateUSLKShortLinkRequest) (*BatchCreateUSLKShortLinkResponse, error) {
	var err error
	var res BatchCreateUSLKShortLinkResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("BatchCreateUSLKShortLink", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUSLKLongLinkRequest is request schema for CreateUSLKLongLink action
type CreateUSLKLongLinkRequest struct {
	request.CommonBase




    // 要报备的长链接 
    LongLink *string `required:"true"`

    // 场景ID 
    ScenarioID *int `required:"true"`

}


// CreateUSLKLongLinkResponse is response schema for CreateUSLKLongLink action
type CreateUSLKLongLinkResponse struct {
	response.CommonBase


    // 长链接ID 
    LongLinkID int 

    // Message 
    Message string 

    // ReqUuid 
    ReqUuid string 

}


// NewCreateUSLKLongLinkRequest will create request of CreateUSLKLongLink action.
func (c *USLKClient) NewCreateUSLKLongLinkRequest() *CreateUSLKLongLinkRequest {
    req := &CreateUSLKLongLinkRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUSLKLongLink

报备长链接
*/
func (c *USLKClient) CreateUSLKLongLink(req *CreateUSLKLongLinkRequest) (*CreateUSLKLongLinkResponse, error) {
	var err error
	var res CreateUSLKLongLinkResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUSLKLongLink", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUSLKScenarioRequest is request schema for CreateUSLKScenario action
type CreateUSLKScenarioRequest struct {
	request.CommonBase




    // 场景名称 
    Scenario *string `required:"true"`

    // 场景说明 
    ScenarioDesc *string `required:"true"`

}


// CreateUSLKScenarioResponse is response schema for CreateUSLKScenario action
type CreateUSLKScenarioResponse struct {
	response.CommonBase


    // Message 
    Message string 

    // ReqUuid 
    ReqUuid string 

    // 场景ID 
    ScenarioID int 

}


// NewCreateUSLKScenarioRequest will create request of CreateUSLKScenario action.
func (c *USLKClient) NewCreateUSLKScenarioRequest() *CreateUSLKScenarioRequest {
    req := &CreateUSLKScenarioRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUSLKScenario

长链接报备场景创建
*/
func (c *USLKClient) CreateUSLKScenario(req *CreateUSLKScenarioRequest) (*CreateUSLKScenarioResponse, error) {
	var err error
	var res CreateUSLKScenarioResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUSLKScenario", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUSLKShortLinkRequest is request schema for CreateUSLKShortLink action
type CreateUSLKShortLinkRequest struct {
	request.CommonBase




    // 过期时间戳，传 3376656000 表示生成永久生效短链接 
    EndTime *int `required:"true"`

    // 长链接ID，状态必须为审核通过 
    LongLinkID *int `required:"true"`

    // 协议名称：http/https 
    Proto *string `required:"true"`

    // 短链接域名，默认：uslk.net 
    ShortLinkDomain *string `required:"false"`

    // 开始生效时间戳, 传 3376656000 表示生成永久生效短链接 
    StartTime *int `required:"true"`

    // 链接类型-预留：普通跳转、随机跳转，当前默认普通跳转 1: 普通跳转 
    Type *int `required:"true"`

}


// CreateUSLKShortLinkResponse is response schema for CreateUSLKShortLink action
type CreateUSLKShortLinkResponse struct {
	response.CommonBase


    // Message 
    Message string 

    // 生成的短链接内容 
    ShortLink string 

}


// NewCreateUSLKShortLinkRequest will create request of CreateUSLKShortLink action.
func (c *USLKClient) NewCreateUSLKShortLinkRequest() *CreateUSLKShortLinkRequest {
    req := &CreateUSLKShortLinkRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUSLKShortLink

创建短链接
*/
func (c *USLKClient) CreateUSLKShortLink(req *CreateUSLKShortLinkRequest) (*CreateUSLKShortLinkResponse, error) {
	var err error
	var res CreateUSLKShortLinkResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUSLKShortLink", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUSLKRedirectRecordsRequest is request schema for DescribeUSLKRedirectRecords action
type DescribeUSLKRedirectRecordsRequest struct {
	request.CommonBase




    // 查询周期结束时间戳(ms级别) 
    EndTime *int `required:"true"`

    // 模糊查询字段值，支持根据生成短链接进行模糊查询。支持字段(ShortLink，场景名称) 
    FuzzySearch *string `required:"false"`

    // 每页个数，用于分页查找，默认20 
    NumPerPage *int `required:"false"`

    // 根据指定字段排序：默认按短链接访问时间：CreateTime 排序 
    OrderBy *string `required:"false"`

    // 排序方式。asc-正序 desc-倒序 
    OrderType *string `required:"false"`

    // 页码，从0开始，用于分页查找 
    Page *int `required:"false"`

    // 短链接 
    ShortLink *string `required:"true"`

    // 查询周期开始时间戳(ms级别) 
    StartTime *int `required:"true"`

}


// DescribeUSLKRedirectRecordsResponse is response schema for DescribeUSLKRedirectRecords action
type DescribeUSLKRedirectRecordsResponse struct {
	response.CommonBase


    // 长链接列表 
    Data []RedirectRecords 

    // Message 
    Message string 

    // 数据总量 
    Total int 

}


// NewDescribeUSLKRedirectRecordsRequest will create request of DescribeUSLKRedirectRecords action.
func (c *USLKClient) NewDescribeUSLKRedirectRecordsRequest() *DescribeUSLKRedirectRecordsRequest {
    req := &DescribeUSLKRedirectRecordsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}


/*
API: DescribeUSLKRedirectRecords

查询短链接访问明细列表
*/
func (c *USLKClient) DescribeUSLKRedirectRecords(req *DescribeUSLKRedirectRecordsRequest) (*DescribeUSLKRedirectRecordsResponse, error) {
	var err error
	var res DescribeUSLKRedirectRecordsResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUSLKRedirectRecords", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUSLKShortLinkListRequest is request schema for DescribeUSLKShortLinkList action
type DescribeUSLKShortLinkListRequest struct {
	request.CommonBase




    // 查询周期结束时间戳 
    EndTime *int `required:"false"`

    // 模糊查询字段值，支持根据生成短链接进行模糊查询。支持字段(LonkLink,场景名称) 
    FuzzySearch *string `required:"false"`

    // 长链接ID 
    LongLinkID *int `required:"false"`

    // 每页个数，用于分页查找，默认20 
    NumPerPage *int `required:"false"`

    // 根据指定字段排序：默认按创建时间：CreateTime 排序，支持值：CreateTime,StartTime,EndTime 
    OrderBy *string `required:"false"`

    // 排序方式。asc-正序 desc-倒序 
    OrderType *string `required:"false"`

    // 页码，从0开始，用于分页查找 
    Page *int `required:"false"`

    // 场景ID 
    ScenarioID *int `required:"false"`

    // 短链 
    ShortLink *string `required:"false"`

    // 查询周期开始时间戳 
    StartTime *int `required:"false"`

    // 1: 待生效；2：已生效；3：已失效；4：已删除（预留）；5：已封禁 
    Status *int `required:"false"`

}


// DescribeUSLKShortLinkListResponse is response schema for DescribeUSLKShortLinkList action
type DescribeUSLKShortLinkListResponse struct {
	response.CommonBase


    // 短链接列表 
    Data []ShortLink 

    // Message 
    Message string 

}


// NewDescribeUSLKShortLinkListRequest will create request of DescribeUSLKShortLinkList action.
func (c *USLKClient) NewDescribeUSLKShortLinkListRequest() *DescribeUSLKShortLinkListRequest {
    req := &DescribeUSLKShortLinkListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}


/*
API: DescribeUSLKShortLinkList

查询短链接列表
*/
func (c *USLKClient) DescribeUSLKShortLinkList(req *DescribeUSLKShortLinkListRequest) (*DescribeUSLKShortLinkListResponse, error) {
	var err error
	var res DescribeUSLKShortLinkListResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUSLKShortLinkList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}


