// Code is generated by ucloud-model, DO NOT EDIT IT.

package label

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// Label API Schema

/*
BindLabelsParamLabels is request schema for complex param
*/
type BindLabelsParamLabels struct {

	// 标签键
	Key *string `required:"true"`

	// 标签值
	Value *string `required:"true"`
}

// BindLabelsRequest is request schema for BindLabels action
type BindLabelsRequest struct {
	request.CommonBase

	//
	Labels []BindLabelsParamLabels `required:"false"`

	// 资源id数组
	ResourceIds []string `required:"true"`
}

// BindLabelsResponse is response schema for BindLabels action
type BindLabelsResponse struct {
	response.CommonBase
}

// NewBindLabelsRequest will create request of BindLabels action.
func (c *LabelClient) NewBindLabelsRequest() *BindLabelsRequest {
	req := &BindLabelsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindLabels

绑定标签
*/
func (c *LabelClient) BindLabels(req *BindLabelsRequest) (*BindLabelsResponse, error) {
	var err error
	var res BindLabelsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindLabels", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
CreateLabelsParamLabels is request schema for complex param
*/
type CreateLabelsParamLabels struct {

	// 标签键
	Key *string `required:"true"`

	// 标签值
	Value *string `required:"true"`
}

// CreateLabelsRequest is request schema for CreateLabels action
type CreateLabelsRequest struct {
	request.CommonBase

	//
	Labels []CreateLabelsParamLabels `required:"false"`
}

// CreateLabelsResponse is response schema for CreateLabels action
type CreateLabelsResponse struct {
	response.CommonBase
}

// NewCreateLabelsRequest will create request of CreateLabels action.
func (c *LabelClient) NewCreateLabelsRequest() *CreateLabelsRequest {
	req := &CreateLabelsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateLabels

创建标签
*/
func (c *LabelClient) CreateLabels(req *CreateLabelsRequest) (*CreateLabelsResponse, error) {
	var err error
	var res CreateLabelsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateLabels", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
DeleteLabelsParamLabels is request schema for complex param
*/
type DeleteLabelsParamLabels struct {

	// 标签键
	Key *string `required:"true"`

	// 标签值
	Value *string `required:"true"`
}

// DeleteLabelsRequest is request schema for DeleteLabels action
type DeleteLabelsRequest struct {
	request.CommonBase

	//
	Labels []DeleteLabelsParamLabels `required:"false"`
}

// DeleteLabelsResponse is response schema for DeleteLabels action
type DeleteLabelsResponse struct {
	response.CommonBase
}

// NewDeleteLabelsRequest will create request of DeleteLabels action.
func (c *LabelClient) NewDeleteLabelsRequest() *DeleteLabelsRequest {
	req := &DeleteLabelsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteLabels

删除标签
*/
func (c *LabelClient) DeleteLabels(req *DeleteLabelsRequest) (*DeleteLabelsResponse, error) {
	var err error
	var res DeleteLabelsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteLabels", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ListLabelsRequest is request schema for ListLabels action
type ListLabelsRequest struct {
	request.CommonBase

	// 标签类型，system：系统标签；custom：自定义标签
	Category *string `required:"true"`

	// 返回数据长度，默认为10，最大100
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0
	Offset *int `required:"false"`
}

// ListLabelsResponse is response schema for ListLabels action
type ListLabelsResponse struct {
	response.CommonBase

	// 标签数组
	Labels []ListLabelsLabel

	// 标签总数
	TotalCount int
}

// NewListLabelsRequest will create request of ListLabels action.
func (c *LabelClient) NewListLabelsRequest() *ListLabelsRequest {
	req := &ListLabelsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListLabels

标签列表
*/
func (c *LabelClient) ListLabels(req *ListLabelsRequest) (*ListLabelsResponse, error) {
	var err error
	var res ListLabelsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListLabels", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ListLabelsByResourceIdsRequest is request schema for ListLabelsByResourceIds action
type ListLabelsByResourceIdsRequest struct {
	request.CommonBase

	// 返回数据长度，默认为10，最大100
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0
	Offset *int `required:"false"`

	// 资源id数组
	ResourceIds []string `required:"true"`
}

// ListLabelsByResourceIdsResponse is response schema for ListLabelsByResourceIds action
type ListLabelsByResourceIdsResponse struct {
	response.CommonBase

	// 资源标签数组
	Labels []ListLabelsByResourceIdsLabel

	// 资源标签总数
	TotalCount int
}

// NewListLabelsByResourceIdsRequest will create request of ListLabelsByResourceIds action.
func (c *LabelClient) NewListLabelsByResourceIdsRequest() *ListLabelsByResourceIdsRequest {
	req := &ListLabelsByResourceIdsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListLabelsByResourceIds

根据资源ID获取标签列表
*/
func (c *LabelClient) ListLabelsByResourceIds(req *ListLabelsByResourceIdsRequest) (*ListLabelsByResourceIdsResponse, error) {
	var err error
	var res ListLabelsByResourceIdsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListLabelsByResourceIds", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
ListProjectsByLabelsParamLabels is request schema for complex param
*/
type ListProjectsByLabelsParamLabels struct {

	// 标签键
	Key *string `required:"true"`

	// 标签值
	Value *string `required:"true"`
}

// ListProjectsByLabelsRequest is request schema for ListProjectsByLabels action
type ListProjectsByLabelsRequest struct {
	request.CommonBase

	//
	Labels []ListProjectsByLabelsParamLabels `required:"false"`
}

// ListProjectsByLabelsResponse is response schema for ListProjectsByLabels action
type ListProjectsByLabelsResponse struct {
	response.CommonBase

	// 项目列表
	Projects []ListProjectsByLabelsProject
}

// NewListProjectsByLabelsRequest will create request of ListProjectsByLabels action.
func (c *LabelClient) NewListProjectsByLabelsRequest() *ListProjectsByLabelsRequest {
	req := &ListProjectsByLabelsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListProjectsByLabels

根据标签获取项目列表
*/
func (c *LabelClient) ListProjectsByLabels(req *ListProjectsByLabelsRequest) (*ListProjectsByLabelsResponse, error) {
	var err error
	var res ListProjectsByLabelsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListProjectsByLabels", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
ListResourcesByLabelsParamLabels is request schema for complex param
*/
type ListResourcesByLabelsParamLabels struct {

	// 标签键
	Key *string `required:"false"`

	// 标签值
	Value *string `required:"false"`
}

// ListResourcesByLabelsRequest is request schema for ListResourcesByLabels action
type ListResourcesByLabelsRequest struct {
	request.CommonBase

	//
	Labels []ListResourcesByLabelsParamLabels `required:"false"`

	// 返回数据长度，默认为10，最大100
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0
	Offset *int `required:"false"`

	// 项目id数组
	ProjectIds []string `required:"false"`

	// 资源类型数组
	ResourceTypes []string `required:"false"`
}

// ListResourcesByLabelsResponse is response schema for ListResourcesByLabels action
type ListResourcesByLabelsResponse struct {
	response.CommonBase
}

// NewListResourcesByLabelsRequest will create request of ListResourcesByLabels action.
func (c *LabelClient) NewListResourcesByLabelsRequest() *ListResourcesByLabelsRequest {
	req := &ListResourcesByLabelsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListResourcesByLabels

根据标签获取资源列表
*/
func (c *LabelClient) ListResourcesByLabels(req *ListResourcesByLabelsRequest) (*ListResourcesByLabelsResponse, error) {
	var err error
	var res ListResourcesByLabelsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListResourcesByLabels", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ListResourcesTypesForLabelRequest is request schema for ListResourcesTypesForLabel action
type ListResourcesTypesForLabelRequest struct {
	request.CommonBase
}

// ListResourcesTypesForLabelResponse is response schema for ListResourcesTypesForLabel action
type ListResourcesTypesForLabelResponse struct {
	response.CommonBase

	// 资源类型列表
	ResourceTypes []string

	// 总数
	TotalCount int
}

// NewListResourcesTypesForLabelRequest will create request of ListResourcesTypesForLabel action.
func (c *LabelClient) NewListResourcesTypesForLabelRequest() *ListResourcesTypesForLabelRequest {
	req := &ListResourcesTypesForLabelRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListResourcesTypesForLabel

获取支持标签的资源类型
*/
func (c *LabelClient) ListResourcesTypesForLabel(req *ListResourcesTypesForLabelRequest) (*ListResourcesTypesForLabelResponse, error) {
	var err error
	var res ListResourcesTypesForLabelResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListResourcesTypesForLabel", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UnbindLabelsParamLabels is request schema for complex param
*/
type UnbindLabelsParamLabels struct {

	// 标签键
	Key *string `required:"true"`

	// 标签值
	Value *string `required:"true"`
}

// UnbindLabelsRequest is request schema for UnbindLabels action
type UnbindLabelsRequest struct {
	request.CommonBase

	//
	Labels []UnbindLabelsParamLabels `required:"false"`

	// 资源id数组
	ResourceIds []string `required:"true"`
}

// UnbindLabelsResponse is response schema for UnbindLabels action
type UnbindLabelsResponse struct {
	response.CommonBase
}

// NewUnbindLabelsRequest will create request of UnbindLabels action.
func (c *LabelClient) NewUnbindLabelsRequest() *UnbindLabelsRequest {
	req := &UnbindLabelsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnbindLabels

解绑标签
*/
func (c *LabelClient) UnbindLabels(req *UnbindLabelsRequest) (*UnbindLabelsResponse, error) {
	var err error
	var res UnbindLabelsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnbindLabels", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
