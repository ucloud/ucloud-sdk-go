// Code is generated by ucloud-model, DO NOT EDIT IT.

package tidb

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// TiDB API Schema

// CreateTiDBServiceRequest is request schema for CreateTiDBService action
type CreateTiDBServiceRequest struct {
	request.CommonBase

	// [公共参数] 项目 ID
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 容灾类型：10:同可用区，20:跨可用区，默认是同可用区
	DTType *string `required:"false"`

	// ipv4
	Ip *string `required:"false"`

	// 服务名称， 长度不超过64
	Name *string `required:"true"`

	// 服务root账号的密码， 长度不超过32
	Password *string `required:"true"`

	// 端口
	Port *string `required:"false"`

	// 子网 ID
	SubnetId *string `required:"true"`

	// 实例类型:   0: 旗舰版，30: 体验版，60: 轻量版
	TikvMemoryHardTh *string `required:"false"`

	// VPC ID
	VPCId *string `required:"true"`
}

// CreateTiDBServiceResponse is response schema for CreateTiDBService action
type CreateTiDBServiceResponse struct {
	response.CommonBase

	// Service Data
	Data ServiceID

	// 返回信息
	Message string

	// 服务ID
	ServiceId string
}

// NewCreateTiDBServiceRequest will create request of CreateTiDBService action.
func (c *TiDBClient) NewCreateTiDBServiceRequest() *CreateTiDBServiceRequest {
	req := &CreateTiDBServiceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateTiDBService

创建TiDB服务
*/
func (c *TiDBClient) CreateTiDBService(req *CreateTiDBServiceRequest) (*CreateTiDBServiceResponse, error) {
	var err error
	var res CreateTiDBServiceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateTiDBService", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteTiDBServiceRequest is request schema for DeleteTiDBService action
type DeleteTiDBServiceRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 资源ID
	Id *string `required:"true"`
}

// DeleteTiDBServiceResponse is response schema for DeleteTiDBService action
type DeleteTiDBServiceResponse struct {
	response.CommonBase

	// 返回信息
	Message string

	// ServiceId
	ServiceId string
}

// NewDeleteTiDBServiceRequest will create request of DeleteTiDBService action.
func (c *TiDBClient) NewDeleteTiDBServiceRequest() *DeleteTiDBServiceRequest {
	req := &DeleteTiDBServiceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteTiDBService

删除一个服务
*/
func (c *TiDBClient) DeleteTiDBService(req *DeleteTiDBServiceRequest) (*DeleteTiDBServiceResponse, error) {
	var err error
	var res DeleteTiDBServiceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteTiDBService", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
SetTiDBConfigParamConfigs is request schema for complex param
*/
type SetTiDBConfigParamConfigs struct {

	// 修改的参数名: proxysql_mysql-max_connections:类型：string, 描述:  所有用户总共的最大连接数 。proxysql_max_connections:  类型：string, 描述:  每个用户的最大连接数。tidb_gc:  类型：string, 描述:   tikv_gc_life_time。
	Name *string `required:"true"`

	// 对应修改的参数值: string
	Value *string `required:"true"`
}

// SetTiDBConfigRequest is request schema for SetTiDBConfig action
type SetTiDBConfigRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	//
	Configs []SetTiDBConfigParamConfigs `required:"false"`

	// 资源Id
	Id *string `required:"true"`
}

// SetTiDBConfigResponse is response schema for SetTiDBConfig action
type SetTiDBConfigResponse struct {
	response.CommonBase

	// ServiceId
	ServiceId string
}

// NewSetTiDBConfigRequest will create request of SetTiDBConfig action.
func (c *TiDBClient) NewSetTiDBConfigRequest() *SetTiDBConfigRequest {
	req := &SetTiDBConfigRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: SetTiDBConfig

设置TiDB服务实例参数
*/
func (c *TiDBClient) SetTiDBConfig(req *SetTiDBConfigRequest) (*SetTiDBConfigResponse, error) {
	var err error
	var res SetTiDBConfigResponse

	reqCopier := *req

	err = c.Client.InvokeAction("SetTiDBConfig", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
