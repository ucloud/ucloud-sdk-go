// Code is generated by ucloud-model, DO NOT EDIT IT.

package nlb

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// NLB API Schema

/*
AddNLBTargetsParamTargets is request schema for complex param
*/
type AddNLBTargetsParamTargets struct {

	// 服务节点的端口，限定取值：[1-65535]
	Port *int `required:"false"`

	// 服务节点的IP。在IP类型时，必传
	ResourceIP *string `required:"false"`

	// 服务节点的资源ID。在非IP类型时，必传
	ResourceId *string `required:"false"`

	// 服务节点的资源名称
	ResourceName *string `required:"false"`

	// 服务节点的类型。限定枚举值："UHost" / "UNI"/"UPM"/"IP"，默认值："UHost"；非IP类型，如果该资源有多个IP，将只能添加主IP；非IP类型，展示时，会显示相关资源信息，IP类型只展示IP信息。
	ResourceType *string `required:"false"`

	// 服务节点的子网资源ID。
	SubnetId *string `required:"false"`

	// 服务节点的VPC资源ID。在IP类型时，必传
	VPCId *string `required:"false"`

	// 服务节点的权重。限定取值：[1-100]，默认值1；仅在加权轮询、加权最小连接数算法时有效
	Weight *int `required:"false"`
}

// AddNLBTargetsRequest is request schema for AddNLBTargets action
type AddNLBTargetsRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 监听器的ID。
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID。
	NLBId *string `required:"true"`

	//
	Targets []AddNLBTargetsParamTargets `required:"false"`
}

// AddNLBTargetsResponse is response schema for AddNLBTargets action
type AddNLBTargetsResponse struct {
	response.CommonBase

	//
	Targets []Target
}

// NewAddNLBTargetsRequest will create request of AddNLBTargets action.
func (c *NLBClient) NewAddNLBTargetsRequest() *AddNLBTargetsRequest {
	req := &AddNLBTargetsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AddNLBTargets

给监听器添加后端服务节点
*/
func (c *NLBClient) AddNLBTargets(req *AddNLBTargetsRequest) (*AddNLBTargetsResponse, error) {
	var err error
	var res AddNLBTargetsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AddNLBTargets", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
CreateNLBListenerParamHealthCheckConfig is request schema for complex param
*/
type CreateNLBListenerParamHealthCheckConfig struct {

	// 是否开启健康检查功能。暂时不支持关闭，默认 true
	Enabled *bool `required:"false"`

	// 健康检查探测端口 说明： 限定取值：[1-65535]
	Port *int `required:"false"`

	// UDP" 检查模式的请求字符串
	ReqMsg *string `required:"false"`

	// "UDP" 检查模式的预期响应字符串
	ResMsg *string `required:"false"`

	// 健康检查方式 限定取值："Port"/"UDP"/"Ping" 默认值：“Port”
	Type *string `required:"false"`
}

// CreateNLBListenerRequest is request schema for CreateNLBListener action
type CreateNLBListenerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 端口范围的结束端口限定取值：[1-65535]取值不小于起始端口默认值 65535
	EndPort *int `required:"false"`

	//
	HealthCheckConfig *CreateNLBListenerParamHealthCheckConfig `required:"false"`

	// 负载均衡实例的ID
	NLBId *string `required:"true"`

	// 监听器的名称限定字符长度：[1-255]限定特殊字符，仅支持：-_.默认值：listener
	Name *string `required:"false"`

	// 监听协议限定取值："TCP"/"UDP"
	Protocol *string `required:"false"`

	// 监听器的备注信息限定字符长度：[0-255]
	Remark *string `required:"false"`

	// 负载均衡算法限定取值："RoundRobin"/"SourceHash"/"LeastConn"/"WeightLeastConn "/"WeightRoundRobin"默认值 "RoundRobin"
	Scheduler *string `required:"false"`

	// 端口范围的起始端口限定取值：[1-65535]默认值 1
	StartPort *int `required:"false"`

	// 会话保持超时时间。单位：秒限定取值：[60-900]，0 表示不开启会话保持默认值60
	StickinessTimeout *int `required:"false"`
}

// CreateNLBListenerResponse is response schema for CreateNLBListener action
type CreateNLBListenerResponse struct {
	response.CommonBase

	// 监听器的ID
	ListenerId string
}

// NewCreateNLBListenerRequest will create request of CreateNLBListener action.
func (c *NLBClient) NewCreateNLBListenerRequest() *CreateNLBListenerRequest {
	req := &CreateNLBListenerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateNLBListener

创建监听器
*/
func (c *NLBClient) CreateNLBListener(req *CreateNLBListenerRequest) (*CreateNLBListenerResponse, error) {
	var err error
	var res CreateNLBListenerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateNLBListener", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateNetworkLoadBalancerRequest is request schema for CreateNetworkLoadBalancer action
type CreateNetworkLoadBalancerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// API 版本，限定取值 "v1.0"/"v2.0"，默认值："v2.0"
	ApiVersion *string `required:"false"`

	// 付费模式，限定取值："Dynamic"/"Month"/"Year"
	ChargeType *string `required:"false"`

	// 代金券code
	CouponId *string `required:"false"`

	// 负载均衡实例的IP协议，限定取值："IPv4"/"IPv6"/"DualStack"，默认值："IPv4"
	IPVersion *string `required:"false"`

	// 负载均衡实例的名称限定字符长度：[1-255]限定特殊字符，仅支持：-_.默认值：nlb
	Name *string `required:"false"`

	// 购买的时长
	Quantity *int `required:"false"`

	// 负载均衡实例的备注信息限定字符长度：[0-255]
	Remark *string `required:"false"`

	// 负载均衡实例所属的子网资源ID
	SubnetId *string `required:"true"`

	// 负载均衡实例所属的业务组ID
	Tag *string `required:"false"`

	// 载均衡实例所属的VPC资源ID
	VPCId *string `required:"true"`
}

// CreateNetworkLoadBalancerResponse is response schema for CreateNetworkLoadBalancer action
type CreateNetworkLoadBalancerResponse struct {
	response.CommonBase

	//
	Message string

	//
	NLBId string
}

// NewCreateNetworkLoadBalancerRequest will create request of CreateNetworkLoadBalancer action.
func (c *NLBClient) NewCreateNetworkLoadBalancerRequest() *CreateNetworkLoadBalancerRequest {
	req := &CreateNetworkLoadBalancerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateNetworkLoadBalancer

创建网络型负载均衡
*/
func (c *NLBClient) CreateNetworkLoadBalancer(req *CreateNetworkLoadBalancerRequest) (*CreateNetworkLoadBalancerResponse, error) {
	var err error
	var res CreateNetworkLoadBalancerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateNetworkLoadBalancer", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteNLBListenerRequest is request schema for DeleteNLBListener action
type DeleteNLBListenerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 监听器的ID
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID
	NLBId *string `required:"true"`
}

// DeleteNLBListenerResponse is response schema for DeleteNLBListener action
type DeleteNLBListenerResponse struct {
	response.CommonBase
}

// NewDeleteNLBListenerRequest will create request of DeleteNLBListener action.
func (c *NLBClient) NewDeleteNLBListenerRequest() *DeleteNLBListenerRequest {
	req := &DeleteNLBListenerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteNLBListener

删除一个网络型负载均衡监听器
*/
func (c *NLBClient) DeleteNLBListener(req *DeleteNLBListenerRequest) (*DeleteNLBListenerResponse, error) {
	var err error
	var res DeleteNLBListenerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteNLBListener", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteNetworkLoadBalancerRequest is request schema for DeleteNetworkLoadBalancer action
type DeleteNetworkLoadBalancerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 负载均衡实例的ID
	NLBId *string `required:"true"`

	// 删除NLB时释放绑定的EIP
	ReleaseEIP *bool `required:"false"`
}

// DeleteNetworkLoadBalancerResponse is response schema for DeleteNetworkLoadBalancer action
type DeleteNetworkLoadBalancerResponse struct {
	response.CommonBase
}

// NewDeleteNetworkLoadBalancerRequest will create request of DeleteNetworkLoadBalancer action.
func (c *NLBClient) NewDeleteNetworkLoadBalancerRequest() *DeleteNetworkLoadBalancerRequest {
	req := &DeleteNetworkLoadBalancerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteNetworkLoadBalancer

删除负载均衡实例
*/
func (c *NLBClient) DeleteNetworkLoadBalancer(req *DeleteNetworkLoadBalancerRequest) (*DeleteNetworkLoadBalancerResponse, error) {
	var err error
	var res DeleteNetworkLoadBalancerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteNetworkLoadBalancer", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNLBListenersRequest is request schema for DescribeNLBListeners action
type DescribeNLBListenersRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 限制返回的监听器数量
	Limit *int `required:"false"`

	// 监听器的ID
	ListenerId *string `required:"false"`

	// 负载均衡实例的ID。未指定 ListenerId ，则描述指定的 LoadBalancerId 下的所有监听器
	NLBId *string `required:"true"`

	// 设置监听器的偏移量
	Offset *string `required:"false"`
}

// DescribeNLBListenersResponse is response schema for DescribeNLBListeners action
type DescribeNLBListenersResponse struct {
	response.CommonBase

	//
	Listeners []Listener

	//
	TotalCount int
}

// NewDescribeNLBListenersRequest will create request of DescribeNLBListeners action.
func (c *NLBClient) NewDescribeNLBListenersRequest() *DescribeNLBListenersRequest {
	req := &DescribeNLBListenersRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNLBListeners

描述监听器
*/
func (c *NLBClient) DescribeNLBListeners(req *DescribeNLBListenersRequest) (*DescribeNLBListenersResponse, error) {
	var err error
	var res DescribeNLBListenersResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNLBListeners", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNetworkLoadBalancersRequest is request schema for DescribeNetworkLoadBalancers action
type DescribeNetworkLoadBalancersRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 负载均衡实例的转发类型
	ForwardingMode *string `required:"false"`

	// 数据分页值，默认为100
	Limit *int `required:"false"`

	// 负载均衡实例的ID，数组
	NLBIds []string `required:"false"`

	// 数据偏移量，默认为0
	Offset *int `required:"false"`

	// 是否获取监听器和后端服务节点的详细信息
	ShowDetail *bool `required:"false"`

	// 限定所在的子网
	SubnetId *string `required:"false"`

	// 限定所在的VPC
	VPCId *string `required:"false"`
}

// DescribeNetworkLoadBalancersResponse is response schema for DescribeNetworkLoadBalancers action
type DescribeNetworkLoadBalancersResponse struct {
	response.CommonBase

	//
	NLBs []NetworkLoadBalancer

	// 满足条件的负载均衡实例总数
	TotalCount int
}

// NewDescribeNetworkLoadBalancersRequest will create request of DescribeNetworkLoadBalancers action.
func (c *NLBClient) NewDescribeNetworkLoadBalancersRequest() *DescribeNetworkLoadBalancersRequest {
	req := &DescribeNetworkLoadBalancersRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNetworkLoadBalancers

描述负载均衡实例
*/
func (c *NLBClient) DescribeNetworkLoadBalancers(req *DescribeNetworkLoadBalancersRequest) (*DescribeNetworkLoadBalancersResponse, error) {
	var err error
	var res DescribeNetworkLoadBalancersResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNetworkLoadBalancers", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetNetworkLoadBalancerPriceRequest is request schema for GetNetworkLoadBalancerPrice action
type GetNetworkLoadBalancerPriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 付费模式限定枚举值："Year" / "Month"/ "Dynamic"默认获取三种价格
	ChargeType *string `required:"false"`

	// 负载均衡实例计费方式限定枚举值："Instance" / "LCU"默认值："Instance"
	PayMode *string `required:"false"`

	// 购买时长按小时购买（Dynamic）时无需此参数。月付时，此参数传 0，代表了购买至月末默认 1
	Quantity *int `required:"false"`
}

// GetNetworkLoadBalancerPriceResponse is response schema for GetNetworkLoadBalancerPrice action
type GetNetworkLoadBalancerPriceResponse struct {
	response.CommonBase

	//
	Prices []PriceDetail
}

// NewGetNetworkLoadBalancerPriceRequest will create request of GetNetworkLoadBalancerPrice action.
func (c *NLBClient) NewGetNetworkLoadBalancerPriceRequest() *GetNetworkLoadBalancerPriceRequest {
	req := &GetNetworkLoadBalancerPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetNetworkLoadBalancerPrice

获取负载均衡价格
*/
func (c *NLBClient) GetNetworkLoadBalancerPrice(req *GetNetworkLoadBalancerPriceRequest) (*GetNetworkLoadBalancerPriceResponse, error) {
	var err error
	var res GetNetworkLoadBalancerPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetNetworkLoadBalancerPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RemoveNLBTargetsRequest is request schema for RemoveNLBTargets action
type RemoveNLBTargetsRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 服务节点的标识ID。单次请求不能超过 40 个
	Ids []string `required:"true"`

	// 监听器的ID
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID
	NLBId *string `required:"true"`
}

// RemoveNLBTargetsResponse is response schema for RemoveNLBTargets action
type RemoveNLBTargetsResponse struct {
	response.CommonBase
}

// NewRemoveNLBTargetsRequest will create request of RemoveNLBTargets action.
func (c *NLBClient) NewRemoveNLBTargetsRequest() *RemoveNLBTargetsRequest {
	req := &RemoveNLBTargetsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RemoveNLBTargets

删除后端服务节点
*/
func (c *NLBClient) RemoveNLBTargets(req *RemoveNLBTargetsRequest) (*RemoveNLBTargetsResponse, error) {
	var err error
	var res RemoveNLBTargetsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RemoveNLBTargets", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UpdateNLBListenerAttributeParamHealthCheckConfig is request schema for complex param
*/
type UpdateNLBListenerAttributeParamHealthCheckConfig struct {

	// 是否开启健康检查功能。暂时不支持关闭，默认 true
	Enabled *bool `required:"false"`

	// 健康检查探测端口 说明： 限定取值：[1-65535]
	Port *int `required:"false"`

	// UDP" 检查模式的请求字符串
	ReqMsg *string `required:"false"`

	// "UDP" 检查模式的预期响应字符串
	ResMsg *string `required:"false"`

	// 健康检查方式 限定取值："Port"/"UDP"/"Ping" 默认值：“Port”
	Type *string `required:"false"`
}

// UpdateNLBListenerAttributeRequest is request schema for UpdateNLBListenerAttribute action
type UpdateNLBListenerAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 端口范围的结束端口 限定取值：[1-65535] 取值不小于起始端口 默认值 65535，只有全端口模式支持修改
	EndPort *int `required:"false"`

	//
	HealthCheckConfig *UpdateNLBListenerAttributeParamHealthCheckConfig `required:"false"`

	// 负载均衡实例的ID
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID
	NLBId *string `required:"true"`

	// 监听器的名称
	Name *string `required:"false"`

	// 监听器的备注信息
	Remark *string `required:"false"`

	// 负载均衡算法 限定取值："RoundRobin"/"SourceHash"/"LeastConn"/"WeightLeastConn "/"WeightRoundRobin" 默认值 "RoundRobin"
	Scheduler *string `required:"false"`

	// 端口范围的起始端口 限定取值：[1-65535] 默认值 1，只有全端口模式支持修改
	StartPort *int `required:"false"`

	// 会话保持超时时间。单位：秒说明：限定取值：[60-900]，0 表示不开启会话保持默认值60
	StickinessTimeout *int `required:"false"`
}

// UpdateNLBListenerAttributeResponse is response schema for UpdateNLBListenerAttribute action
type UpdateNLBListenerAttributeResponse struct {
	response.CommonBase
}

// NewUpdateNLBListenerAttributeRequest will create request of UpdateNLBListenerAttribute action.
func (c *NLBClient) NewUpdateNLBListenerAttributeRequest() *UpdateNLBListenerAttributeRequest {
	req := &UpdateNLBListenerAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateNLBListenerAttribute

更新监听器属性
*/
func (c *NLBClient) UpdateNLBListenerAttribute(req *UpdateNLBListenerAttributeRequest) (*UpdateNLBListenerAttributeResponse, error) {
	var err error
	var res UpdateNLBListenerAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateNLBListenerAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UpdateNLBTargetsAttributeParamTargets is request schema for complex param
*/
type UpdateNLBTargetsAttributeParamTargets struct {

	// 是否禁用服务节点
	Enabled *bool `required:"false"`

	// 服务节点的ID
	Id *string `required:"false"`

	// 服务节点的权重。限定取值：[1-100]，默认值1；仅在加权轮询、加权最小连接数算法时有效
	Weight *int `required:"false"`
}

// UpdateNLBTargetsAttributeRequest is request schema for UpdateNLBTargetsAttribute action
type UpdateNLBTargetsAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 监听器的ID
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID
	NLBId *string `required:"true"`

	//
	Targets []UpdateNLBTargetsAttributeParamTargets `required:"false"`
}

// UpdateNLBTargetsAttributeResponse is response schema for UpdateNLBTargetsAttribute action
type UpdateNLBTargetsAttributeResponse struct {
	response.CommonBase
}

// NewUpdateNLBTargetsAttributeRequest will create request of UpdateNLBTargetsAttribute action.
func (c *NLBClient) NewUpdateNLBTargetsAttributeRequest() *UpdateNLBTargetsAttributeRequest {
	req := &UpdateNLBTargetsAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateNLBTargetsAttribute

更新后端服务节点属性
*/
func (c *NLBClient) UpdateNLBTargetsAttribute(req *UpdateNLBTargetsAttributeRequest) (*UpdateNLBTargetsAttributeResponse, error) {
	var err error
	var res UpdateNLBTargetsAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateNLBTargetsAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateNetworkLoadBalancerAttributeRequest is request schema for UpdateNetworkLoadBalancerAttribute action
type UpdateNetworkLoadBalancerAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 负载均衡实例的ID
	NLBId *string `required:"true"`

	// 负载均衡实例的名称
	Name *string `required:"false"`

	// 负载均衡实例的备注信息
	Remark *string `required:"false"`

	// 负载均衡实例所属的业务组ID
	Tag *string `required:"false"`
}

// UpdateNetworkLoadBalancerAttributeResponse is response schema for UpdateNetworkLoadBalancerAttribute action
type UpdateNetworkLoadBalancerAttributeResponse struct {
	response.CommonBase
}

// NewUpdateNetworkLoadBalancerAttributeRequest will create request of UpdateNetworkLoadBalancerAttribute action.
func (c *NLBClient) NewUpdateNetworkLoadBalancerAttributeRequest() *UpdateNetworkLoadBalancerAttributeRequest {
	req := &UpdateNetworkLoadBalancerAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateNetworkLoadBalancerAttribute

更新负载均衡实例属性
*/
func (c *NLBClient) UpdateNetworkLoadBalancerAttribute(req *UpdateNetworkLoadBalancerAttributeRequest) (*UpdateNetworkLoadBalancerAttributeResponse, error) {
	var err error
	var res UpdateNetworkLoadBalancerAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateNetworkLoadBalancerAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
