// Code is generated by ucloud-model, DO NOT EDIT IT.

package nlb

/*
Target - 服务节点信息
*/
type Target struct {

	// 服务节点是否开启
	Enabled bool

	// 服务节点的标识 ID说明：添加服务节点的时候无需传更新服务节点属性时必传
	Id string

	// 服务节点的端口
	Port int

	// 服务节点所在地域
	Region string

	// 服务节点的IP。在IP类型时，必传
	ResourceIP string

	// 服务节点的资源ID。在非IP类型时，必传
	ResourceId string

	// 服务节点的资源名称
	ResourceName string

	// 服务节点的类型
	ResourceType string

	// 服务节点的健康检查状态说明：描述服务节点信息时显示限定枚举值："Healthy"/"Unhealthy"
	State string

	// 服务节点的子网资源ID。在IP类型时，必传
	SubnetId string

	// 服务节点的VPC资源ID。在IP类型时，必传
	VPCId string

	// 服务节点的权重。支持更新
	Weight int
}

/*
HealthCheckConfig - 健康检查配置
*/
type HealthCheckConfig struct {

	// 是否开启健康检查功能。
	Enabled bool

	// 健康检查间隔时间限定取值：[1-60] 单位秒默认 2s
	Interval int

	// 健康检查最大失败数限定取值：[1-10] 默认 3
	MaxFail int

	// 健康检查最小成功数限定取值：[1-10] 默认 3
	MinSuccess int

	// 健康检查探测端口说明：限定取值：[1-65535]
	Port int

	// UDP" 检查模式的请求字符串"HTTP" 检查模式的请求 json 字符串
	ReqMsg string

	// "UDP" 检查模式的预期响应字符串"HTTP" 检查模式的响应状态码
	ResMsg string

	// 健康检查方式限定取值："Port"/"UDP"/"Ping" /"HTTP"默认值：“Port”
	Type string
}

/*
Listener - 监听器信息
*/
type Listener struct {

	// 端口范围的结束端口
	EndPort int

	// 健康检查相关配置
	HealthCheckConfig HealthCheckConfig

	// 监听器的ID
	ListenerId string

	// 监听器的名称
	Name string

	// 监听协议，限定取值："TCP"/"UDP"
	Protocol string

	// 监听器的备注信息
	Remark string

	// 负载均衡算法，限定取值："RoundRobin"/"SourceHash"/"LeastConn"/"WeightLeastConn "/"WeightRoundRobin "
	Scheduler string

	// 端口范围的起始端口
	StartPort int

	// listener 健康状态，"Healthy"/"Unhealthy"/"PartialHealth"/"None"
	State string

	// 会话保持超时时间。单位：秒，0表示不开启会话保持
	StickinessTimeout int

	// 服务节点信息
	Targets []Target
}

/*
IPInfo - 绑定的IP信息
*/
type IPInfo struct {

	// 网络模式，限定枚举值："Internet" / "Intranet"
	AddressType string

	// 带宽值。单位 M
	Bandwidth int

	// 带宽类型，限定枚举值：0（普通带宽）/ 1（共享带宽）
	BandwidthType int

	// IP 地址
	IP string

	// IP协议版本，限定枚举值："IPv4" / "IPv6"
	IPVersion string

	// 唯一标识 ID
	Id string

	// 外网IP的运营商信息，限定枚举值："Telecom" / "Unicom"/"International"/"Bgp"/"Duplet"/"BGPPro"/"China-mobile"/"Anycast"
	OperatorName string

	// IP 类型，1（前向 IP）/ 2（后向 IP）
	Type int
}

/*
NetworkLoadBalancer - 负载均衡实例信息
*/
type NetworkLoadBalancer struct {

	// 是否开启自动续费
	AutoRenewEnabled bool

	// 付费模式
	ChargeType string

	// 负载均衡实例创建时间。格式为 Unix Timestamp
	CreateTime int

	// 负载均衡实例的转发模式
	ForwardingMode string

	// 绑定的IP信息
	IPInfos []IPInfo

	// 负载均衡实例支持的IP协议版本
	IPVersion string

	//
	Listeners []Listener

	// 负载均衡实例的ID
	NLBId string

	// 负载均衡实例的名称
	Name string

	// 有效期（计费）
	PurchaseValue int

	// 负载均衡实例的备注信息
	Remark string

	// NLB 状态：Normal-正常；Closed-欠费停服；Deleted 已删除
	Status string

	// 负载均衡实例所属的子网资源ID
	SubnetId string

	// 负载均衡实例所属的业务组ID
	Tag string

	// 负载均衡实例所属的VPC资源ID
	VPCId string
}

/*
PriceDetail - 负载均衡实例的价格信息
*/
type PriceDetail struct {

	// 负载均衡付费方式
	ChargeType string

	// 用户折后价，单位“元”。CustomPrice=OriginalPrice*用户折扣
	CustomPrice float64

	// 购买负载均衡的原价，单位“元”
	OriginalPrice float64

	// 购买负载均衡的实际价格，单位“元”
	Price float64

	// 资源有效期，以Unix Timestamp表示
	PurchaseValue int
}
