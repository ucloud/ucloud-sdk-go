// Code is generated by ucloud-model, DO NOT EDIT IT.

package vpc

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// VPC API Schema

// AddSnatRuleRequest is request schema for AddSnatRule action
type AddSnatRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关的ID
	NATGWId *string `required:"true"`

	// snat规则名称，默认为“出口规则”
	Name *string `required:"false"`

	// EIP的ip地址,例如106.75.xx.xx
	SnatIp *string `required:"true"`

	// 需要出外网的私网IP地址，例如10.9.7.xx
	SourceIp *string `required:"true"`
}

// AddSnatRuleResponse is response schema for AddSnatRule action
type AddSnatRuleResponse struct {
	response.CommonBase
}

// NewAddSnatRuleRequest will create request of AddSnatRule action.
func (c *VPCClient) NewAddSnatRuleRequest() *AddSnatRuleRequest {
	req := &AddSnatRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AddSnatRule

对于绑定了多个EIP的NAT网关，您可以将一个子网下的某台云主机映射到某个特定的EIP上，规则生效后，则该云主机通过该特定的EIP访问互联网。
*/
func (c *VPCClient) AddSnatRule(req *AddSnatRuleRequest) (*AddSnatRuleResponse, error) {
	var err error
	var res AddSnatRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AddSnatRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AddVPCNetworkRequest is request schema for AddVPCNetwork action
type AddVPCNetworkRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 增加网段
	Network []string `required:"true"`

	// 源VPC短ID
	VPCId *string `required:"true"`
}

// AddVPCNetworkResponse is response schema for AddVPCNetwork action
type AddVPCNetworkResponse struct {
	response.CommonBase
}

// NewAddVPCNetworkRequest will create request of AddVPCNetwork action.
func (c *VPCClient) NewAddVPCNetworkRequest() *AddVPCNetworkRequest {
	req := &AddVPCNetworkRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AddVPCNetwork

添加VPC网段
*/
func (c *VPCClient) AddVPCNetwork(req *AddVPCNetworkRequest) (*AddVPCNetworkResponse, error) {
	var err error
	var res AddVPCNetworkResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AddVPCNetwork", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AddWhiteListResourceRequest is request schema for AddWhiteListResource action
type AddWhiteListResourceRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// 可添加白名单的资源Id
	ResourceIds []string `required:"true"`
}

// AddWhiteListResourceResponse is response schema for AddWhiteListResource action
type AddWhiteListResourceResponse struct {
	response.CommonBase
}

// NewAddWhiteListResourceRequest will create request of AddWhiteListResource action.
func (c *VPCClient) NewAddWhiteListResourceRequest() *AddWhiteListResourceRequest {
	req := &AddWhiteListResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AddWhiteListResource

添加NAT网关白名单
*/
func (c *VPCClient) AddWhiteListResource(req *AddWhiteListResourceRequest) (*AddWhiteListResourceResponse, error) {
	var err error
	var res AddWhiteListResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AddWhiteListResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AllocateBatchSecondaryIpRequest is request schema for AllocateBatchSecondaryIp action
type AllocateBatchSecondaryIpRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 申请的内网IP数量
	Count *int `required:"false"`

	// 【arry】支持按如下方式申请：①按网段：如192.168.1.32/27，掩码数字最小为27   ②指定IP地址，如192.168.1.3
	Ip []string `required:"false"`

	// 节点mac
	Mac *string `required:"true"`

	// 资源Id
	ObjectId *string `required:"true"`

	// 子网Id（若未指定，则根据zone获取默认子网进行创建）
	SubnetId *string `required:"false"`

	// vpcId
	VPCId *string `required:"false"`
}

// AllocateBatchSecondaryIpResponse is response schema for AllocateBatchSecondaryIp action
type AllocateBatchSecondaryIpResponse struct {
	response.CommonBase

	// 详见IpsInfo
	IpsInfo []IpsInfo
}

// NewAllocateBatchSecondaryIpRequest will create request of AllocateBatchSecondaryIp action.
func (c *VPCClient) NewAllocateBatchSecondaryIpRequest() *AllocateBatchSecondaryIpRequest {
	req := &AllocateBatchSecondaryIpRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AllocateBatchSecondaryIp

批量申请虚拟网卡辅助IP
*/
func (c *VPCClient) AllocateBatchSecondaryIp(req *AllocateBatchSecondaryIpRequest) (*AllocateBatchSecondaryIpResponse, error) {
	var err error
	var res AllocateBatchSecondaryIpResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AllocateBatchSecondaryIp", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AllocateSecondaryIpRequest is request schema for AllocateSecondaryIp action
type AllocateSecondaryIpRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 指定Ip分配
	Ip *string `required:"false"`

	// 节点mac
	Mac *string `required:"true"`

	// 资源Id
	ObjectId *string `required:"true"`

	// 子网Id（若未指定，则根据zone获取默认子网进行创建）
	SubnetId *string `required:"false"`

	// vpcId
	VPCId *string `required:"false"`
}

// AllocateSecondaryIpResponse is response schema for AllocateSecondaryIp action
type AllocateSecondaryIpResponse struct {
	response.CommonBase

	//
	IpInfo IpInfo
}

// NewAllocateSecondaryIpRequest will create request of AllocateSecondaryIp action.
func (c *VPCClient) NewAllocateSecondaryIpRequest() *AllocateSecondaryIpRequest {
	req := &AllocateSecondaryIpRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AllocateSecondaryIp

分配ip（用于uk8s使用）
*/
func (c *VPCClient) AllocateSecondaryIp(req *AllocateSecondaryIpRequest) (*AllocateSecondaryIpResponse, error) {
	var err error
	var res AllocateSecondaryIpResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AllocateSecondaryIp", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AllocateVIPRequest is request schema for AllocateVIP action
type AllocateVIPRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域
	// Region *string `required:"true"`

	// [公共参数] 可用区
	// Zone *string `required:"false"`

	// 业务组
	BusinessId *string `required:"false"`

	// 申请数量，默认: 1
	Count *int `required:"false"`

	// 指定ip
	Ip *string `required:"false"`

	// vip名，默认：VIP
	Name *string `required:"false"`

	// 备注
	Remark *string `required:"false"`

	// 子网id
	SubnetId *string `required:"true"`

	// 业务组名称，默认为Default
	Tag *string `required:"false"`

	// 指定vip所属的VPC
	VPCId *string `required:"true"`
}

// AllocateVIPResponse is response schema for AllocateVIP action
type AllocateVIPResponse struct {
	response.CommonBase

	// 申请到的VIP地址
	DataSet []string

	// 申请到的VIP资源相关信息
	VIPSet []VIPSet
}

// NewAllocateVIPRequest will create request of AllocateVIP action.
func (c *VPCClient) NewAllocateVIPRequest() *AllocateVIPRequest {
	req := &AllocateVIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AllocateVIP

根据提供信息，申请内网VIP(Virtual IP），多用于高可用程序作为漂移IP。
*/
func (c *VPCClient) AllocateVIP(req *AllocateVIPRequest) (*AllocateVIPResponse, error) {
	var err error
	var res AllocateVIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AllocateVIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AssociateRouteTableRequest is request schema for AssociateRouteTable action
type AssociateRouteTableRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 路由表资源ID
	RouteTableId *string `required:"true"`

	// 子网ID
	SubnetId *string `required:"true"`
}

// AssociateRouteTableResponse is response schema for AssociateRouteTable action
type AssociateRouteTableResponse struct {
	response.CommonBase
}

// NewAssociateRouteTableRequest will create request of AssociateRouteTable action.
func (c *VPCClient) NewAssociateRouteTableRequest() *AssociateRouteTableRequest {
	req := &AssociateRouteTableRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: AssociateRouteTable

绑定子网的路由表
*/
func (c *VPCClient) AssociateRouteTable(req *AssociateRouteTableRequest) (*AssociateRouteTableResponse, error) {
	var err error
	var res AssociateRouteTableResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AssociateRouteTable", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
AssociateSecGroupParamPrioritySecGroup is request schema for complex param
*/
type AssociateSecGroupParamPrioritySecGroup struct {

	// 绑定优先级。该字段和资源 ID 只支持一个批量。支持 PrioritySecGroup 的 JSON 格式数组。
	Priority *int `required:"true"`

	// 安全组 ID。该字段和资源 ID 只支持一个批量。支持 PrioritySecGroup 的 JSON 格式数组。
	SecGroupId *string `required:"true"`
}

// AssociateSecGroupRequest is request schema for AssociateSecGroup action
type AssociateSecGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	//
	PrioritySecGroup []AssociateSecGroupParamPrioritySecGroup `required:"false"`

	// 资源短 ID，安全组参数和该字段只支持一个批量。支持 string 数组。
	ResourceId []string `required:"true"`
}

// AssociateSecGroupResponse is response schema for AssociateSecGroup action
type AssociateSecGroupResponse struct {
	response.CommonBase
}

// NewAssociateSecGroupRequest will create request of AssociateSecGroup action.
func (c *VPCClient) NewAssociateSecGroupRequest() *AssociateSecGroupRequest {
	req := &AssociateSecGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: AssociateSecGroup

绑定资源到安全组
*/
func (c *VPCClient) AssociateSecGroup(req *AssociateSecGroupRequest) (*AssociateSecGroupResponse, error) {
	var err error
	var res AssociateSecGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AssociateSecGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AssociateSecGroupDynamicRequest is request schema for AssociateSecGroupDynamic action
type AssociateSecGroupDynamicRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 资源短 ID 数组。支持数组模式。Type 为 string 数组。
	ResourceId []string `required:"true"`

	// 安全组ID
	SecGroupId *string `required:"true"`
}

// AssociateSecGroupDynamicResponse is response schema for AssociateSecGroupDynamic action
type AssociateSecGroupDynamicResponse struct {
	response.CommonBase
}

// NewAssociateSecGroupDynamicRequest will create request of AssociateSecGroupDynamic action.
func (c *VPCClient) NewAssociateSecGroupDynamicRequest() *AssociateSecGroupDynamicRequest {
	req := &AssociateSecGroupDynamicRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: AssociateSecGroupDynamic

绑定安全组，动态调整绑定优先级
*/
func (c *VPCClient) AssociateSecGroupDynamic(req *AssociateSecGroupDynamicRequest) (*AssociateSecGroupDynamicResponse, error) {
	var err error
	var res AssociateSecGroupDynamicResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AssociateSecGroupDynamic", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AttachNetworkInterfaceRequest is request schema for AttachNetworkInterface action
type AttachNetworkInterfaceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 云主机ID（仅支持绑定开启网卡功能，且未开启网络增强的云主机）
	InstanceId *string `required:"true"`

	// 虚拟网卡ID
	InterfaceId *string `required:"true"`
}

// AttachNetworkInterfaceResponse is response schema for AttachNetworkInterface action
type AttachNetworkInterfaceResponse struct {
	response.CommonBase
}

// NewAttachNetworkInterfaceRequest will create request of AttachNetworkInterface action.
func (c *VPCClient) NewAttachNetworkInterfaceRequest() *AttachNetworkInterfaceRequest {
	req := &AttachNetworkInterfaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: AttachNetworkInterface

绑定网卡到云主机
*/
func (c *VPCClient) AttachNetworkInterface(req *AttachNetworkInterfaceRequest) (*AttachNetworkInterfaceResponse, error) {
	var err error
	var res AttachNetworkInterfaceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AttachNetworkInterface", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CloneRouteTableRequest is request schema for CloneRouteTable action
type CloneRouteTableRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 被克隆的路由表ID
	RouteTableId *string `required:"true"`
}

// CloneRouteTableResponse is response schema for CloneRouteTable action
type CloneRouteTableResponse struct {
	response.CommonBase

	// 复制后新的路由表资源ID
	RouteTableId string
}

// NewCloneRouteTableRequest will create request of CloneRouteTable action.
func (c *VPCClient) NewCloneRouteTableRequest() *CloneRouteTableRequest {
	req := &CloneRouteTableRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CloneRouteTable

将现有的路由表复制为一张新的路由表
*/
func (c *VPCClient) CloneRouteTable(req *CloneRouteTableRequest) (*CloneRouteTableResponse, error) {
	var err error
	var res CloneRouteTableResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CloneRouteTable", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateNATGWRequest is request schema for CreateNATGW action
type CreateNATGWRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关绑定的EIPId
	EIPIds []string `required:"true"`

	// NAT网关绑定的防火墙Id
	FirewallId *string `required:"true"`

	// 白名单开关标记。0表示关闭，1表示开启。默认为0
	IfOpen *int `required:"false"`

	// NAT网关名称
	NATGWName *string `required:"true"`

	// 备注。默认为空
	Remark *string `required:"false"`

	// NAT网关绑定的子网Id，默认为空。
	SubnetworkIds []string `required:"false"`

	// 业务组。默认为空
	Tag *string `required:"false"`

	// NAT网关所属的VPC Id。默认为Default VPC Id
	VPCId *string `required:"false"`
}

// CreateNATGWResponse is response schema for CreateNATGW action
type CreateNATGWResponse struct {
	response.CommonBase

	// 申请到的NATGateWay Id
	NATGWId string
}

// NewCreateNATGWRequest will create request of CreateNATGW action.
func (c *VPCClient) NewCreateNATGWRequest() *CreateNATGWRequest {
	req := &CreateNATGWRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateNATGW

创建NAT网关
*/
func (c *VPCClient) CreateNATGW(req *CreateNATGWRequest) (*CreateNATGWResponse, error) {
	var err error
	var res CreateNATGWResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateNATGW", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateNATGWPolicyRequest is request schema for CreateNATGWPolicy action
type CreateNATGWPolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 目标IP。填写对应的目标IP地址
	DstIP *string `required:"true"`

	// 目标端口。可填写固定端口，也可填写端口范围。支持的端口范围为1-65535
	DstPort *string `required:"true"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// 转发策略名称。默认为空
	PolicyName *string `required:"false"`

	// 协议类型。枚举值为：TCP、UDP
	Protocol *string `required:"true"`

	// 源IP。填写对应的EIP Id
	SrcEIPId *string `required:"true"`

	// 源端口。可填写固定端口，也可填写端口范围。支持的端口范围为1-65535
	SrcPort *string `required:"true"`
}

// CreateNATGWPolicyResponse is response schema for CreateNATGWPolicy action
type CreateNATGWPolicyResponse struct {
	response.CommonBase

	// 创建时分配的策略Id
	PolicyId string
}

// NewCreateNATGWPolicyRequest will create request of CreateNATGWPolicy action.
func (c *VPCClient) NewCreateNATGWPolicyRequest() *CreateNATGWPolicyRequest {
	req := &CreateNATGWPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateNATGWPolicy

添加NAT网关端口转发规则
*/
func (c *VPCClient) CreateNATGWPolicy(req *CreateNATGWPolicyRequest) (*CreateNATGWPolicyResponse, error) {
	var err error
	var res CreateNATGWPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateNATGWPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateNetworkAclRequest is request schema for CreateNetworkAcl action
type CreateNetworkAclRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// ACL的名称
	AclName *string `required:"true"`

	// ACL的描述
	Description *string `required:"false"`

	// 将要创建的ACL所属VPC的ID
	VpcId *string `required:"true"`
}

// CreateNetworkAclResponse is response schema for CreateNetworkAcl action
type CreateNetworkAclResponse struct {
	response.CommonBase

	// 创建的ACL的ID
	AclId string
}

// NewCreateNetworkAclRequest will create request of CreateNetworkAcl action.
func (c *VPCClient) NewCreateNetworkAclRequest() *CreateNetworkAclRequest {
	req := &CreateNetworkAclRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateNetworkAcl

创建网络ACL
*/
func (c *VPCClient) CreateNetworkAcl(req *CreateNetworkAclRequest) (*CreateNetworkAclResponse, error) {
	var err error
	var res CreateNetworkAclResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateNetworkAcl", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateNetworkAclAssociationRequest is request schema for CreateNetworkAclAssociation action
type CreateNetworkAclAssociationRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// ACL的ID
	AclId *string `required:"true"`

	// 需要绑定的子网ID
	SubnetworkId *string `required:"true"`
}

// CreateNetworkAclAssociationResponse is response schema for CreateNetworkAclAssociation action
type CreateNetworkAclAssociationResponse struct {
	response.CommonBase

	// 【该字段已废弃，请谨慎使用】
	AclId string `deprecated:"true"`

	// 创建的绑定关系的ID
	AssociationId string

	// 该子网之前的绑定关系信息
	PrevAssociation AssociationInfo
}

// NewCreateNetworkAclAssociationRequest will create request of CreateNetworkAclAssociation action.
func (c *VPCClient) NewCreateNetworkAclAssociationRequest() *CreateNetworkAclAssociationRequest {
	req := &CreateNetworkAclAssociationRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateNetworkAclAssociation

创建ACL的绑定关系
*/
func (c *VPCClient) CreateNetworkAclAssociation(req *CreateNetworkAclAssociationRequest) (*CreateNetworkAclAssociationResponse, error) {
	var err error
	var res CreateNetworkAclAssociationResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateNetworkAclAssociation", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateNetworkAclEntryRequest is request schema for CreateNetworkAclEntry action
type CreateNetworkAclEntryRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// ACL的ID
	AclId *string `required:"true"`

	// IPv4段的CIDR表示
	CidrBlock *string `required:"true"`

	// 描述。长度限制为不超过32字节。
	Description *string `required:"false"`

	// 出向或者入向（“Ingress”, "Egress")
	Direction *string `required:"true"`

	// 规则的行为("Accept", "Reject")
	EntryAction *string `required:"true"`

	// 协议规则描述
	IpProtocol *string `required:"true"`

	// 针对的端口范围
	PortRange *string `required:"true"`

	// Entry的优先级，对于同样的Direction来说，不能重复
	Priority *int `required:"true"`

	// 应用目标资源列表。默认为全部资源生效。TargetType为0时不用填写该值。
	TargetResourceIds []string `required:"false"`

	// 应用目标类型。0代表“子网内全部资源”，1代表“子网内指定资源”，默认为0
	TargetType *int `required:"false"`
}

// CreateNetworkAclEntryResponse is response schema for CreateNetworkAclEntry action
type CreateNetworkAclEntryResponse struct {
	response.CommonBase

	// 创建的Entry的ID
	EntryId string
}

// NewCreateNetworkAclEntryRequest will create request of CreateNetworkAclEntry action.
func (c *VPCClient) NewCreateNetworkAclEntryRequest() *CreateNetworkAclEntryRequest {
	req := &CreateNetworkAclEntryRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateNetworkAclEntry

创建ACL的规则
*/
func (c *VPCClient) CreateNetworkAclEntry(req *CreateNetworkAclEntryRequest) (*CreateNetworkAclEntryResponse, error) {
	var err error
	var res CreateNetworkAclEntryResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateNetworkAclEntry", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
CreateNetworkInterfaceParamPrioritySecGroup is request schema for complex param
*/
type CreateNetworkInterfaceParamPrioritySecGroup struct {

	// 安全组优先级
	Priority *int `required:"false"`

	// 安全组 ID
	SecGroupId *string `required:"false"`
}

// CreateNetworkInterfaceRequest is request schema for CreateNetworkInterface action
type CreateNetworkInterfaceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 是否开启EIP直通，默认false
	EipDirectMode *bool `required:"false"`

	// 枚举值1:EIP网卡可见2:EIP直通默认为1
	EipDirectVersion *int `required:"false"`

	// 虚拟网卡名称，默认为 NetworkInterface
	Name *string `required:"false"`

	//
	PrioritySecGroup []CreateNetworkInterfaceParamPrioritySecGroup `required:"false"`

	// 指定内网IP。当前一个网卡仅支持绑定一个内网IP
	PrivateIp []string `required:"false"`

	// 备注
	Remark *string `required:"false"`

	// 防火墙GroupId，默认：Web推荐防火墙 可由DescribeSecurityGroupResponse中的GroupId取得
	SecurityGroupId *string `required:"false"`

	// 指定使用 安全组还是防火墙。为 0 时绑定防火墙，为1时绑定安全组
	SecurityMode *int `required:"false"`

	// 所属子网ID
	SubnetId *string `required:"true"`

	// 业务组
	Tag *string `required:"false"`

	// 所属VPCID
	VPCId *string `required:"true"`
}

// CreateNetworkInterfaceResponse is response schema for CreateNetworkInterface action
type CreateNetworkInterfaceResponse struct {
	response.CommonBase

	// 若创建成功，则返回虚拟网卡信息。创建失败，无此参数
	NetworkInterface NetworkInterfaceInfo
}

// NewCreateNetworkInterfaceRequest will create request of CreateNetworkInterface action.
func (c *VPCClient) NewCreateNetworkInterfaceRequest() *CreateNetworkInterfaceRequest {
	req := &CreateNetworkInterfaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateNetworkInterface

创建虚拟网卡
*/
func (c *VPCClient) CreateNetworkInterface(req *CreateNetworkInterfaceRequest) (*CreateNetworkInterfaceResponse, error) {
	var err error
	var res CreateNetworkInterfaceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateNetworkInterface", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateRouteTableRequest is request schema for CreateRouteTable action
type CreateRouteTableRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 路由表名称。默认为RouteTable
	Name *string `required:"false"`

	// 备注
	Remark *string `required:"false"`

	// 路由表所属业务组
	Tag *string `required:"false"`

	// 所属的VPC资源ID
	VPCId *string `required:"true"`
}

// CreateRouteTableResponse is response schema for CreateRouteTable action
type CreateRouteTableResponse struct {
	response.CommonBase

	// 路由表ID
	RouteTableId string
}

// NewCreateRouteTableRequest will create request of CreateRouteTable action.
func (c *VPCClient) NewCreateRouteTableRequest() *CreateRouteTableRequest {
	req := &CreateRouteTableRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateRouteTable

创建路由表
*/
func (c *VPCClient) CreateRouteTable(req *CreateRouteTableRequest) (*CreateRouteTableResponse, error) {
	var err error
	var res CreateRouteTableResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateRouteTable", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSecGroupRequest is request schema for CreateSecGroup action
type CreateSecGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 安全组名称，最长64个字符。
	Name *string `required:"true"`

	// 资源ID所属的VPC
	VPCID *string `required:"true"`
}

// CreateSecGroupResponse is response schema for CreateSecGroup action
type CreateSecGroupResponse struct {
	response.CommonBase

	// 安全组ID
	SecGroupId string
}

// NewCreateSecGroupRequest will create request of CreateSecGroup action.
func (c *VPCClient) NewCreateSecGroupRequest() *CreateSecGroupRequest {
	req := &CreateSecGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateSecGroup

创建安全组
*/
func (c *VPCClient) CreateSecGroup(req *CreateSecGroupRequest) (*CreateSecGroupResponse, error) {
	var err error
	var res CreateSecGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSecGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
CreateSecGroupRuleParamRule is request schema for complex param
*/
type CreateSecGroupRuleParamRule struct {

	// "Ingress/Egress"，入站规则/出站规则
	Direction *string `required:"true"`

	// 目的端口。逗号分隔，如 "80,443"、"443,2000-10000"
	DstPort *string `required:"true"`

	// IP 地址信息，逗号分隔。
	IPRange *string `required:"true"`

	// IP 版本，如 “IPv4”。支持 IPv6 后废弃
	IPVersion *string `required:"false"`

	// 规则优先级。范围为 1~200
	Priority *int `required:"true"`

	// 协议类型。"TCP","UDP","ICMP","ICMPv6","ALL"
	ProtocolType *string `required:"true"`

	// 规则备注
	Remark *string `required:"true"`

	// 规则行为。"Accept" 或 "Drop"
	RuleAction *string `required:"true"`
}

// CreateSecGroupRuleRequest is request schema for CreateSecGroupRule action
type CreateSecGroupRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	//
	Rule []CreateSecGroupRuleParamRule `required:"false"`

	// 需要添加规则的安全组资源ID。
	SecGroupId *string `required:"true"`
}

// CreateSecGroupRuleResponse is response schema for CreateSecGroupRule action
type CreateSecGroupRuleResponse struct {
	response.CommonBase

	// 规则 ID
	RuleId []string
}

// NewCreateSecGroupRuleRequest will create request of CreateSecGroupRule action.
func (c *VPCClient) NewCreateSecGroupRuleRequest() *CreateSecGroupRuleRequest {
	req := &CreateSecGroupRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateSecGroupRule
*/
func (c *VPCClient) CreateSecGroupRule(req *CreateSecGroupRuleRequest) (*CreateSecGroupRuleResponse, error) {
	var err error
	var res CreateSecGroupRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSecGroupRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSnatDnatRuleRequest is request schema for CreateSnatDnatRule action
type CreateSnatDnatRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// EIP的IP地址。按入参顺序，PrivateIp与EIP一一对应建立映射关系。
	EIP []string `required:"true"`

	// 映射所使用的NAT网关资源ID
	NATGWId *string `required:"true"`

	// 内网P地址
	PrivateIp []string `required:"true"`
}

// CreateSnatDnatRuleResponse is response schema for CreateSnatDnatRule action
type CreateSnatDnatRuleResponse struct {
	response.CommonBase
}

// NewCreateSnatDnatRuleRequest will create request of CreateSnatDnatRule action.
func (c *VPCClient) NewCreateSnatDnatRuleRequest() *CreateSnatDnatRuleRequest {
	req := &CreateSnatDnatRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateSnatDnatRule

调用接口后会自动创建内外网IP之间的SNAT和DNAT规则，支持TCP、UDP协议全端口
*/
func (c *VPCClient) CreateSnatDnatRule(req *CreateSnatDnatRuleRequest) (*CreateSnatDnatRuleResponse, error) {
	var err error
	var res CreateSnatDnatRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSnatDnatRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSubnetRequest is request schema for CreateSubnet action
type CreateSubnetRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 是否关联IPv6
	AssociateIPv6 *bool `required:"false"`

	// IPv6网段
	IPv6Network *string `required:"false"`

	// 子网网络号位数，默认为24
	Netmask *int `required:"false"`

	// 备注
	Remark *string `required:"false"`

	// 子网网络地址，例如192.168.0.0
	Subnet *string `required:"true"`

	// 子网名称，默认为Subnet
	SubnetName *string `required:"false"`

	// 业务组名称，默认为Default
	Tag *string `required:"false"`

	// 所属VPC的IPv6网段，可选，不填默认从VPC IPv6网段中选择一个进行分配
	VPCIPv6Network *string `required:"false"`

	// VPC资源ID
	VPCId *string `required:"true"`
}

// CreateSubnetResponse is response schema for CreateSubnet action
type CreateSubnetResponse struct {
	response.CommonBase

	// IPv6网段
	IPv6Network string

	// 子网ID
	SubnetId string
}

// NewCreateSubnetRequest will create request of CreateSubnet action.
func (c *VPCClient) NewCreateSubnetRequest() *CreateSubnetRequest {
	req := &CreateSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateSubnet

创建子网
*/
func (c *VPCClient) CreateSubnet(req *CreateSubnetRequest) (*CreateSubnetResponse, error) {
	var err error
	var res CreateSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateVPCRequest is request schema for CreateVPC action
type CreateVPCRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 是否关联IPv6
	AssociateIPv6 *bool `required:"false"`

	// VPC名称
	Name *string `required:"true"`

	// VPC网段
	Network []string `required:"true"`

	// IPv6网段类型
	OperatorName *string `required:"false"`

	// 备注
	Remark *string `required:"false"`

	// 业务组名称
	Tag *string `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	Type *int `required:"false" deprecated:"true"`
}

// CreateVPCResponse is response schema for CreateVPC action
type CreateVPCResponse struct {
	response.CommonBase

	// VPC资源Id
	VPCId string
}

// NewCreateVPCRequest will create request of CreateVPC action.
func (c *VPCClient) NewCreateVPCRequest() *CreateVPCRequest {
	req := &CreateVPCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateVPC

创建VPC
*/
func (c *VPCClient) CreateVPC(req *CreateVPCRequest) (*CreateVPCResponse, error) {
	var err error
	var res CreateVPCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateVPC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateVPCIntercomRequest is request schema for CreateVPCIntercom action
type CreateVPCIntercomRequest struct {
	request.CommonBase

	// [公共参数] 源VPC所在项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 源VPC所在地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 目的VPC项目ID。默认与源VPC同项目。
	DstProjectId *string `required:"false"`

	// 目的VPC所在地域，默认与源VPC同地域。
	DstRegion *string `required:"false"`

	// 目的VPC短ID
	DstVPCId *string `required:"true"`

	// 源VPC短ID
	VPCId *string `required:"true"`
}

// CreateVPCIntercomResponse is response schema for CreateVPCIntercom action
type CreateVPCIntercomResponse struct {
	response.CommonBase
}

// NewCreateVPCIntercomRequest will create request of CreateVPCIntercom action.
func (c *VPCClient) NewCreateVPCIntercomRequest() *CreateVPCIntercomRequest {
	req := &CreateVPCIntercomRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateVPCIntercom

新建VPC互通关系
*/
func (c *VPCClient) CreateVPCIntercom(req *CreateVPCIntercomRequest) (*CreateVPCIntercomResponse, error) {
	var err error
	var res CreateVPCIntercomResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateVPCIntercom", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteNATGWRequest is request schema for DeleteNATGW action
type DeleteNATGWRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// 是否释放绑定的EIP。true：解绑并释放；false：只解绑不释放。默认为false
	ReleaseEip *bool `required:"false"`
}

// DeleteNATGWResponse is response schema for DeleteNATGW action
type DeleteNATGWResponse struct {
	response.CommonBase
}

// NewDeleteNATGWRequest will create request of DeleteNATGW action.
func (c *VPCClient) NewDeleteNATGWRequest() *DeleteNATGWRequest {
	req := &DeleteNATGWRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteNATGW

删除NAT网关
*/
func (c *VPCClient) DeleteNATGW(req *DeleteNATGWRequest) (*DeleteNATGWResponse, error) {
	var err error
	var res DeleteNATGWResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteNATGW", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteNATGWPolicyRequest is request schema for DeleteNATGWPolicy action
type DeleteNATGWPolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// 端口转发规则Id
	PolicyId *string `required:"true"`
}

// DeleteNATGWPolicyResponse is response schema for DeleteNATGWPolicy action
type DeleteNATGWPolicyResponse struct {
	response.CommonBase
}

// NewDeleteNATGWPolicyRequest will create request of DeleteNATGWPolicy action.
func (c *VPCClient) NewDeleteNATGWPolicyRequest() *DeleteNATGWPolicyRequest {
	req := &DeleteNATGWPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteNATGWPolicy

删除NAT网关端口转发规则
*/
func (c *VPCClient) DeleteNATGWPolicy(req *DeleteNATGWPolicyRequest) (*DeleteNATGWPolicyResponse, error) {
	var err error
	var res DeleteNATGWPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteNATGWPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteNetworkAclRequest is request schema for DeleteNetworkAcl action
type DeleteNetworkAclRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 需要删除的AclId
	AclId *string `required:"true"`
}

// DeleteNetworkAclResponse is response schema for DeleteNetworkAcl action
type DeleteNetworkAclResponse struct {
	response.CommonBase
}

// NewDeleteNetworkAclRequest will create request of DeleteNetworkAcl action.
func (c *VPCClient) NewDeleteNetworkAclRequest() *DeleteNetworkAclRequest {
	req := &DeleteNetworkAclRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteNetworkAcl

删除网络ACL
*/
func (c *VPCClient) DeleteNetworkAcl(req *DeleteNetworkAclRequest) (*DeleteNetworkAclResponse, error) {
	var err error
	var res DeleteNetworkAclResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteNetworkAcl", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteNetworkAclAssociationRequest is request schema for DeleteNetworkAclAssociation action
type DeleteNetworkAclAssociationRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 需要删除的AclId
	AclId *string `required:"true"`

	// 绑定的子网ID
	SubnetworkId *string `required:"true"`
}

// DeleteNetworkAclAssociationResponse is response schema for DeleteNetworkAclAssociation action
type DeleteNetworkAclAssociationResponse struct {
	response.CommonBase
}

// NewDeleteNetworkAclAssociationRequest will create request of DeleteNetworkAclAssociation action.
func (c *VPCClient) NewDeleteNetworkAclAssociationRequest() *DeleteNetworkAclAssociationRequest {
	req := &DeleteNetworkAclAssociationRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteNetworkAclAssociation

删除网络ACL绑定关系
*/
func (c *VPCClient) DeleteNetworkAclAssociation(req *DeleteNetworkAclAssociationRequest) (*DeleteNetworkAclAssociationResponse, error) {
	var err error
	var res DeleteNetworkAclAssociationResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteNetworkAclAssociation", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteNetworkAclEntryRequest is request schema for DeleteNetworkAclEntry action
type DeleteNetworkAclEntryRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// Acl的ID
	AclId *string `required:"true"`

	// 需要删除的EntryId
	EntryId *string `required:"true"`
}

// DeleteNetworkAclEntryResponse is response schema for DeleteNetworkAclEntry action
type DeleteNetworkAclEntryResponse struct {
	response.CommonBase
}

// NewDeleteNetworkAclEntryRequest will create request of DeleteNetworkAclEntry action.
func (c *VPCClient) NewDeleteNetworkAclEntryRequest() *DeleteNetworkAclEntryRequest {
	req := &DeleteNetworkAclEntryRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteNetworkAclEntry

删除ACL的规则
*/
func (c *VPCClient) DeleteNetworkAclEntry(req *DeleteNetworkAclEntryRequest) (*DeleteNetworkAclEntryResponse, error) {
	var err error
	var res DeleteNetworkAclEntryResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteNetworkAclEntry", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteNetworkInterfaceRequest is request schema for DeleteNetworkInterface action
type DeleteNetworkInterfaceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 虚拟网卡ID
	InterfaceId *string `required:"true"`
}

// DeleteNetworkInterfaceResponse is response schema for DeleteNetworkInterface action
type DeleteNetworkInterfaceResponse struct {
	response.CommonBase
}

// NewDeleteNetworkInterfaceRequest will create request of DeleteNetworkInterface action.
func (c *VPCClient) NewDeleteNetworkInterfaceRequest() *DeleteNetworkInterfaceRequest {
	req := &DeleteNetworkInterfaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteNetworkInterface

删除网卡
*/
func (c *VPCClient) DeleteNetworkInterface(req *DeleteNetworkInterfaceRequest) (*DeleteNetworkInterfaceResponse, error) {
	var err error
	var res DeleteNetworkInterfaceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteNetworkInterface", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteRouteTableRequest is request schema for DeleteRouteTable action
type DeleteRouteTableRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 路由表资源ID
	RouteTableId *string `required:"true"`
}

// DeleteRouteTableResponse is response schema for DeleteRouteTable action
type DeleteRouteTableResponse struct {
	response.CommonBase
}

// NewDeleteRouteTableRequest will create request of DeleteRouteTable action.
func (c *VPCClient) NewDeleteRouteTableRequest() *DeleteRouteTableRequest {
	req := &DeleteRouteTableRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteRouteTable

删除自定义路由表
*/
func (c *VPCClient) DeleteRouteTable(req *DeleteRouteTableRequest) (*DeleteRouteTableResponse, error) {
	var err error
	var res DeleteRouteTableResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteRouteTable", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSecGroupRequest is request schema for DeleteSecGroup action
type DeleteSecGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 安全组资源 Id。支持 string 数组格式。
	SecGroupId []string `required:"true"`
}

// DeleteSecGroupResponse is response schema for DeleteSecGroup action
type DeleteSecGroupResponse struct {
	response.CommonBase
}

// NewDeleteSecGroupRequest will create request of DeleteSecGroup action.
func (c *VPCClient) NewDeleteSecGroupRequest() *DeleteSecGroupRequest {
	req := &DeleteSecGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSecGroup

删除安全组
*/
func (c *VPCClient) DeleteSecGroup(req *DeleteSecGroupRequest) (*DeleteSecGroupResponse, error) {
	var err error
	var res DeleteSecGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSecGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSecGroupRuleRequest is request schema for DeleteSecGroupRule action
type DeleteSecGroupRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 安全组规则 ID。支持 string 数组格式。
	RuleId []string `required:"true"`

	// 所属安全组 ID。
	SecGroupId *string `required:"true"`
}

// DeleteSecGroupRuleResponse is response schema for DeleteSecGroupRule action
type DeleteSecGroupRuleResponse struct {
	response.CommonBase
}

// NewDeleteSecGroupRuleRequest will create request of DeleteSecGroupRule action.
func (c *VPCClient) NewDeleteSecGroupRuleRequest() *DeleteSecGroupRuleRequest {
	req := &DeleteSecGroupRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSecGroupRule
*/
func (c *VPCClient) DeleteSecGroupRule(req *DeleteSecGroupRuleRequest) (*DeleteSecGroupRuleResponse, error) {
	var err error
	var res DeleteSecGroupRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSecGroupRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSecondaryIpRequest is request schema for DeleteSecondaryIp action
type DeleteSecondaryIpRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// ip
	Ip *string `required:"true"`

	// mac
	Mac *string `required:"true"`

	// 资源Id
	ObjectId *string `required:"false"`

	// 子网Id
	SubnetId *string `required:"true"`

	// VPCId
	VPCId *string `required:"false"`
}

// DeleteSecondaryIpResponse is response schema for DeleteSecondaryIp action
type DeleteSecondaryIpResponse struct {
	response.CommonBase
}

// NewDeleteSecondaryIpRequest will create request of DeleteSecondaryIp action.
func (c *VPCClient) NewDeleteSecondaryIpRequest() *DeleteSecondaryIpRequest {
	req := &DeleteSecondaryIpRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSecondaryIp

删除ip（用于uk8s使用）
*/
func (c *VPCClient) DeleteSecondaryIp(req *DeleteSecondaryIpRequest) (*DeleteSecondaryIpResponse, error) {
	var err error
	var res DeleteSecondaryIpResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSecondaryIp", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSnatDnatRuleRequest is request schema for DeleteSnatDnatRule action
type DeleteSnatDnatRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// EIP的IP地址,PrivateIp与EIP需一一对应
	EIP []string `required:"true"`

	// 映射所使用的NAT网关资源ID
	NATGWId *string `required:"true"`

	// 内网P地址
	PrivateIp []string `required:"true"`
}

// DeleteSnatDnatRuleResponse is response schema for DeleteSnatDnatRule action
type DeleteSnatDnatRuleResponse struct {
	response.CommonBase
}

// NewDeleteSnatDnatRuleRequest will create request of DeleteSnatDnatRule action.
func (c *VPCClient) NewDeleteSnatDnatRuleRequest() *DeleteSnatDnatRuleRequest {
	req := &DeleteSnatDnatRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSnatDnatRule

删除NAT创建内外网IP映射规则
*/
func (c *VPCClient) DeleteSnatDnatRule(req *DeleteSnatDnatRuleRequest) (*DeleteSnatDnatRuleResponse, error) {
	var err error
	var res DeleteSnatDnatRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSnatDnatRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSnatRuleRequest is request schema for DeleteSnatRule action
type DeleteSnatRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关的ID
	NATGWId *string `required:"true"`

	// 需要出外网的私网IP地址，例如10.9.7.xx
	SourceIp *string `required:"true"`
}

// DeleteSnatRuleResponse is response schema for DeleteSnatRule action
type DeleteSnatRuleResponse struct {
	response.CommonBase
}

// NewDeleteSnatRuleRequest will create request of DeleteSnatRule action.
func (c *VPCClient) NewDeleteSnatRuleRequest() *DeleteSnatRuleRequest {
	req := &DeleteSnatRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSnatRule

删除指定的出口规则（SNAT规则）
*/
func (c *VPCClient) DeleteSnatRule(req *DeleteSnatRuleRequest) (*DeleteSnatRuleResponse, error) {
	var err error
	var res DeleteSnatRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSnatRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSubnetRequest is request schema for DeleteSubnet action
type DeleteSubnetRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 子网ID
	SubnetId *string `required:"true"`
}

// DeleteSubnetResponse is response schema for DeleteSubnet action
type DeleteSubnetResponse struct {
	response.CommonBase
}

// NewDeleteSubnetRequest will create request of DeleteSubnet action.
func (c *VPCClient) NewDeleteSubnetRequest() *DeleteSubnetRequest {
	req := &DeleteSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSubnet

删除子网
*/
func (c *VPCClient) DeleteSubnet(req *DeleteSubnetRequest) (*DeleteSubnetResponse, error) {
	var err error
	var res DeleteSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteVPCRequest is request schema for DeleteVPC action
type DeleteVPCRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// VPC资源Id
	VPCId *string `required:"true"`
}

// DeleteVPCResponse is response schema for DeleteVPC action
type DeleteVPCResponse struct {
	response.CommonBase
}

// NewDeleteVPCRequest will create request of DeleteVPC action.
func (c *VPCClient) NewDeleteVPCRequest() *DeleteVPCRequest {
	req := &DeleteVPCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteVPC

删除VPC
*/
func (c *VPCClient) DeleteVPC(req *DeleteVPCRequest) (*DeleteVPCResponse, error) {
	var err error
	var res DeleteVPCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteVPC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteVPCIntercomRequest is request schema for DeleteVPCIntercom action
type DeleteVPCIntercomRequest struct {
	request.CommonBase

	// [公共参数] 源VPC所在项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 源VPC所在地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 目的VPC所在项目ID，默认为源VPC所在项目ID
	DstProjectId *string `required:"false"`

	// 目的VPC所在地域，默认为源VPC所在地域
	DstRegion *string `required:"false"`

	// 目的VPC短ID
	DstVPCId *string `required:"true"`

	// 源VPC短ID
	VPCId *string `required:"true"`
}

// DeleteVPCIntercomResponse is response schema for DeleteVPCIntercom action
type DeleteVPCIntercomResponse struct {
	response.CommonBase
}

// NewDeleteVPCIntercomRequest will create request of DeleteVPCIntercom action.
func (c *VPCClient) NewDeleteVPCIntercomRequest() *DeleteVPCIntercomRequest {
	req := &DeleteVPCIntercomRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteVPCIntercom

删除VPC互通关系
*/
func (c *VPCClient) DeleteVPCIntercom(req *DeleteVPCIntercomRequest) (*DeleteVPCIntercomResponse, error) {
	var err error
	var res DeleteVPCIntercomResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteVPCIntercom", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteWhiteListResourceRequest is request schema for DeleteWhiteListResource action
type DeleteWhiteListResourceRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// 删除白名单的资源Id
	ResourceIds []string `required:"true"`
}

// DeleteWhiteListResourceResponse is response schema for DeleteWhiteListResource action
type DeleteWhiteListResourceResponse struct {
	response.CommonBase
}

// NewDeleteWhiteListResourceRequest will create request of DeleteWhiteListResource action.
func (c *VPCClient) NewDeleteWhiteListResourceRequest() *DeleteWhiteListResourceRequest {
	req := &DeleteWhiteListResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteWhiteListResource

删除NAT网关白名单列表
*/
func (c *VPCClient) DeleteWhiteListResource(req *DeleteWhiteListResourceRequest) (*DeleteWhiteListResourceResponse, error) {
	var err error
	var res DeleteWhiteListResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteWhiteListResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeInstanceNetworkInterfaceRequest is request schema for DescribeInstanceNetworkInterface action
type DescribeInstanceNetworkInterfaceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 云主机ID
	InstanceId *string `required:"true"`

	// 默认为20
	Limit *int `required:"false"`

	// 默认为0
	Offset *int `required:"false"`
}

// DescribeInstanceNetworkInterfaceResponse is response schema for DescribeInstanceNetworkInterface action
type DescribeInstanceNetworkInterfaceResponse struct {
	response.CommonBase

	// 虚拟网卡信息
	NetworkInterfaceSet []InstanceNetworkInterface
}

// NewDescribeInstanceNetworkInterfaceRequest will create request of DescribeInstanceNetworkInterface action.
func (c *VPCClient) NewDescribeInstanceNetworkInterfaceRequest() *DescribeInstanceNetworkInterfaceRequest {
	req := &DescribeInstanceNetworkInterfaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeInstanceNetworkInterface

展示云主机绑定的网卡信息
*/
func (c *VPCClient) DescribeInstanceNetworkInterface(req *DescribeInstanceNetworkInterfaceRequest) (*DescribeInstanceNetworkInterfaceResponse, error) {
	var err error
	var res DescribeInstanceNetworkInterfaceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeInstanceNetworkInterface", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNATGWRequest is request schema for DescribeNATGW action
type DescribeNATGWRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值。默认为20
	Limit *int `required:"false"`

	// NAT网关Id。默认为该项目下所有NAT网关
	NATGWIds []string `required:"false"`

	// 数据偏移量。默认为0
	Offset *int `required:"false"`
}

// DescribeNATGWResponse is response schema for DescribeNATGW action
type DescribeNATGWResponse struct {
	response.CommonBase

	// 查到的NATGW信息列表
	DataSet []NatGatewayDataSet

	// 满足条件的实例的总数
	TotalCount int
}

// NewDescribeNATGWRequest will create request of DescribeNATGW action.
func (c *VPCClient) NewDescribeNATGWRequest() *DescribeNATGWRequest {
	req := &DescribeNATGWRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNATGW

获取NAT网关信息
*/
func (c *VPCClient) DescribeNATGW(req *DescribeNATGWRequest) (*DescribeNATGWResponse, error) {
	var err error
	var res DescribeNATGWResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNATGW", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNATGWPolicyRequest is request schema for DescribeNATGWPolicy action
type DescribeNATGWPolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 返回数据长度，默认为10000
	Limit *int `required:"false"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// 列表起始位置偏移量，默认为0
	Offset *int `required:"false"`
}

// DescribeNATGWPolicyResponse is response schema for DescribeNATGWPolicy action
type DescribeNATGWPolicyResponse struct {
	response.CommonBase

	// 查到的NATGW 转发策略的详细信息
	DataSet []NATGWPolicyDataSet

	// 满足条件的转发策略总数
	TotalCount int
}

// NewDescribeNATGWPolicyRequest will create request of DescribeNATGWPolicy action.
func (c *VPCClient) NewDescribeNATGWPolicyRequest() *DescribeNATGWPolicyRequest {
	req := &DescribeNATGWPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNATGWPolicy

展示NAT网关端口转发规则
*/
func (c *VPCClient) DescribeNATGWPolicy(req *DescribeNATGWPolicyRequest) (*DescribeNATGWPolicyResponse, error) {
	var err error
	var res DescribeNATGWPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNATGWPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNetworkAclRequest is request schema for DescribeNetworkAcl action
type DescribeNetworkAclRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 列表获取的个数限制
	Limit *string `required:"false"`

	// 列表偏移量
	Offset *int `required:"false"`

	// 需要获取的ACL所属的VPC的ID
	VpcId *string `required:"false"`
}

// DescribeNetworkAclResponse is response schema for DescribeNetworkAcl action
type DescribeNetworkAclResponse struct {
	response.CommonBase

	// ACL的信息，具体结构见下方AclInfo
	AclList []AclInfo
}

// NewDescribeNetworkAclRequest will create request of DescribeNetworkAcl action.
func (c *VPCClient) NewDescribeNetworkAclRequest() *DescribeNetworkAclRequest {
	req := &DescribeNetworkAclRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNetworkAcl

获取网络ACL
*/
func (c *VPCClient) DescribeNetworkAcl(req *DescribeNetworkAclRequest) (*DescribeNetworkAclResponse, error) {
	var err error
	var res DescribeNetworkAclResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNetworkAcl", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNetworkAclAssociationRequest is request schema for DescribeNetworkAclAssociation action
type DescribeNetworkAclAssociationRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// Acl的ID
	AclId *string `required:"true"`

	// 列表获取的个数限制
	Limit *string `required:"false"`

	// 列表偏移量
	Offset *int `required:"false"`
}

// DescribeNetworkAclAssociationResponse is response schema for DescribeNetworkAclAssociation action
type DescribeNetworkAclAssociationResponse struct {
	response.CommonBase

	// 绑定信息列表
	AssociationList []AssociationInfo
}

// NewDescribeNetworkAclAssociationRequest will create request of DescribeNetworkAclAssociation action.
func (c *VPCClient) NewDescribeNetworkAclAssociationRequest() *DescribeNetworkAclAssociationRequest {
	req := &DescribeNetworkAclAssociationRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNetworkAclAssociation

获取网络ACL的绑定关系列表
*/
func (c *VPCClient) DescribeNetworkAclAssociation(req *DescribeNetworkAclAssociationRequest) (*DescribeNetworkAclAssociationResponse, error) {
	var err error
	var res DescribeNetworkAclAssociationResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNetworkAclAssociation", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNetworkAclAssociationBySubnetRequest is request schema for DescribeNetworkAclAssociationBySubnet action
type DescribeNetworkAclAssociationBySubnetRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 子网的ID
	SubnetworkId *string `required:"true"`
}

// DescribeNetworkAclAssociationBySubnetResponse is response schema for DescribeNetworkAclAssociationBySubnet action
type DescribeNetworkAclAssociationBySubnetResponse struct {
	response.CommonBase

	// 绑定信息
	Association AssociationInfo
}

// NewDescribeNetworkAclAssociationBySubnetRequest will create request of DescribeNetworkAclAssociationBySubnet action.
func (c *VPCClient) NewDescribeNetworkAclAssociationBySubnetRequest() *DescribeNetworkAclAssociationBySubnetRequest {
	req := &DescribeNetworkAclAssociationBySubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNetworkAclAssociationBySubnet

获取子网的ACL绑定信息
*/
func (c *VPCClient) DescribeNetworkAclAssociationBySubnet(req *DescribeNetworkAclAssociationBySubnetRequest) (*DescribeNetworkAclAssociationBySubnetResponse, error) {
	var err error
	var res DescribeNetworkAclAssociationBySubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNetworkAclAssociationBySubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNetworkAclEntryRequest is request schema for DescribeNetworkAclEntry action
type DescribeNetworkAclEntryRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// ACL的ID
	AclId *string `required:"true"`
}

// DescribeNetworkAclEntryResponse is response schema for DescribeNetworkAclEntry action
type DescribeNetworkAclEntryResponse struct {
	response.CommonBase

	// 所有的规则信息
	EntryList []AclEntryInfo
}

// NewDescribeNetworkAclEntryRequest will create request of DescribeNetworkAclEntry action.
func (c *VPCClient) NewDescribeNetworkAclEntryRequest() *DescribeNetworkAclEntryRequest {
	req := &DescribeNetworkAclEntryRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNetworkAclEntry

获取ACL的规则信息
*/
func (c *VPCClient) DescribeNetworkAclEntry(req *DescribeNetworkAclEntryRequest) (*DescribeNetworkAclEntryResponse, error) {
	var err error
	var res DescribeNetworkAclEntryResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNetworkAclEntry", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNetworkInterfaceRequest is request schema for DescribeNetworkInterface action
type DescribeNetworkInterfaceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 虚拟网卡ID,可指定 0~n
	InterfaceId []string `required:"false"`

	// 默认为20
	Limit *int `required:"false"`

	// 若为true 过滤绑定在回收站主机中的网卡。默认为false。
	NoRecycled *bool `required:"false"`

	// 默认为0
	Offset *int `required:"false"`

	// 若为true 只返回默认网卡默认为false
	OnlyDefault *bool `required:"false"`

	// 所属子网
	SubnetId *string `required:"false"`

	// 业务组
	Tag *string `required:"false"`

	// 所属VPC
	VPCId *string `required:"false"`
}

// DescribeNetworkInterfaceResponse is response schema for DescribeNetworkInterface action
type DescribeNetworkInterfaceResponse struct {
	response.CommonBase

	// 虚拟网卡信息
	NetworkInterfaceSet []NetworkInterface

	// 虚拟网卡总数
	TotalCount int
}

// NewDescribeNetworkInterfaceRequest will create request of DescribeNetworkInterface action.
func (c *VPCClient) NewDescribeNetworkInterfaceRequest() *DescribeNetworkInterfaceRequest {
	req := &DescribeNetworkInterfaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNetworkInterface

展示虚拟网卡信息
*/
func (c *VPCClient) DescribeNetworkInterface(req *DescribeNetworkInterfaceRequest) (*DescribeNetworkInterfaceResponse, error) {
	var err error
	var res DescribeNetworkInterfaceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNetworkInterface", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeResourceSecGroupRequest is request schema for DescribeResourceSecGroup action
type DescribeResourceSecGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 分页查询时的最大返回资源数量。
	Limit *int `required:"false"`

	// 分页查询时的偏移量。传入了 ResourceId 则不分页。
	Offset *int `required:"false"`

	// 资源 ID 数组，如果指定则不分页；否则分页获取该账号下的指定类型的资源。支持  string 数组格式。
	ResourceId []string `required:"false"`

	// 资源类型，如 uhost, uni
	ResourceType *string `required:"false"`

	// VPC ID。非必须，分页使用（分页时，也可不传）；ResourceId 非空时，忽略
	VPCId *string `required:"false"`
}

// DescribeResourceSecGroupResponse is response schema for DescribeResourceSecGroup action
type DescribeResourceSecGroupResponse struct {
	response.CommonBase

	// 资源绑定的安全组信息
	DataSet []ResourceSecgroupInfoEx

	// 资源总数量。传入 ResourceId 时，为传入资源中的有效资源数量。
	TotalCount int
}

// NewDescribeResourceSecGroupRequest will create request of DescribeResourceSecGroup action.
func (c *VPCClient) NewDescribeResourceSecGroupRequest() *DescribeResourceSecGroupRequest {
	req := &DescribeResourceSecGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeResourceSecGroup

查询资源绑定的安全组信息
*/
func (c *VPCClient) DescribeResourceSecGroup(req *DescribeResourceSecGroupRequest) (*DescribeResourceSecGroupResponse, error) {
	var err error
	var res DescribeResourceSecGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeResourceSecGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeRouteTableRequest is request schema for DescribeRouteTable action
type DescribeRouteTableRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 默认为 false, 返回详细路由规则信息
	Brief *bool `required:"false"`

	// 业务组ID
	BusinessId *string `required:"false"`

	// 数据分页值。默认为20
	Limit *int `required:"false"`

	// 默认为 false, 表示路由表是短 ID
	LongId *string `required:"false"`

	// 数据偏移量。默认为0
	OffSet *int `required:"false"`

	// 路由表资源ID
	RouteTableId *string `required:"false"`

	// 所属VPC的资源ID
	VPCId *string `required:"false"`
}

// DescribeRouteTableResponse is response schema for DescribeRouteTable action
type DescribeRouteTableResponse struct {
	response.CommonBase

	// 路由表信息
	RouteTables []RouteTableInfo

	// RouteTables字段的数量
	TotalCount int
}

// NewDescribeRouteTableRequest will create request of DescribeRouteTable action.
func (c *VPCClient) NewDescribeRouteTableRequest() *DescribeRouteTableRequest {
	req := &DescribeRouteTableRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeRouteTable

获取路由表详细信息(包括路由策略)
*/
func (c *VPCClient) DescribeRouteTable(req *DescribeRouteTableRequest) (*DescribeRouteTableResponse, error) {
	var err error
	var res DescribeRouteTableResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeRouteTable", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSecGroupRequest is request schema for DescribeSecGroup action
type DescribeSecGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 分页查询数据长度。默认为20
	Limit *int `required:"false"`

	// 分页查询起始位置偏移量。默认为0
	Offset *int `required:"false"`

	// 安全组资源 ID 数组，传入则 Offset/Limit/BusinessId 失效。支持数组格式。Type 为 string 数组。
	SecGroupId []string `required:"false"`

	// 资源ID所属的 VPC ID
	VPCId *string `required:"false"`
}

// DescribeSecGroupResponse is response schema for DescribeSecGroup action
type DescribeSecGroupResponse struct {
	response.CommonBase

	// 详见SecGroupInfo
	DataSet []SecGroupInfo
}

// NewDescribeSecGroupRequest will create request of DescribeSecGroup action.
func (c *VPCClient) NewDescribeSecGroupRequest() *DescribeSecGroupRequest {
	req := &DescribeSecGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSecGroup
*/
func (c *VPCClient) DescribeSecGroup(req *DescribeSecGroupRequest) (*DescribeSecGroupResponse, error) {
	var err error
	var res DescribeSecGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSecGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSecGroupResourceRequest is request schema for DescribeSecGroupResource action
type DescribeSecGroupResourceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 分页查询长度。默认为20
	Limit *int `required:"false"`

	// 分页查询起始位置偏移量。默认为0
	Offset *int `required:"false"`

	// 安全组资源ID。
	SecGroupId *string `required:"false"`
}

// DescribeSecGroupResourceResponse is response schema for DescribeSecGroupResource action
type DescribeSecGroupResourceResponse struct {
	response.CommonBase

	// 详见SecGroupResourceInfo
	DataSet []SecGroupResourceInfo

	// 安全组绑定的资源总数
	TotalCount int
}

// NewDescribeSecGroupResourceRequest will create request of DescribeSecGroupResource action.
func (c *VPCClient) NewDescribeSecGroupResourceRequest() *DescribeSecGroupResourceRequest {
	req := &DescribeSecGroupResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSecGroupResource

获取安全组绑资源信息
*/
func (c *VPCClient) DescribeSecGroupResource(req *DescribeSecGroupResourceRequest) (*DescribeSecGroupResourceResponse, error) {
	var err error
	var res DescribeSecGroupResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSecGroupResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSecondaryIpRequest is request schema for DescribeSecondaryIp action
type DescribeSecondaryIpRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 【该字段已废弃，请谨慎使用】
	// Zone *string `required:"true" deprecated:"true"`

	// Ip
	Ip *string `required:"false"`

	// Mac
	Mac *string `required:"false"`

	// 子网Id
	SubnetId *string `required:"true"`

	// VPCId
	VPCId *string `required:"true"`
}

// DescribeSecondaryIpResponse is response schema for DescribeSecondaryIp action
type DescribeSecondaryIpResponse struct {
	response.CommonBase

	//
	DataSet []IpInfo
}

// NewDescribeSecondaryIpRequest will create request of DescribeSecondaryIp action.
func (c *VPCClient) NewDescribeSecondaryIpRequest() *DescribeSecondaryIpRequest {
	req := &DescribeSecondaryIpRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSecondaryIp

查询SecondaryIp（uk8s使用）
*/
func (c *VPCClient) DescribeSecondaryIp(req *DescribeSecondaryIpRequest) (*DescribeSecondaryIpResponse, error) {
	var err error
	var res DescribeSecondaryIpResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSecondaryIp", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSnatDnatRuleRequest is request schema for DescribeSnatDnatRule action
type DescribeSnatDnatRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 获取EIP对应的SnatDnatRule信息
	EIP []string `required:"false"`

	// 获取NAT上添加的所有SnatDnatRule信息
	NATGWId []string `required:"false"`
}

// DescribeSnatDnatRuleResponse is response schema for DescribeSnatDnatRule action
type DescribeSnatDnatRuleResponse struct {
	response.CommonBase

	// 规则信息
	DataSet []SnatDnatRuleInfo
}

// NewDescribeSnatDnatRuleRequest will create request of DescribeSnatDnatRule action.
func (c *VPCClient) NewDescribeSnatDnatRuleRequest() *DescribeSnatDnatRuleRequest {
	req := &DescribeSnatDnatRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSnatDnatRule

获取基于NAT创建的内外网IP映射规则信息
*/
func (c *VPCClient) DescribeSnatDnatRule(req *DescribeSnatDnatRuleRequest) (*DescribeSnatDnatRuleResponse, error) {
	var err error
	var res DescribeSnatDnatRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSnatDnatRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSnatRuleRequest is request schema for DescribeSnatRule action
type DescribeSnatRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 分页，默认为20
	Limit *string `required:"false"`

	// NAT网关的ID
	NATGWId *string `required:"true"`

	// 偏移，默认为0
	Offset *string `required:"false"`

	// EIP的ip地址,例如106.75.xx.xx
	SnatIp *string `required:"false"`

	// 需要出外网的私网IP地址，例如10.9.7.xx
	SourceIp *string `required:"false"`
}

// DescribeSnatRuleResponse is response schema for DescribeSnatRule action
type DescribeSnatRuleResponse struct {
	response.CommonBase

	// 某个NAT网关的所有Snat规则
	DataSet []NATGWSnatRule

	// 规则数量
	TotalCount int
}

// NewDescribeSnatRuleRequest will create request of DescribeSnatRule action.
func (c *VPCClient) NewDescribeSnatRuleRequest() *DescribeSnatRuleRequest {
	req := &DescribeSnatRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSnatRule

获取Nat网关的出口规则（SNAT规则）
*/
func (c *VPCClient) DescribeSnatRule(req *DescribeSnatRuleRequest) (*DescribeSnatRuleResponse, error) {
	var err error
	var res DescribeSnatRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSnatRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSubnetRequest is request schema for DescribeSubnet action
type DescribeSubnetRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 【该字段已废弃，请谨慎使用】
	BusinessId *string `required:"false" deprecated:"true"`

	// 默认为 false针对控制台调用，可设置为true，不进行控制台非必要数据的查询
	IgnoreResource *bool `required:"false"`

	// 列表长度，默认为20
	Limit *int `required:"false"`

	// 偏移量，默认为0
	Offset *int `required:"false"`

	// 路由表Id
	RouteTableId *string `required:"false"`

	// 是否返回子网的可用IP数，true为是，false为否，默认不返回
	ShowAvailableIPs *bool `required:"false"`

	// 子网id，适用于一次查询一个子网信息
	SubnetId *string `required:"false"`

	// 子网id数组，适用于一次查询多个子网信息
	SubnetIds []string `required:"false"`

	// 业务组名称，默认为Default
	Tag *string `required:"false"`

	// VPC资源id
	VPCId *string `required:"false"`
}

// DescribeSubnetResponse is response schema for DescribeSubnet action
type DescribeSubnetResponse struct {
	response.CommonBase

	// 子网信息数组，具体资源见下方SubnetInfo
	DataSet []SubnetInfo

	// 子网总数量
	TotalCount int
}

// NewDescribeSubnetRequest will create request of DescribeSubnet action.
func (c *VPCClient) NewDescribeSubnetRequest() *DescribeSubnetRequest {
	req := &DescribeSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSubnet

获取子网信息
*/
func (c *VPCClient) DescribeSubnet(req *DescribeSubnetRequest) (*DescribeSubnetResponse, error) {
	var err error
	var res DescribeSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSubnetResourceRequest is request schema for DescribeSubnetResource action
type DescribeSubnetResourceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 单页返回数据长度，默认为20
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0
	Offset *int `required:"false"`

	// 资源类型，默认为全部资源类型。枚举值为：UHOST，云主机；PHOST，物理云主机；ULB，负载均衡；UHADOOP_HOST，hadoop节点；UFORTRESS_HOST，堡垒机；UNATGW，NAT网关；UKAFKA，Kafka消息队列；UMEM，内存存储；DOCKER，容器集群；UDB，数据库；UDW，数据仓库；VIP，内网VIP.
	ResourceType *string `required:"false"`

	// 子网id
	SubnetId *string `required:"true"`
}

// DescribeSubnetResourceResponse is response schema for DescribeSubnetResource action
type DescribeSubnetResourceResponse struct {
	response.CommonBase

	// 返回数据集，请见SubnetResource
	DataSet []SubnetResource

	// 总数
	TotalCount int
}

// NewDescribeSubnetResourceRequest will create request of DescribeSubnetResource action.
func (c *VPCClient) NewDescribeSubnetResourceRequest() *DescribeSubnetResourceRequest {
	req := &DescribeSubnetResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSubnetResource

展示子网资源
*/
func (c *VPCClient) DescribeSubnetResource(req *DescribeSubnetResourceRequest) (*DescribeSubnetResourceResponse, error) {
	var err error
	var res DescribeSubnetResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSubnetResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVIPRequest is request schema for DescribeVIP action
type DescribeVIPRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 业务组
	BusinessId *string `required:"false"`

	// 子网id，不指定则获取VPCId下的所有vip
	SubnetId *string `required:"false"`

	// 业务组名称, 默认为 Default
	Tag *string `required:"false"`

	// VIP ID
	VIPId *string `required:"false"`

	// vpc的id,指定SubnetId时必填
	VPCId *string `required:"false"`
}

// DescribeVIPResponse is response schema for DescribeVIP action
type DescribeVIPResponse struct {
	response.CommonBase

	// 内网VIP地址列表
	DataSet []string

	// vip数量
	TotalCount int

	// 内网VIP详情，请见VIPDetailSet
	VIPSet []VIPDetailSet
}

// NewDescribeVIPRequest will create request of DescribeVIP action.
func (c *VPCClient) NewDescribeVIPRequest() *DescribeVIPRequest {
	req := &DescribeVIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVIP

获取内网VIP详细信息
*/
func (c *VPCClient) DescribeVIP(req *DescribeVIPRequest) (*DescribeVIPResponse, error) {
	var err error
	var res DescribeVIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVPCRequest is request schema for DescribeVPC action
type DescribeVPCRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值
	Limit *int `required:"false"`

	// 数据偏移量，默认为0
	Offset *int `required:"false"`

	// 业务组名称
	Tag *string `required:"false"`

	// VPCId
	VPCIds []string `required:"false"`
}

// DescribeVPCResponse is response schema for DescribeVPC action
type DescribeVPCResponse struct {
	response.CommonBase

	// vpc信息，具体结构见下方VPCInfo
	DataSet []VPCInfo

	//
	TotalCount int
}

// NewDescribeVPCRequest will create request of DescribeVPC action.
func (c *VPCClient) NewDescribeVPCRequest() *DescribeVPCRequest {
	req := &DescribeVPCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVPC

获取VPC信息
*/
func (c *VPCClient) DescribeVPC(req *DescribeVPCRequest) (*DescribeVPCResponse, error) {
	var err error
	var res DescribeVPCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVPC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVPCIntercomRequest is request schema for DescribeVPCIntercom action
type DescribeVPCIntercomRequest struct {
	request.CommonBase

	// [公共参数] 源VPC所在项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 源VPC所在地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 目的项目ID，默认为全部项目
	DstProjectId *string `required:"false"`

	// 目的VPC所在地域，默认为全部地域
	DstRegion *string `required:"false"`

	// VPC短ID
	VPCId *string `required:"true"`
}

// DescribeVPCIntercomResponse is response schema for DescribeVPCIntercom action
type DescribeVPCIntercomResponse struct {
	response.CommonBase

	// 联通VPC信息数组
	DataSet []VPCIntercomInfo
}

// NewDescribeVPCIntercomRequest will create request of DescribeVPCIntercom action.
func (c *VPCClient) NewDescribeVPCIntercomRequest() *DescribeVPCIntercomRequest {
	req := &DescribeVPCIntercomRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVPCIntercom

获取VPC互通信息
*/
func (c *VPCClient) DescribeVPCIntercom(req *DescribeVPCIntercomRequest) (*DescribeVPCIntercomResponse, error) {
	var err error
	var res DescribeVPCIntercomResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVPCIntercom", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeWhiteListResourceRequest is request schema for DescribeWhiteListResource action
type DescribeWhiteListResourceRequest struct {
	request.CommonBase

	// [公共参数] 项目id
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关的Id
	NATGWIds []string `required:"true"`
}

// DescribeWhiteListResourceResponse is response schema for DescribeWhiteListResource action
type DescribeWhiteListResourceResponse struct {
	response.CommonBase

	// 白名单资源的详细信息，详见DescribeResourceWhiteListDataSet
	DataSet []NatGWWhitelistDataSet

	// 上述DataSet总数量
	TotalCount int
}

// NewDescribeWhiteListResourceRequest will create request of DescribeWhiteListResource action.
func (c *VPCClient) NewDescribeWhiteListResourceRequest() *DescribeWhiteListResourceRequest {
	req := &DescribeWhiteListResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeWhiteListResource

展示NAT网关白名单资源列表
*/
func (c *VPCClient) DescribeWhiteListResource(req *DescribeWhiteListResourceRequest) (*DescribeWhiteListResourceResponse, error) {
	var err error
	var res DescribeWhiteListResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeWhiteListResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DetachNetworkInterfaceRequest is request schema for DetachNetworkInterface action
type DetachNetworkInterfaceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 云主机ID
	InstanceId *string `required:"true"`

	// 虚拟网卡ID
	InterfaceId *string `required:"true"`
}

// DetachNetworkInterfaceResponse is response schema for DetachNetworkInterface action
type DetachNetworkInterfaceResponse struct {
	response.CommonBase
}

// NewDetachNetworkInterfaceRequest will create request of DetachNetworkInterface action.
func (c *VPCClient) NewDetachNetworkInterfaceRequest() *DetachNetworkInterfaceRequest {
	req := &DetachNetworkInterfaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DetachNetworkInterface

解绑云主机关联网卡
*/
func (c *VPCClient) DetachNetworkInterface(req *DetachNetworkInterfaceRequest) (*DetachNetworkInterfaceResponse, error) {
	var err error
	var res DetachNetworkInterfaceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DetachNetworkInterface", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DisableUniEipDirectModeRequest is request schema for DisableUniEipDirectMode action
type DisableUniEipDirectModeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 虚拟网卡ID
	InterfaceId *string `required:"true"`

	// VPC ID
	VPCId *string `required:"true"`
}

// DisableUniEipDirectModeResponse is response schema for DisableUniEipDirectMode action
type DisableUniEipDirectModeResponse struct {
	response.CommonBase

	// 返回信息
	Message string
}

// NewDisableUniEipDirectModeRequest will create request of DisableUniEipDirectMode action.
func (c *VPCClient) NewDisableUniEipDirectModeRequest() *DisableUniEipDirectModeRequest {
	req := &DisableUniEipDirectModeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DisableUniEipDirectMode

关闭虚拟网卡EIP直通功能
*/
func (c *VPCClient) DisableUniEipDirectMode(req *DisableUniEipDirectModeRequest) (*DisableUniEipDirectModeResponse, error) {
	var err error
	var res DisableUniEipDirectModeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DisableUniEipDirectMode", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DisassociateSecGroupRequest is request schema for DisassociateSecGroup action
type DisassociateSecGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 是否强制解绑。默认为 false。为 true 表示强制解绑，用于删除资源前的解绑，因为开启安全组特性的资源至少绑定一个安全组，正常情况下是不允许解绑所有安全组。
	Force *bool `required:"false"`

	// 资源ID，不传表示解绑资源上所有安全组，安全组ID和资源ID至少传一个，且只能有一个批量。支持 string 数组格式。
	ResourceId []string `required:"false"`

	// 安全组ID，不传表示解绑安全组绑定的所以资源，安全组ID和资源ID至少传一个,且只能有一个批量。支持 string 数组格式。
	SecGroupId []string `required:"false"`
}

// DisassociateSecGroupResponse is response schema for DisassociateSecGroup action
type DisassociateSecGroupResponse struct {
	response.CommonBase
}

// NewDisassociateSecGroupRequest will create request of DisassociateSecGroup action.
func (c *VPCClient) NewDisassociateSecGroupRequest() *DisassociateSecGroupRequest {
	req := &DisassociateSecGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DisassociateSecGroup

解绑安全组和资源绑定关系
*/
func (c *VPCClient) DisassociateSecGroup(req *DisassociateSecGroupRequest) (*DisassociateSecGroupResponse, error) {
	var err error
	var res DisassociateSecGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DisassociateSecGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// EnableUniEipDirectModeRequest is request schema for EnableUniEipDirectMode action
type EnableUniEipDirectModeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 枚举值：1-EIP网卡可见2-EIP直通默认为1
	EipDirectVersion *int `required:"false"`

	// 虚拟网卡ID
	InterfaceId *string `required:"true"`

	// VPC ID
	VPCId *string `required:"true"`
}

// EnableUniEipDirectModeResponse is response schema for EnableUniEipDirectMode action
type EnableUniEipDirectModeResponse struct {
	response.CommonBase

	// 返回信息
	Message string
}

// NewEnableUniEipDirectModeRequest will create request of EnableUniEipDirectMode action.
func (c *VPCClient) NewEnableUniEipDirectModeRequest() *EnableUniEipDirectModeRequest {
	req := &EnableUniEipDirectModeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: EnableUniEipDirectMode

开启虚拟网卡EIP直通功能
*/
func (c *VPCClient) EnableUniEipDirectMode(req *EnableUniEipDirectModeRequest) (*EnableUniEipDirectModeResponse, error) {
	var err error
	var res EnableUniEipDirectModeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("EnableUniEipDirectMode", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// EnableWhiteListRequest is request schema for EnableWhiteList action
type EnableWhiteListRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 白名单开关标记。0：关闭；1：开启。默认为0
	IfOpen *int `required:"true"`

	// NAT网关Id
	NATGWId *string `required:"true"`
}

// EnableWhiteListResponse is response schema for EnableWhiteList action
type EnableWhiteListResponse struct {
	response.CommonBase
}

// NewEnableWhiteListRequest will create request of EnableWhiteList action.
func (c *VPCClient) NewEnableWhiteListRequest() *EnableWhiteListRequest {
	req := &EnableWhiteListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: EnableWhiteList

修改NAT网关白名单开关
*/
func (c *VPCClient) EnableWhiteList(req *EnableWhiteListRequest) (*EnableWhiteListResponse, error) {
	var err error
	var res EnableWhiteListResponse

	reqCopier := *req

	err = c.Client.InvokeAction("EnableWhiteList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetAvailableResourceForPolicyRequest is request schema for GetAvailableResourceForPolicy action
type GetAvailableResourceForPolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 返回数据长度，默认为20
	Limit *int `required:"false"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// 列表起始位置偏移量，默认为0
	Offset *int `required:"false"`
}

// GetAvailableResourceForPolicyResponse is response schema for GetAvailableResourceForPolicy action
type GetAvailableResourceForPolicyResponse struct {
	response.CommonBase

	// 支持资源类型的信息
	DataSet []GetAvailableResourceForPolicyDataSet

	// 可配置端口转发规则的资源总数
	TotalCount int
}

// NewGetAvailableResourceForPolicyRequest will create request of GetAvailableResourceForPolicy action.
func (c *VPCClient) NewGetAvailableResourceForPolicyRequest() *GetAvailableResourceForPolicyRequest {
	req := &GetAvailableResourceForPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetAvailableResourceForPolicy

获取NAT网关可配置端口转发规则的资源信息
*/
func (c *VPCClient) GetAvailableResourceForPolicy(req *GetAvailableResourceForPolicyRequest) (*GetAvailableResourceForPolicyResponse, error) {
	var err error
	var res GetAvailableResourceForPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetAvailableResourceForPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetAvailableResourceForSnatRuleRequest is request schema for GetAvailableResourceForSnatRule action
type GetAvailableResourceForSnatRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值, 默认为20
	Limit *int `required:"false"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// 数据偏移量, 默认为0
	Offset *int `required:"false"`
}

// GetAvailableResourceForSnatRuleResponse is response schema for GetAvailableResourceForSnatRule action
type GetAvailableResourceForSnatRuleResponse struct {
	response.CommonBase

	// 返回的资源详细信息
	DataSet []GetAvailableResourceForSnatRuleDataSet

	// 总数
	TotalCount int
}

// NewGetAvailableResourceForSnatRuleRequest will create request of GetAvailableResourceForSnatRule action.
func (c *VPCClient) NewGetAvailableResourceForSnatRuleRequest() *GetAvailableResourceForSnatRuleRequest {
	req := &GetAvailableResourceForSnatRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetAvailableResourceForSnatRule

获取可用于添加snat规则（出口规则）的资源列表
*/
func (c *VPCClient) GetAvailableResourceForSnatRule(req *GetAvailableResourceForSnatRuleRequest) (*GetAvailableResourceForSnatRuleResponse, error) {
	var err error
	var res GetAvailableResourceForSnatRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetAvailableResourceForSnatRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetAvailableResourceForWhiteListRequest is request schema for GetAvailableResourceForWhiteList action
type GetAvailableResourceForWhiteListRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值, 默认为20
	Limit *int `required:"false"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// 数据偏移量, 默认为0
	Offset *int `required:"false"`
}

// GetAvailableResourceForWhiteListResponse is response schema for GetAvailableResourceForWhiteList action
type GetAvailableResourceForWhiteListResponse struct {
	response.CommonBase

	// 返回白名单列表的详细信息
	DataSet []GetAvailableResourceForWhiteListDataSet

	// 白名单资源列表的总的个数
	TotalCount int
}

// NewGetAvailableResourceForWhiteListRequest will create request of GetAvailableResourceForWhiteList action.
func (c *VPCClient) NewGetAvailableResourceForWhiteListRequest() *GetAvailableResourceForWhiteListRequest {
	req := &GetAvailableResourceForWhiteListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetAvailableResourceForWhiteList

获取NAT网关可添加白名单的资源
*/
func (c *VPCClient) GetAvailableResourceForWhiteList(req *GetAvailableResourceForWhiteListRequest) (*GetAvailableResourceForWhiteListResponse, error) {
	var err error
	var res GetAvailableResourceForWhiteListResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetAvailableResourceForWhiteList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetNetworkAclTargetResourceRequest is request schema for GetNetworkAclTargetResource action
type GetNetworkAclTargetResourceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 子网ID。
	SubnetworkId []string `required:"true"`
}

// GetNetworkAclTargetResourceResponse is response schema for GetNetworkAclTargetResource action
type GetNetworkAclTargetResourceResponse struct {
	response.CommonBase

	// ACL规则应用目标资源列表，具体结构见下方TargetResourceInfo
	TargetResourceList []TargetResourceInfo

	// ACL规则应用目标资源总数
	TotalCount int
}

// NewGetNetworkAclTargetResourceRequest will create request of GetNetworkAclTargetResource action.
func (c *VPCClient) NewGetNetworkAclTargetResourceRequest() *GetNetworkAclTargetResourceRequest {
	req := &GetNetworkAclTargetResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetNetworkAclTargetResource

获取ACL规则应用目标列表
*/
func (c *VPCClient) GetNetworkAclTargetResource(req *GetNetworkAclTargetResourceRequest) (*GetNetworkAclTargetResourceResponse, error) {
	var err error
	var res GetNetworkAclTargetResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetNetworkAclTargetResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ListSubnetForNATGWRequest is request schema for ListSubnetForNATGW action
type ListSubnetForNATGWRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关所属VPC Id。默认值为Default VPC Id
	VPCId *string `required:"false"`
}

// ListSubnetForNATGWResponse is response schema for ListSubnetForNATGW action
type ListSubnetForNATGWResponse struct {
	response.CommonBase

	// 具体参数请见NatgwSubnetDataSet
	DataSet []NatgwSubnetDataSet
}

// NewListSubnetForNATGWRequest will create request of ListSubnetForNATGW action.
func (c *VPCClient) NewListSubnetForNATGWRequest() *ListSubnetForNATGWRequest {
	req := &ListSubnetForNATGWRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListSubnetForNATGW

展示NAT网关可绑定的子网列表
*/
func (c *VPCClient) ListSubnetForNATGW(req *ListSubnetForNATGWRequest) (*ListSubnetForNATGWResponse, error) {
	var err error
	var res ListSubnetForNATGWResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListSubnetForNATGW", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyRouteRuleRequest is request schema for ModifyRouteRule action
type ModifyRouteRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 格式: RouteRuleId | 目的网段 | 下一跳类型（支持INSTANCE、VIP） | 下一跳 |优先级（保留字段，填写0即可）| 备注 | 增、删、改标志（add/delete/update） 。"添加"示例: test_id | 10.8.0.0/16 | instance | uhost-xd8ja | 0 | Default Route Rule| add (添加的RouteRuleId填任意非空字符串) 。"删除"示例: routerule-xk3jxa | 10.8.0.0/16 | instance | uhost-xd8ja | 0 | Default Route Rule| delete (RouteRuleId来自DescribeRouteTable中)     。“修改”示例: routerule-xk3jxa | 10.8.0.0/16 | instance | uhost-cjksa2 | 0 | Default Route Rule| update (RouteRuleId来自DescribeRouteTable中)
	RouteRule []string `required:"true"`

	// 通过DescribeRouteTable拿到
	RouteTableId *string `required:"true"`
}

// ModifyRouteRuleResponse is response schema for ModifyRouteRule action
type ModifyRouteRuleResponse struct {
	response.CommonBase
}

// NewModifyRouteRuleRequest will create request of ModifyRouteRule action.
func (c *VPCClient) NewModifyRouteRuleRequest() *ModifyRouteRuleRequest {
	req := &ModifyRouteRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyRouteRule

路由策略增、删、改
*/
func (c *VPCClient) ModifyRouteRule(req *ModifyRouteRuleRequest) (*ModifyRouteRuleResponse, error) {
	var err error
	var res ModifyRouteRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyRouteRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// MoveSecondaryIPMacRequest is request schema for MoveSecondaryIPMac action
type MoveSecondaryIPMacRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// Secondary IP
	Ip *string `required:"true"`

	// 新 Mac。Secondary IP 迁移的目的 Mac
	NewMac *string `required:"true"`

	// 旧 Mac。Secondary IP 当前所绑定的 Mac
	OldMac *string `required:"true"`

	// 子网 ID。IP/OldMac/NewMac 三者必须在同一子网
	SubnetId *string `required:"true"`
}

// MoveSecondaryIPMacResponse is response schema for MoveSecondaryIPMac action
type MoveSecondaryIPMacResponse struct {
	response.CommonBase
}

// NewMoveSecondaryIPMacRequest will create request of MoveSecondaryIPMac action.
func (c *VPCClient) NewMoveSecondaryIPMacRequest() *MoveSecondaryIPMacRequest {
	req := &MoveSecondaryIPMacRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: MoveSecondaryIPMac

把 Secondary IP 从旧 MAC 迁移到新 MAC
*/
func (c *VPCClient) MoveSecondaryIPMac(req *MoveSecondaryIPMacRequest) (*MoveSecondaryIPMacResponse, error) {
	var err error
	var res MoveSecondaryIPMacResponse

	reqCopier := *req

	err = c.Client.InvokeAction("MoveSecondaryIPMac", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ReleaseVIPRequest is request schema for ReleaseVIP action
type ReleaseVIPRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写
	// ProjectId *string `required:"false"`

	// [公共参数] 地域
	// Region *string `required:"true"`

	// [公共参数] 可用区
	// Zone *string `required:"false"`

	// 内网VIP的id
	VIPId *string `required:"true"`
}

// ReleaseVIPResponse is response schema for ReleaseVIP action
type ReleaseVIPResponse struct {
	response.CommonBase
}

// NewReleaseVIPRequest will create request of ReleaseVIP action.
func (c *VPCClient) NewReleaseVIPRequest() *ReleaseVIPRequest {
	req := &ReleaseVIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ReleaseVIP

释放VIP资源
*/
func (c *VPCClient) ReleaseVIP(req *ReleaseVIPRequest) (*ReleaseVIPResponse, error) {
	var err error
	var res ReleaseVIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ReleaseVIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// SetGwDefaultExportRequest is request schema for SetGwDefaultExport action
type SetGwDefaultExportRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关绑定的EIP Id。ExportIp和ExportEipId必填一个
	ExportEipId *string `required:"false"`

	// NAT网关绑定的EIP。ExportIp和ExportEipId必填一个
	ExportIp *string `required:"false"`

	// NAT网关Id
	NATGWId *string `required:"true"`
}

// SetGwDefaultExportResponse is response schema for SetGwDefaultExport action
type SetGwDefaultExportResponse struct {
	response.CommonBase
}

// NewSetGwDefaultExportRequest will create request of SetGwDefaultExport action.
func (c *VPCClient) NewSetGwDefaultExportRequest() *SetGwDefaultExportRequest {
	req := &SetGwDefaultExportRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: SetGwDefaultExport

设置NAT网关的默认出口
*/
func (c *VPCClient) SetGwDefaultExport(req *SetGwDefaultExportRequest) (*SetGwDefaultExportResponse, error) {
	var err error
	var res SetGwDefaultExportResponse

	reqCopier := *req

	err = c.Client.InvokeAction("SetGwDefaultExport", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// SwitchToFirewallRequest is request schema for SwitchToFirewall action
type SwitchToFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 防火墙 ID
	Firewall *string `required:"false"`

	// map[string]string，string 到 防火墙 ID 的映射。ResourceId是uhost则Node是uni；ResourceId是uhadoop则Node是hadoophost
	NodeToFirewall *string `required:"false"`

	// 资源ID。资源类型为 UHost、UNI、PAAS 资源
	ResourceId *string `required:"true"`
}

// SwitchToFirewallResponse is response schema for SwitchToFirewall action
type SwitchToFirewallResponse struct {
	response.CommonBase
}

// NewSwitchToFirewallRequest will create request of SwitchToFirewall action.
func (c *VPCClient) NewSwitchToFirewallRequest() *SwitchToFirewallRequest {
	req := &SwitchToFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: SwitchToFirewall

切换至防火墙模式
*/
func (c *VPCClient) SwitchToFirewall(req *SwitchToFirewallRequest) (*SwitchToFirewallResponse, error) {
	var err error
	var res SwitchToFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("SwitchToFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// SwitchToSecGroupRequest is request schema for SwitchToSecGroup action
type SwitchToSecGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 是否移除当前的防火墙（且绑定默认全通的防火墙）
	IsRemoveFirewall *bool `required:"true"`

	// PrioritySecGroup类型的数组
	PrioritySecGroup []string `required:"false"`

	// 资源ID。资源类型为 UHost、UNI、PAAS 资源
	ResourceId *string `required:"true"`

	// map[string][]PrioritySecGroup， string 到 PrioritySecGroup 数组的映射
	UniToPrioritySecGroup *string `required:"false"`
}

// SwitchToSecGroupResponse is response schema for SwitchToSecGroup action
type SwitchToSecGroupResponse struct {
	response.CommonBase

	// 错误信息
	Message string
}

// NewSwitchToSecGroupRequest will create request of SwitchToSecGroup action.
func (c *VPCClient) NewSwitchToSecGroupRequest() *SwitchToSecGroupRequest {
	req := &SwitchToSecGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: SwitchToSecGroup

切换至安全组模式
*/
func (c *VPCClient) SwitchToSecGroup(req *SwitchToSecGroupRequest) (*SwitchToSecGroupResponse, error) {
	var err error
	var res SwitchToSecGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("SwitchToSecGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateNATGWRequest is request schema for UpdateNATGW action
type UpdateNATGWRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// natgw id
	NATGWId *string `required:"true"`

	// NATGateWay 名字
	NATGWName *string `required:"false"`

	// 备注
	Remark *string `required:"false"`

	// 业务组
	Tag *string `required:"false"`
}

// UpdateNATGWResponse is response schema for UpdateNATGW action
type UpdateNATGWResponse struct {
	response.CommonBase
}

// NewUpdateNATGWRequest will create request of UpdateNATGW action.
func (c *VPCClient) NewUpdateNATGWRequest() *UpdateNATGWRequest {
	req := &UpdateNATGWRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateNATGW

更新nat网关基本信息
*/
func (c *VPCClient) UpdateNATGW(req *UpdateNATGWRequest) (*UpdateNATGWResponse, error) {
	var err error
	var res UpdateNATGWResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateNATGW", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateNATGWPolicyRequest is request schema for UpdateNATGWPolicy action
type UpdateNATGWPolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 目标IP。填写对应的目标IP地址
	DstIP *string `required:"true"`

	// 目标端口。可填写固定端口，也可填写端口范围。支持的端口范围为1-65535
	DstPort *string `required:"true"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// 转发策略Id
	PolicyId *string `required:"true"`

	// 转发策略名称。默认为空
	PolicyName *string `required:"false"`

	// 协议类型。枚举值为：TCP 、 UDP
	Protocol *string `required:"true"`

	// 源IP。填写对应的EIP Id
	SrcEIPId *string `required:"true"`

	// 源端口。可填写固定端口，也可填写端口范围。支持的端口范围为1-6553
	SrcPort *string `required:"true"`
}

// UpdateNATGWPolicyResponse is response schema for UpdateNATGWPolicy action
type UpdateNATGWPolicyResponse struct {
	response.CommonBase
}

// NewUpdateNATGWPolicyRequest will create request of UpdateNATGWPolicy action.
func (c *VPCClient) NewUpdateNATGWPolicyRequest() *UpdateNATGWPolicyRequest {
	req := &UpdateNATGWPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateNATGWPolicy

更新NAT网关端口转发规则
*/
func (c *VPCClient) UpdateNATGWPolicy(req *UpdateNATGWPolicyRequest) (*UpdateNATGWPolicyResponse, error) {
	var err error
	var res UpdateNATGWPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateNATGWPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateNATGWSnatpoolRequest is request schema for UpdateNATGWSnatpool action
type UpdateNATGWSnatpoolRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 开启，"enable"；关闭，"disable"；
	IsSnatpoolEnabled *string `required:"true"`

	// NAT网关的资源ID
	NATGWId *string `required:"true"`
}

// UpdateNATGWSnatpoolResponse is response schema for UpdateNATGWSnatpool action
type UpdateNATGWSnatpoolResponse struct {
	response.CommonBase
}

// NewUpdateNATGWSnatpoolRequest will create request of UpdateNATGWSnatpool action.
func (c *VPCClient) NewUpdateNATGWSnatpoolRequest() *UpdateNATGWSnatpoolRequest {
	req := &UpdateNATGWSnatpoolRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateNATGWSnatpool

NAT网关默认出口规则是否开启Snatpool，若开启，对应控制台上的负载均衡流量出口方式。
*/
func (c *VPCClient) UpdateNATGWSnatpool(req *UpdateNATGWSnatpoolRequest) (*UpdateNATGWSnatpoolResponse, error) {
	var err error
	var res UpdateNATGWSnatpoolResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateNATGWSnatpool", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateNATGWSubnetRequest is request schema for UpdateNATGWSubnet action
type UpdateNATGWSubnetRequest struct {
	request.CommonBase

	// [公共参数] 项目Id。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关Id
	NATGWId *string `required:"true"`

	// NAT网关绑定的子网Id
	SubnetworkIds []string `required:"false"`
}

// UpdateNATGWSubnetResponse is response schema for UpdateNATGWSubnet action
type UpdateNATGWSubnetResponse struct {
	response.CommonBase
}

// NewUpdateNATGWSubnetRequest will create request of UpdateNATGWSubnet action.
func (c *VPCClient) NewUpdateNATGWSubnetRequest() *UpdateNATGWSubnetRequest {
	req := &UpdateNATGWSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateNATGWSubnet

更新NAT网关绑定的子网
*/
func (c *VPCClient) UpdateNATGWSubnet(req *UpdateNATGWSubnetRequest) (*UpdateNATGWSubnetResponse, error) {
	var err error
	var res UpdateNATGWSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateNATGWSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateNetworkAclRequest is request schema for UpdateNetworkAcl action
type UpdateNetworkAclRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 需要更改的ACL ID
	AclId *string `required:"true"`

	// Acl的名称
	AclName *string `required:"true"`

	// 描述
	Description *string `required:"true"`
}

// UpdateNetworkAclResponse is response schema for UpdateNetworkAcl action
type UpdateNetworkAclResponse struct {
	response.CommonBase
}

// NewUpdateNetworkAclRequest will create request of UpdateNetworkAcl action.
func (c *VPCClient) NewUpdateNetworkAclRequest() *UpdateNetworkAclRequest {
	req := &UpdateNetworkAclRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateNetworkAcl

更改ACL
*/
func (c *VPCClient) UpdateNetworkAcl(req *UpdateNetworkAclRequest) (*UpdateNetworkAclResponse, error) {
	var err error
	var res UpdateNetworkAclResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateNetworkAcl", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateNetworkAclEntryRequest is request schema for UpdateNetworkAclEntry action
type UpdateNetworkAclEntryRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// ACL的ID
	AclId *string `required:"true"`

	// IPv4段的CIDR表示
	CidrBlock *string `required:"true"`

	// 描述
	Description *string `required:"false"`

	// 出向或者入向（“Ingress”, "Egress")
	Direction *string `required:"true"`

	// 规则的行为("Accept", "Reject")
	EntryAction *string `required:"true"`

	// 需要更新的Entry Id
	EntryId *string `required:"true"`

	// 针对的协议规则
	IpProtocol *string `required:"true"`

	// 针对的端口范围
	PortRange *string `required:"true"`

	// Entry的优先级，对于同样的Direction来说，不能重复
	Priority *int `required:"true"`

	// 应用目标资源列表。默认为全部资源生效。TargetType为0时不用填写该值
	TargetResourceIds []string `required:"false"`

	// 应用目标类型。0代表“子网内全部资源”， 1代表“子网内指定资源”。默认为0
	TargetType *int `required:"false"`
}

// UpdateNetworkAclEntryResponse is response schema for UpdateNetworkAclEntry action
type UpdateNetworkAclEntryResponse struct {
	response.CommonBase
}

// NewUpdateNetworkAclEntryRequest will create request of UpdateNetworkAclEntry action.
func (c *VPCClient) NewUpdateNetworkAclEntryRequest() *UpdateNetworkAclEntryRequest {
	req := &UpdateNetworkAclEntryRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateNetworkAclEntry

更新ACL的规则
*/
func (c *VPCClient) UpdateNetworkAclEntry(req *UpdateNetworkAclEntryRequest) (*UpdateNetworkAclEntryResponse, error) {
	var err error
	var res UpdateNetworkAclEntryResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateNetworkAclEntry", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateNetworkInterfaceDefaultOutputRequest is request schema for UpdateNetworkInterfaceDefaultOutput action
type UpdateNetworkInterfaceDefaultOutputRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 虚拟网卡Id
	InterfaceId *string `required:"true"`

	// 出口IP
	Output *string `required:"false"`
}

// UpdateNetworkInterfaceDefaultOutputResponse is response schema for UpdateNetworkInterfaceDefaultOutput action
type UpdateNetworkInterfaceDefaultOutputResponse struct {
	response.CommonBase

	// 返回信息
	Message string
}

// NewUpdateNetworkInterfaceDefaultOutputRequest will create request of UpdateNetworkInterfaceDefaultOutput action.
func (c *VPCClient) NewUpdateNetworkInterfaceDefaultOutputRequest() *UpdateNetworkInterfaceDefaultOutputRequest {
	req := &UpdateNetworkInterfaceDefaultOutputRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateNetworkInterfaceDefaultOutput

更新虚拟网卡默认出口(仅用于开启EIP网卡可见模式的虚拟网卡)
*/
func (c *VPCClient) UpdateNetworkInterfaceDefaultOutput(req *UpdateNetworkInterfaceDefaultOutputRequest) (*UpdateNetworkInterfaceDefaultOutputResponse, error) {
	var err error
	var res UpdateNetworkInterfaceDefaultOutputResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateNetworkInterfaceDefaultOutput", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateRouteTableAttributeRequest is request schema for UpdateRouteTableAttribute action
type UpdateRouteTableAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 名称
	Name *string `required:"false"`

	// 备注
	Remark *string `required:"false"`

	// 路由表ID
	RouteTableId *string `required:"true"`

	// 业务组名称
	Tag *string `required:"false"`
}

// UpdateRouteTableAttributeResponse is response schema for UpdateRouteTableAttribute action
type UpdateRouteTableAttributeResponse struct {
	response.CommonBase
}

// NewUpdateRouteTableAttributeRequest will create request of UpdateRouteTableAttribute action.
func (c *VPCClient) NewUpdateRouteTableAttributeRequest() *UpdateRouteTableAttributeRequest {
	req := &UpdateRouteTableAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateRouteTableAttribute

更新路由表基本信息
*/
func (c *VPCClient) UpdateRouteTableAttribute(req *UpdateRouteTableAttributeRequest) (*UpdateRouteTableAttributeResponse, error) {
	var err error
	var res UpdateRouteTableAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateRouteTableAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateSecGroupRequest is request schema for UpdateSecGroup action
type UpdateSecGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 安全组名称，默认为空，为空则不做修改。Name,Tag,Remark必须填写1个及以上
	Name *string `required:"false"`

	// 安全组备注，默认为空，为空则不做修改。Name,Tag,Remark必须填写1个及以上
	Remark *string `required:"false"`

	// 安全组资源ID数组。不支持 .n 格式。Type 为 string 数组。
	SecGroupId *string `required:"true"`
}

// UpdateSecGroupResponse is response schema for UpdateSecGroup action
type UpdateSecGroupResponse struct {
	response.CommonBase
}

// NewUpdateSecGroupRequest will create request of UpdateSecGroup action.
func (c *VPCClient) NewUpdateSecGroupRequest() *UpdateSecGroupRequest {
	req := &UpdateSecGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateSecGroup

更新安全组基本信息
*/
func (c *VPCClient) UpdateSecGroup(req *UpdateSecGroupRequest) (*UpdateSecGroupResponse, error) {
	var err error
	var res UpdateSecGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateSecGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UpdateSecGroupAssociationParamNewPrioritySecGroup is request schema for complex param
*/
type UpdateSecGroupAssociationParamNewPrioritySecGroup struct {

	// 新绑定安全组的绑定优先级。支持 NewPrioritySecGroup 为数组格式，即传对应数据的 JSON 格式数组。
	Priority *int `required:"true"`

	// 需新绑定的安全组ID
	SecGroupId *string `required:"true"`
}

// UpdateSecGroupAssociationRequest is request schema for UpdateSecGroupAssociation action
type UpdateSecGroupAssociationRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	//
	NewPrioritySecGroup []UpdateSecGroupAssociationParamNewPrioritySecGroup `required:"false"`

	// 被替换的安全组ID。支持数组格式，即为 string 数组。
	OldSecGroupId []string `required:"true"`

	// 资源ID
	ResourceId *string `required:"true"`
}

// UpdateSecGroupAssociationResponse is response schema for UpdateSecGroupAssociation action
type UpdateSecGroupAssociationResponse struct {
	response.CommonBase
}

// NewUpdateSecGroupAssociationRequest will create request of UpdateSecGroupAssociation action.
func (c *VPCClient) NewUpdateSecGroupAssociationRequest() *UpdateSecGroupAssociationRequest {
	req := &UpdateSecGroupAssociationRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateSecGroupAssociation

仅对操作的安全组ID生效，其他已有的绑定关系不受影响。
*/
func (c *VPCClient) UpdateSecGroupAssociation(req *UpdateSecGroupAssociationRequest) (*UpdateSecGroupAssociationResponse, error) {
	var err error
	var res UpdateSecGroupAssociationResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateSecGroupAssociation", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UpdateSecGroupRuleParamRule is request schema for complex param
*/
type UpdateSecGroupRuleParamRule struct {

	// "Ingress/Egress"，入站规则/出站规则
	Direction *string `required:"true"`

	// 目的端口。逗号分隔，如 "80,443"、"443,2000-10000"
	DstPort *string `required:"true"`

	// IP 地址信息，逗号分隔。
	IPRange *string `required:"true"`

	// IP 版本，如 “IPv4”。支持 IPv6 后废弃
	IPVersion *string `required:"false"`

	// 规则优先级。范围为 1~200
	Priority *int `required:"true"`

	// 协议类型。"TCP","UDP","ICMP","ICMPv6","ALL"
	ProtocolType *string `required:"true"`

	// 规则备注
	Remark *string `required:"true"`

	// 规则行为。"Accept" 或 "Drop"
	RuleAction *string `required:"true"`

	// 规则 ID
	RuleId *string `required:"true"`
}

// UpdateSecGroupRuleRequest is request schema for UpdateSecGroupRule action
type UpdateSecGroupRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	//
	Rule []UpdateSecGroupRuleParamRule `required:"false"`

	// 规则所属得安全组 ID。
	SecGroupId *string `required:"true"`
}

// UpdateSecGroupRuleResponse is response schema for UpdateSecGroupRule action
type UpdateSecGroupRuleResponse struct {
	response.CommonBase
}

// NewUpdateSecGroupRuleRequest will create request of UpdateSecGroupRule action.
func (c *VPCClient) NewUpdateSecGroupRuleRequest() *UpdateSecGroupRuleRequest {
	req := &UpdateSecGroupRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateSecGroupRule
*/
func (c *VPCClient) UpdateSecGroupRule(req *UpdateSecGroupRuleRequest) (*UpdateSecGroupRuleResponse, error) {
	var err error
	var res UpdateSecGroupRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateSecGroupRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateSnatRuleRequest is request schema for UpdateSnatRule action
type UpdateSnatRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// NAT网关的ID，
	NATGWId *string `required:"true"`

	// snat名称，即出口规则名称
	Name *string `required:"false"`

	// EIP的ip地址,例如106.75.xx.xx
	SnatIp *string `required:"true"`

	// 需要出外网的私网IP地址，例如10.9.7.xx
	SourceIp *string `required:"true"`
}

// UpdateSnatRuleResponse is response schema for UpdateSnatRule action
type UpdateSnatRuleResponse struct {
	response.CommonBase
}

// NewUpdateSnatRuleRequest will create request of UpdateSnatRule action.
func (c *VPCClient) NewUpdateSnatRuleRequest() *UpdateSnatRuleRequest {
	req := &UpdateSnatRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateSnatRule

更新指定的出口规则（SNAT规则）
*/
func (c *VPCClient) UpdateSnatRule(req *UpdateSnatRuleRequest) (*UpdateSnatRuleResponse, error) {
	var err error
	var res UpdateSnatRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateSnatRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateSubnetAttributeRequest is request schema for UpdateSubnetAttribute action
type UpdateSubnetAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 子网名称(如果Name不填写，Tag必须填写)
	Name *string `required:"false"`

	// 子网ID
	SubnetId *string `required:"true"`

	// 业务组名称(如果Tag不填写，Name必须填写)
	Tag *string `required:"false"`
}

// UpdateSubnetAttributeResponse is response schema for UpdateSubnetAttribute action
type UpdateSubnetAttributeResponse struct {
	response.CommonBase
}

// NewUpdateSubnetAttributeRequest will create request of UpdateSubnetAttribute action.
func (c *VPCClient) NewUpdateSubnetAttributeRequest() *UpdateSubnetAttributeRequest {
	req := &UpdateSubnetAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateSubnetAttribute

更新子网信息
*/
func (c *VPCClient) UpdateSubnetAttribute(req *UpdateSubnetAttributeRequest) (*UpdateSubnetAttributeResponse, error) {
	var err error
	var res UpdateSubnetAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateSubnetAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateVIPAttributeRequest is request schema for UpdateVIPAttribute action
type UpdateVIPAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 内网VIP的名称
	Name *string `required:"false"`

	// 内网VIP的备注
	Remark *string `required:"false"`

	// 内网VIP所属的业务组
	Tag *string `required:"false"`

	// 内网VIP的资源Id
	VIPId *string `required:"true"`
}

// UpdateVIPAttributeResponse is response schema for UpdateVIPAttribute action
type UpdateVIPAttributeResponse struct {
	response.CommonBase
}

// NewUpdateVIPAttributeRequest will create request of UpdateVIPAttribute action.
func (c *VPCClient) NewUpdateVIPAttributeRequest() *UpdateVIPAttributeRequest {
	req := &UpdateVIPAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateVIPAttribute

更新VIP信息
*/
func (c *VPCClient) UpdateVIPAttribute(req *UpdateVIPAttributeRequest) (*UpdateVIPAttributeResponse, error) {
	var err error
	var res UpdateVIPAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateVIPAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateVPCNetworkRequest is request schema for UpdateVPCNetwork action
type UpdateVPCNetworkRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 需要保留的VPC网段。当前仅支持删除VPC网段，添加网段请参考[AddVPCNetwork](https://docs.ucloud.cn/api/vpc2.0-api/add_vpc_network)
	Network []string `required:"true"`

	// VPC的ID
	VPCId *string `required:"true"`
}

// UpdateVPCNetworkResponse is response schema for UpdateVPCNetwork action
type UpdateVPCNetworkResponse struct {
	response.CommonBase

	// 【该字段已废弃，请谨慎使用】
	Message string `deprecated:"true"`
}

// NewUpdateVPCNetworkRequest will create request of UpdateVPCNetwork action.
func (c *VPCClient) NewUpdateVPCNetworkRequest() *UpdateVPCNetworkRequest {
	req := &UpdateVPCNetworkRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateVPCNetwork

更新VPC网段
*/
func (c *VPCClient) UpdateVPCNetwork(req *UpdateVPCNetworkRequest) (*UpdateVPCNetworkResponse, error) {
	var err error
	var res UpdateVPCNetworkResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateVPCNetwork", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
