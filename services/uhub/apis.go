// Code is generated by ucloud-model, DO NOT EDIT IT.

package uhub

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UHub API Schema

// CreateRepoRequest is request schema for CreateRepo action
type CreateRepoRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 仓库备注
	Description *string `required:"false"`

	// 镜像仓库是否公开，公开为true、不公开为false;默认为false
	IsShared *bool `required:"false"`

	// 仓库名称，不可修改
	RepoName *string `required:"true"`
}

// CreateRepoResponse is response schema for CreateRepo action
type CreateRepoResponse struct {
	response.CommonBase

	// 有错误时返回内容
	Message string
}

// NewCreateRepoRequest will create request of CreateRepo action.
func (c *UHubClient) NewCreateRepoRequest() *CreateRepoRequest {
	req := &CreateRepoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateRepo

创建镜像仓库
*/
func (c *UHubClient) CreateRepo(req *CreateRepoRequest) (*CreateRepoResponse, error) {
	var err error
	var res CreateRepoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateRepo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteRepoRequest is request schema for DeleteRepo action
type DeleteRepoRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 镜像仓库名称
	RepoName *string `required:"true"`
}

// DeleteRepoResponse is response schema for DeleteRepo action
type DeleteRepoResponse struct {
	response.CommonBase
}

// NewDeleteRepoRequest will create request of DeleteRepo action.
func (c *UHubClient) NewDeleteRepoRequest() *DeleteRepoRequest {
	req := &DeleteRepoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteRepo

删除镜像仓库
*/
func (c *UHubClient) DeleteRepo(req *DeleteRepoRequest) (*DeleteRepoResponse, error) {
	var err error
	var res DeleteRepoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteRepo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteRepoImageRequest is request schema for DeleteRepoImage action
type DeleteRepoImageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 镜像名称
	ImageName *string `required:"true"`

	// 镜像仓库名称
	RepoName *string `required:"true"`

	// 不指定tag则删除全部tag
	TagName *string `required:"false"`
}

// DeleteRepoImageResponse is response schema for DeleteRepoImage action
type DeleteRepoImageResponse struct {
	response.CommonBase
}

// NewDeleteRepoImageRequest will create request of DeleteRepoImage action.
func (c *UHubClient) NewDeleteRepoImageRequest() *DeleteRepoImageRequest {
	req := &DeleteRepoImageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteRepoImage

删除镜像
*/
func (c *UHubClient) DeleteRepoImage(req *DeleteRepoImageRequest) (*DeleteRepoImageResponse, error) {
	var err error
	var res DeleteRepoImageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteRepoImage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetImageTagRequest is request schema for GetImageTag action
type GetImageTagRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 镜像名称
	ImageName *string `required:"true"`

	// 每次获取数量，默认为20
	Limit *int `required:"false"`

	// 偏移量，默认0
	Offset *int `required:"false"`

	// 镜像仓库名称
	RepoName *string `required:"true"`

	// 默认不写，如果填写，代表查询该tag，否则查全部tag
	TagName *string `required:"false"`
}

// GetImageTagResponse is response schema for GetImageTag action
type GetImageTagResponse struct {
	response.CommonBase

	// tag列表
	TagSet []TagSet

	// tag总数
	TotalCount int
}

// NewGetImageTagRequest will create request of GetImageTag action.
func (c *UHubClient) NewGetImageTagRequest() *GetImageTagRequest {
	req := &GetImageTagRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetImageTag

获取镜像tag
*/
func (c *UHubClient) GetImageTag(req *GetImageTagRequest) (*GetImageTagResponse, error) {
	var err error
	var res GetImageTagResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetImageTag", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetRepoRequest is request schema for GetRepo action
type GetRepoRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 数量，默认20
	Limit *int `required:"false"`

	// 偏移量，默认0
	Offset *int `required:"false"`

	// private私有仓库，public公共仓库，默认public
	Type *string `required:"false"`
}

// GetRepoResponse is response schema for GetRepo action
type GetRepoResponse struct {
	response.CommonBase

	// 镜像仓库列表
	RepoSet []RepoSet

	// 总的仓库数量
	TotalCount int
}

// NewGetRepoRequest will create request of GetRepo action.
func (c *UHubClient) NewGetRepoRequest() *GetRepoRequest {
	req := &GetRepoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetRepo

获取镜像仓库
*/
func (c *UHubClient) GetRepo(req *GetRepoRequest) (*GetRepoResponse, error) {
	var err error
	var res GetRepoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetRepo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetRepoImageRequest is request schema for GetRepoImage action
type GetRepoImageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 显示数量，默认为20
	Limit *int `required:"false"`

	// 偏移量，默认0
	Offset *int `required:"false"`

	// 镜像仓库名称
	RepoName *string `required:"true"`
}

// GetRepoImageResponse is response schema for GetRepoImage action
type GetRepoImageResponse struct {
	response.CommonBase

	// 镜像列表
	ImageSet []ImageSet

	//
	TotalCount int
}

// NewGetRepoImageRequest will create request of GetRepoImage action.
func (c *UHubClient) NewGetRepoImageRequest() *GetRepoImageRequest {
	req := &GetRepoImageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetRepoImage

获取镜像仓库下的镜像
*/
func (c *UHubClient) GetRepoImage(req *GetRepoImageRequest) (*GetRepoImageResponse, error) {
	var err error
	var res GetRepoImageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetRepoImage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateRepoRequest is request schema for UpdateRepo action
type UpdateRepoRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 备注
	Description *string `required:"false"`

	// false设置为私有；true设置为公有。默认false
	IsShared *string `required:"false"`

	// 镜像仓库名称，不可修改
	RepoName *string `required:"true"`
}

// UpdateRepoResponse is response schema for UpdateRepo action
type UpdateRepoResponse struct {
	response.CommonBase

	// 错误的时候返回
	Message string
}

// NewUpdateRepoRequest will create request of UpdateRepo action.
func (c *UHubClient) NewUpdateRepoRequest() *UpdateRepoRequest {
	req := &UpdateRepoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateRepo

更新镜像仓库
*/
func (c *UHubClient) UpdateRepo(req *UpdateRepoRequest) (*UpdateRepoResponse, error) {
	var err error
	var res UpdateRepoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateRepo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
