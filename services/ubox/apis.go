// Code is generated by ucloud-model, DO NOT EDIT IT.

package ubox

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UBox API Schema

// GetSdnboxCameraListRequest is request schema for GetSdnboxCameraList action
type GetSdnboxCameraListRequest struct {
	request.CommonBase
}

// GetSdnboxCameraListResponse is response schema for GetSdnboxCameraList action
type GetSdnboxCameraListResponse struct {
	response.CommonBase

	// 摄像头推流列表
	SdnboxCamera []SdnboxCamera
}

// NewGetSdnboxCameraListRequest will create request of GetSdnboxCameraList action.
func (c *UBoxClient) NewGetSdnboxCameraListRequest() *GetSdnboxCameraListRequest {
	req := &GetSdnboxCameraListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetSdnboxCameraList

获取盒子摄像头推流列表
*/
func (c *UBoxClient) GetSdnboxCameraList(req *GetSdnboxCameraListRequest) (*GetSdnboxCameraListResponse, error) {
	var err error
	var res GetSdnboxCameraListResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetSdnboxCameraList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StartSdnboxCameraPushingRequest is request schema for StartSdnboxCameraPushing action
type StartSdnboxCameraPushingRequest struct {
	request.CommonBase

	// 摄像头ID
	CameraId *string `required:"true"`

	// 盒子ID
	SdnboxId *string `required:"true"`
}

// StartSdnboxCameraPushingResponse is response schema for StartSdnboxCameraPushing action
type StartSdnboxCameraPushingResponse struct {
	response.CommonBase
}

// NewStartSdnboxCameraPushingRequest will create request of StartSdnboxCameraPushing action.
func (c *UBoxClient) NewStartSdnboxCameraPushingRequest() *StartSdnboxCameraPushingRequest {
	req := &StartSdnboxCameraPushingRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StartSdnboxCameraPushing

摄像头推流开启
*/
func (c *UBoxClient) StartSdnboxCameraPushing(req *StartSdnboxCameraPushingRequest) (*StartSdnboxCameraPushingResponse, error) {
	var err error
	var res StartSdnboxCameraPushingResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StartSdnboxCameraPushing", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StopSdnboxCameraPushingRequest is request schema for StopSdnboxCameraPushing action
type StopSdnboxCameraPushingRequest struct {
	request.CommonBase

	// 摄像头ID
	CameraId *string `required:"true"`

	// 盒子ID
	SdnboxId *string `required:"true"`
}

// StopSdnboxCameraPushingResponse is response schema for StopSdnboxCameraPushing action
type StopSdnboxCameraPushingResponse struct {
	response.CommonBase
}

// NewStopSdnboxCameraPushingRequest will create request of StopSdnboxCameraPushing action.
func (c *UBoxClient) NewStopSdnboxCameraPushingRequest() *StopSdnboxCameraPushingRequest {
	req := &StopSdnboxCameraPushingRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StopSdnboxCameraPushing

摄像头推流关闭
*/
func (c *UBoxClient) StopSdnboxCameraPushing(req *StopSdnboxCameraPushingRequest) (*StopSdnboxCameraPushingResponse, error) {
	var err error
	var res StopSdnboxCameraPushingResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StopSdnboxCameraPushing", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
