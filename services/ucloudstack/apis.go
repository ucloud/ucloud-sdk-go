// Code is generated by ucloud-model, DO NOT EDIT IT.

package ucloudstack

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UCloudStack API Schema

// AllocateEIPRequest is request schema for AllocateEIP action
type AllocateEIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 带宽，默认值1，默认范围1~100
	Bandwidth *int `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 名称
	Name *string `required:"true"`

	// 线路。目前支持Bgp
	OperatorName *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`
}

// AllocateEIPResponse is response schema for AllocateEIP action
type AllocateEIPResponse struct {
	response.CommonBase

	// 申请的EIP的ID
	EIPID string

	// 返回信息描述。
	Message string
}

// NewAllocateEIPRequest will create request of AllocateEIP action.
func (c *UCloudStackClient) NewAllocateEIPRequest() *AllocateEIPRequest {
	req := &AllocateEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: AllocateEIP

申请外网IP
*/
func (c *UCloudStackClient) AllocateEIP(req *AllocateEIPRequest) (*AllocateEIPResponse, error) {
	var err error
	var res AllocateEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AllocateEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AttachDiskRequest is request schema for AttachDisk action
type AttachDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 硬盘ID
	DiskID *string `required:"true"`

	// 绑定的资源ID
	ResourceID *string `required:"true"`

	// 绑定的资源类型，枚举值：VM，标识虚拟机
	ResourceType *string `required:"true"`
}

// AttachDiskResponse is response schema for AttachDisk action
type AttachDiskResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewAttachDiskRequest will create request of AttachDisk action.
func (c *UCloudStackClient) NewAttachDiskRequest() *AttachDiskRequest {
	req := &AttachDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: AttachDisk

绑定硬盘
*/
func (c *UCloudStackClient) AttachDisk(req *AttachDiskRequest) (*AttachDiskResponse, error) {
	var err error
	var res AttachDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AttachDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BindAlarmTemplateRequest is request schema for BindAlarmTemplate action
type BindAlarmTemplateRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 告警模板ID
	AlarmTemplateID *string `required:"true"`

	// 【数组】告警模板ID。调用方式举例：ResourceIDs.0=“one-id”、ResourceIDs.1=“two-id”。
	ResourceIDs []string `required:"true"`

	// 资源类型。VM：虚拟机, LB:负载均衡, NATGW：nat网关;EIP:弹性IP
	ResourceType *string `required:"true"`
}

// BindAlarmTemplateResponse is response schema for BindAlarmTemplate action
type BindAlarmTemplateResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewBindAlarmTemplateRequest will create request of BindAlarmTemplate action.
func (c *UCloudStackClient) NewBindAlarmTemplateRequest() *BindAlarmTemplateRequest {
	req := &BindAlarmTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindAlarmTemplate

绑定告警模板
*/
func (c *UCloudStackClient) BindAlarmTemplate(req *BindAlarmTemplateRequest) (*BindAlarmTemplateResponse, error) {
	var err error
	var res BindAlarmTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindAlarmTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BindEIPRequest is request schema for BindEIP action
type BindEIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；中国
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 外网IP的ID
	EIPID *string `required:"true"`

	// 资源ID
	ResourceID *string `required:"true"`

	// 资源类型。VM：虚拟机, LB:负载均衡, NATGW：nat网关
	ResourceType *string `required:"true"`
}

// BindEIPResponse is response schema for BindEIP action
type BindEIPResponse struct {
	response.CommonBase

	// 返回描述
	Message string
}

// NewBindEIPRequest will create request of BindEIP action.
func (c *UCloudStackClient) NewBindEIPRequest() *BindEIPRequest {
	req := &BindEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindEIP

绑定UCoudStack外网IP
*/
func (c *UCloudStackClient) BindEIP(req *BindEIPRequest) (*BindEIPResponse, error) {
	var err error
	var res BindEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BindPhysicalIPRequest is request schema for BindPhysicalIP action
type BindPhysicalIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 物理IP的ID
	PhysicalIPID *string `required:"true"`

	// 资源ID
	ResourceID *string `required:"true"`

	// 资源类型。VM：虚拟机
	ResourceType *string `required:"true"`
}

// BindPhysicalIPResponse is response schema for BindPhysicalIP action
type BindPhysicalIPResponse struct {
	response.CommonBase

	// 返回描述
	Message string
}

// NewBindPhysicalIPRequest will create request of BindPhysicalIP action.
func (c *UCloudStackClient) NewBindPhysicalIPRequest() *BindPhysicalIPRequest {
	req := &BindPhysicalIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindPhysicalIP

绑定物理 IP ，被绑定的资源必须处于运行中或有效状态。
*/
func (c *UCloudStackClient) BindPhysicalIP(req *BindPhysicalIPRequest) (*BindPhysicalIPResponse, error) {
	var err error
	var res BindPhysicalIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindPhysicalIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BindSecurityGroupRequest is request schema for BindSecurityGroup action
type BindSecurityGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 网卡ID
	NICID *string `required:"false"`

	// 绑定的资源ID。调用方式举例：ResourceID=“one-id”。
	ResourceID *string `required:"true"`

	// 安全组ID
	SGID *string `required:"true"`
}

// BindSecurityGroupResponse is response schema for BindSecurityGroup action
type BindSecurityGroupResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewBindSecurityGroupRequest will create request of BindSecurityGroup action.
func (c *UCloudStackClient) NewBindSecurityGroupRequest() *BindSecurityGroupRequest {
	req := &BindSecurityGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindSecurityGroup

绑定安全组
*/
func (c *UCloudStackClient) BindSecurityGroup(req *BindSecurityGroupRequest) (*BindSecurityGroupResponse, error) {
	var err error
	var res BindSecurityGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindSecurityGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CloneDiskRequest is request schema for CloneDisk action
type CloneDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 名称
	Name *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 源硬盘ID
	SrcID *string `required:"true"`
}

// CloneDiskResponse is response schema for CloneDisk action
type CloneDiskResponse struct {
	response.CommonBase

	// 克隆出的硬盘ID
	DiskID string

	// 返回信息描述。
	Message string
}

// NewCloneDiskRequest will create request of CloneDisk action.
func (c *UCloudStackClient) NewCloneDiskRequest() *CloneDiskRequest {
	req := &CloneDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CloneDisk

克隆硬盘
*/
func (c *UCloudStackClient) CloneDisk(req *CloneDiskRequest) (*CloneDiskResponse, error) {
	var err error
	var res CloneDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CloneDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateCertificateRequest is request schema for CreateCertificate action
type CreateCertificateRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 证书内容
	Certificate *string `required:"true"`

	// 证书类型，枚举值["ServerCrt","CACrt"]。分别表示服务器证书和CA证书。只有在双向认证的时候才需要CA证书
	CertificateType *string `required:"true"`

	// 证书名称
	Name *string `required:"true"`

	// 私钥内容,服务器证书必传,CA证书不用传递
	PrivateKey *string `required:"false"`

	// 证书描述
	Remark *string `required:"false"`
}

// CreateCertificateResponse is response schema for CreateCertificate action
type CreateCertificateResponse struct {
	response.CommonBase

	// 证书ID
	CertificateID string

	// 错误描述
	Message string
}

// NewCreateCertificateRequest will create request of CreateCertificate action.
func (c *UCloudStackClient) NewCreateCertificateRequest() *CreateCertificateRequest {
	req := &CreateCertificateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateCertificate

创建证书
*/
func (c *UCloudStackClient) CreateCertificate(req *CreateCertificateRequest) (*CreateCertificateResponse, error) {
	var err error
	var res CreateCertificateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateCertificate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateCustomImageRequest is request schema for CreateCustomImage action
type CreateCustomImageRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 镜像描述。
	ImageDescription *string `required:"false"`

	// 镜像名称
	ImageName *string `required:"true"`

	// 虚拟机ID
	VMID *string `required:"true"`
}

// CreateCustomImageResponse is response schema for CreateCustomImage action
type CreateCustomImageResponse struct {
	response.CommonBase

	// 创建的自制镜像ID
	ImageID string

	// 返回信息描述。
	Message string
}

// NewCreateCustomImageRequest will create request of CreateCustomImage action.
func (c *UCloudStackClient) NewCreateCustomImageRequest() *CreateCustomImageRequest {
	req := &CreateCustomImageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateCustomImage

创建自制镜像
*/
func (c *UCloudStackClient) CreateCustomImage(req *CreateCustomImageRequest) (*CreateCustomImageResponse, error) {
	var err error
	var res CreateCustomImageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateCustomImage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateDiskRequest is request schema for CreateDisk action
type CreateDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 磁盘大小
	DiskSpace *int `required:"true"`

	// 磁盘名称
	Name *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 磁盘类型。例如：Normal,SSD
	SetType *string `required:"true"`
}

// CreateDiskResponse is response schema for CreateDisk action
type CreateDiskResponse struct {
	response.CommonBase

	// 创建的磁盘ID
	DiskID string

	// 返回信息描述。
	Message string
}

// NewCreateDiskRequest will create request of CreateDisk action.
func (c *UCloudStackClient) NewCreateDiskRequest() *CreateDiskRequest {
	req := &CreateDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateDisk

创建硬盘
*/
func (c *UCloudStackClient) CreateDisk(req *CreateDiskRequest) (*CreateDiskResponse, error) {
	var err error
	var res CreateDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateLBRequest is request schema for CreateLB action
type CreateLBRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 外网IP的ID，创建外网LB时为必需
	EIPID *string `required:"false"`

	// 枚举值。LAN：内网，WAN:外网
	LBType *string `required:"true"`

	// 名称。
	Name *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 描述。
	Remark *string `required:"false"`

	// 安全组ID，创建外网LB时为必需
	SGID *string `required:"false"`

	// LB 实例所在的子网 ID 。
	SubnetID *string `required:"true"`

	// 运行负载均衡实例的主机机型。枚举值：如 Normal ，表示普通机型； SSD，表示 SSD 机型。（机型由平台管理员修改和指定，可参考获取主机机型接口）
	VMType *string `required:"true"`

	// LB实例所在的 VPC ID 。
	VPCID *string `required:"true"`
}

// CreateLBResponse is response schema for CreateLB action
type CreateLBResponse struct {
	response.CommonBase

	// 返回创建的负载均衡ID
	LBID string

	// 返回信息描述。
	Message string
}

// NewCreateLBRequest will create request of CreateLB action.
func (c *UCloudStackClient) NewCreateLBRequest() *CreateLBRequest {
	req := &CreateLBRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateLB

创建负载均衡
*/
func (c *UCloudStackClient) CreateLB(req *CreateLBRequest) (*CreateLBResponse, error) {
	var err error
	var res CreateLBResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateLB", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateNATGWRequest is request schema for CreateNATGW action
type CreateNATGWRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 外网IP的ID
	EIPID *string `required:"true"`

	// 名称。
	Name *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 描述
	Remark *string `required:"false"`

	// 安全组ID
	SGID *string `required:"true"`

	// NAT网关实例所在的子网 ID
	SubnetID *string `required:"true"`

	// 运行NAT网关实例的主机机型。枚举值：如 Normal ，表示普通机型； SSD，表示 SSD 机型。（机型由平台管理员修改和指定，可参考获取主机机型接口）
	VMType *string `required:"true"`

	// NAT网关实例所在的 VPC ID
	VPCID *string `required:"true"`
}

// CreateNATGWResponse is response schema for CreateNATGW action
type CreateNATGWResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string

	// 返回创建的NAT网关ID
	NATGWID string
}

// NewCreateNATGWRequest will create request of CreateNATGW action.
func (c *UCloudStackClient) NewCreateNATGWRequest() *CreateNATGWRequest {
	req := &CreateNATGWRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateNATGW

创建NAT网关
*/
func (c *UCloudStackClient) CreateNATGW(req *CreateNATGWRequest) (*CreateNATGWResponse, error) {
	var err error
	var res CreateNATGWResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateNATGW", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateNATGWRuleRequest is request schema for CreateNATGWRule action
type CreateNATGWRuleRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 绑定的虚拟机资源ID
	BindResourceID *string `required:"true"`

	// NAT网关ID
	NATGWID *string `required:"true"`

	// NAT的类型。枚举值：SNAT，DNAT
	NATGWType *string `required:"true"`
}

// CreateNATGWRuleResponse is response schema for CreateNATGWRule action
type CreateNATGWRuleResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string

	// 白名单ID
	RuleID string
}

// NewCreateNATGWRuleRequest will create request of CreateNATGWRule action.
func (c *UCloudStackClient) NewCreateNATGWRuleRequest() *CreateNATGWRuleRequest {
	req := &CreateNATGWRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateNATGWRule

添加NAT网关白名单
*/
func (c *UCloudStackClient) CreateNATGWRule(req *CreateNATGWRuleRequest) (*CreateNATGWRuleResponse, error) {
	var err error
	var res CreateNATGWRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateNATGWRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreatePhysicalIPRequest is request schema for CreatePhysicalIP action
type CreatePhysicalIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 物理IP名称，限制字符长度30
	Name *string `required:"true"`

	// 物理IP线路
	OperatorName *string `required:"true"`

	// 描述
	Remark *string `required:"false"`
}

// CreatePhysicalIPResponse is response schema for CreatePhysicalIP action
type CreatePhysicalIPResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string

	// 返回创建的物理IP的ID
	PhysicalIPID string
}

// NewCreatePhysicalIPRequest will create request of CreatePhysicalIP action.
func (c *UCloudStackClient) NewCreatePhysicalIPRequest() *CreatePhysicalIPRequest {
	req := &CreatePhysicalIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreatePhysicalIP

创建物理 IP ，需确保平台已配置物理 IP 线路相关信息及物理网络联通性。
*/
func (c *UCloudStackClient) CreatePhysicalIP(req *CreatePhysicalIPRequest) (*CreatePhysicalIPResponse, error) {
	var err error
	var res CreatePhysicalIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreatePhysicalIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateRSRequest is request schema for CreateRS action
type CreateRSRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 服务节点的资源 ID ，仅支持添加与 LB 相同 VPC 的虚拟机资源
	BindResourceID *string `required:"true"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// 服务节点暴露的服务端口号
	Port *int `required:"true"`

	// VServer的ID
	VSID *string `required:"true"`

	// 服务节点的权重
	Weight *int `required:"true"`
}

// CreateRSResponse is response schema for CreateRS action
type CreateRSResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string

	// 返回创建的RSID
	RSID string
}

// NewCreateRSRequest will create request of CreateRS action.
func (c *UCloudStackClient) NewCreateRSRequest() *CreateRSRequest {
	req := &CreateRSRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateRS

为负载均衡的 VServer 添加后端服务节点。
*/
func (c *UCloudStackClient) CreateRS(req *CreateRSRequest) (*CreateRSResponse, error) {
	var err error
	var res CreateRSResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateRS", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSecurityGroupRequest is request schema for CreateSecurityGroup action
type CreateSecurityGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 名称;
	Name *string `required:"true"`

	// 描述;
	Remark *string `required:"false"`

	// 【数组】安全组规则。输入有效的规则，调用方式举例：Rule.0=“TCP|23|0.0.0.0/0|ACCEPT|HIGH|1”、Rule.1=“TCP|55|0.0.0.0/0|ACCEPT|HIGH|1”
	Rule []string `required:"true"`
}

// CreateSecurityGroupResponse is response schema for CreateSecurityGroup action
type CreateSecurityGroupResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string

	// 创建的安全组ID
	SGID string
}

// NewCreateSecurityGroupRequest will create request of CreateSecurityGroup action.
func (c *UCloudStackClient) NewCreateSecurityGroupRequest() *CreateSecurityGroupRequest {
	req := &CreateSecurityGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateSecurityGroup

创建安全组
*/
func (c *UCloudStackClient) CreateSecurityGroup(req *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error) {
	var err error
	var res CreateSecurityGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSecurityGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSecurityGroupRuleRequest is request schema for CreateSecurityGroupRule action
type CreateSecurityGroupRuleRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】安全组规则。输入有效的规则，调用方式举例：Rule.0=“TCP|23|0.0.0.0/0|ACCEPT|HIGH|1”、Rule.1=“TCP|55|0.0.0.0/0|ACCEPT|HIGH|1”
	Rules []string `required:"true"`

	// 安全组ID
	SGID *string `required:"true"`
}

// CreateSecurityGroupRuleResponse is response schema for CreateSecurityGroupRule action
type CreateSecurityGroupRuleResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string

	// 创建的安全组规则ID
	SGRuleID string
}

// NewCreateSecurityGroupRuleRequest will create request of CreateSecurityGroupRule action.
func (c *UCloudStackClient) NewCreateSecurityGroupRuleRequest() *CreateSecurityGroupRuleRequest {
	req := &CreateSecurityGroupRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateSecurityGroupRule

创建安全组规则
*/
func (c *UCloudStackClient) CreateSecurityGroupRule(req *CreateSecurityGroupRuleRequest) (*CreateSecurityGroupRuleResponse, error) {
	var err error
	var res CreateSecurityGroupRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSecurityGroupRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSnapshotRequest is request schema for CreateSnapshot action
type CreateSnapshotRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：如 cn,表示中国。
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：如 zone-01，表示可用区1。
	// Zone *string `required:"true"`

	// 硬盘ID，输入“有效”状态的ID
	DiskID *string `required:"true"`

	// 快照名称，限制字符长度30
	Name *string `required:"true"`

	// 描述，限制字符长度100
	Remark *string `required:"false"`
}

// CreateSnapshotResponse is response schema for CreateSnapshot action
type CreateSnapshotResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string

	// 创建的快照ID
	SnapshotID string
}

// NewCreateSnapshotRequest will create request of CreateSnapshot action.
func (c *UCloudStackClient) NewCreateSnapshotRequest() *CreateSnapshotRequest {
	req := &CreateSnapshotRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateSnapshot

创建硬盘快照
*/
func (c *UCloudStackClient) CreateSnapshot(req *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	var err error
	var res CreateSnapshotResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSnapshot", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSubnetRequest is request schema for CreateSubnet action
type CreateSubnetRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 名称;
	Name *string `required:"true"`

	// 网段。列如：10.0.0.0/16；
	Network *string `required:"true"`

	// 描述;
	Remark *string `required:"false"`

	// 所属VPCID
	VPCID *string `required:"true"`
}

// CreateSubnetResponse is response schema for CreateSubnet action
type CreateSubnetResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string

	// 创建Subnet的ID；
	SubnetID string
}

// NewCreateSubnetRequest will create request of CreateSubnet action.
func (c *UCloudStackClient) NewCreateSubnetRequest() *CreateSubnetRequest {
	req := &CreateSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateSubnet

创建子网
*/
func (c *UCloudStackClient) CreateSubnet(req *CreateSubnetRequest) (*CreateSubnetResponse, error) {
	var err error
	var res CreateSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUserRequest is request schema for CreateUser action
type CreateUserRequest struct {
	request.CommonBase

	// 账号密码。
	PassWord *string `required:"true"`

	// 账号邮箱。
	UserEmail *string `required:"true"`
}

// CreateUserResponse is response schema for CreateUser action
type CreateUserResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string

	// 账户ID
	UserID int
}

// NewCreateUserRequest will create request of CreateUser action.
func (c *UCloudStackClient) NewCreateUserRequest() *CreateUserRequest {
	req := &CreateUserRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateUser

管理员添加账号
*/
func (c *UCloudStackClient) CreateUser(req *CreateUserRequest) (*CreateUserResponse, error) {
	var err error
	var res CreateUserResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUser", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateVMInstanceRequest is request schema for CreateVMInstance action
type CreateVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 带宽
	Bandwidth *string `required:"false"`

	// 系统盘类型。枚举值：Normal，表示普通；SSD，表示SSD；
	BootDiskSetType *string `required:"true"`

	// CPU个数，如1，2，4，8，16，32，64等。
	CPU *int `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 数据盘类型。枚举值：Normal，表示普通；SSD，表示SSD；
	DataDiskSetType *string `required:"true"`

	// 数据盘大小，单位 GB。默认值为0。范围：【0，8000】，步长10。
	DataDiskSpace *int `required:"false"`

	// GPU 卡核心的占用个数。枚举值：【1,2,4】。GPU与CPU、内存大小关系：CPU个数>=4*GPU个数，同时内存与CPU规格匹配.
	GPU *int `required:"false"`

	// 外网IP版本，默认IPv4
	IPVersion *string `required:"false"`

	// 镜像 ID。基础镜像 ID 或者自制镜像 ID。如：cn-image-centos-74。
	ImageID *string `required:"true"`

	// 指定内网IP。输入有效的指定内网 IP。默认为系统自动分配内网 IP。
	InternalIP *string `required:"false"`

	// 指定外网IP
	InternetIP *string `required:"false"`

	// 内网安全组 ID。输入“有效”状态的安全组的ID。
	LANSGID *string `required:"false"`

	// 内存容量，如1024，2048，4096，8192，16384，32768，65535等。
	Memory *int `required:"true"`

	// 虚拟机名称。可输入如：myVM。名称只能包含中英文、数字以及- _ .且1-30个字符。
	Name *string `required:"true"`

	// 线路
	OperatorName *string `required:"false"`

	// 密码。可输入如：ucloud.cn。密码长度限6-30个字符；需要同时包含两项或以上（大写字母/小写字母/数字/特殊符号)；windows不能包含用户名（administrator）中超过2个连续字符的部分。
	Password *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 子网 ID。
	SubnetID *string `required:"true"`

	// 机型。枚举值：Normal，表示普通；SSD，表示SSD；
	VMType *string `required:"true"`

	// VPC ID。
	VPCID *string `required:"true"`

	// 外网安全组 ID。输入“有效”状态的安全组的ID。
	WANSGID *string `required:"true"`
}

// CreateVMInstanceResponse is response schema for CreateVMInstance action
type CreateVMInstanceResponse struct {
	response.CommonBase

	// 返回创建数据盘的 ID
	DiskID string

	// 返回创建外网IP的 ID
	EIPID string

	// 返回信息描述。
	Message string

	// 返回创建虚拟机的 ID
	VMID string
}

// NewCreateVMInstanceRequest will create request of CreateVMInstance action.
func (c *UCloudStackClient) NewCreateVMInstanceRequest() *CreateVMInstanceRequest {
	req := &CreateVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateVMInstance

创建虚拟机
*/
func (c *UCloudStackClient) CreateVMInstance(req *CreateVMInstanceRequest) (*CreateVMInstanceResponse, error) {
	var err error
	var res CreateVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateVPCRequest is request schema for CreateVPC action
type CreateVPCRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 名称;
	Name *string `required:"true"`

	// 网段。例如：10.0.0.0/16；
	Network *string `required:"true"`

	// 描述;
	Remark *string `required:"false"`
}

// CreateVPCResponse is response schema for CreateVPC action
type CreateVPCResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string

	// 创建的VPCID；
	VPCID string
}

// NewCreateVPCRequest will create request of CreateVPC action.
func (c *UCloudStackClient) NewCreateVPCRequest() *CreateVPCRequest {
	req := &CreateVPCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateVPC

创建VPC
*/
func (c *UCloudStackClient) CreateVPC(req *CreateVPCRequest) (*CreateVPCResponse, error) {
	var err error
	var res CreateVPCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateVPC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateVSRequest is request schema for CreateVS action
type CreateVSRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// CA证书ID，用于验证客户端证书的签名，仅当VServer监听协议为 HTTPS 且 SSLMode 为双向认证时有效。
	CACertificateID *string `required:"false"`

	// HTTP 健康检查时校验请求的 HOST 字段中的域名。当健康检查类型为端口检查时，该值为空。
	Domain *string `required:"false"`

	// 健康检查类型，枚举值，Port:端口,Path:域名。TCP和UDP协议只支持Port类型。
	HealthcheckType *string `required:"true"`

	// 负载均衡的连接空闲超时时间，单位为秒，默认值为 60s 。
	KeepaliveTimeout *int `required:"false"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// HTTP 健康检查的路径，健康检查类型为 HTTP 检查时为必填项。当健康检查类型为端口检查时，该值为空。
	Path *string `required:"false"`

	// 会话保持KEY，会话保持类型为Manual时为必填项，仅当 VServer 协议为 HTTP 时有效。
	PersistenceKey *string `required:"false"`

	// 会话保持类型。枚举值：None:关闭；Auto:自动生成；Manual:手动生成 。当协议为 TCP 时，该值不生效，会话保持和选择的调度算法相关；当协议为 UDP 时 Auto 表示开启会话保持 。
	PersistenceType *string `required:"false"`

	// VServer 的监听端口。端口范围为 1~65535 ，其中 323、9102、9103、9104、9105、60909、60910 被系统占用。
	Port *int `required:"true"`

	// VServer 的监听协议。枚举值：支持 TCP、UDP、HTTP、HTTPS 四种协议转发。
	Protocol *string `required:"true"`

	// SSL认证模式,HTTPS协议下必传,取值范围["simplex","duplex"]分别表示单向认证和双向认证。
	SSLMode *string `required:"false"`

	// 负载均衡的调度算法。枚举值：wrr:加权轮训；least_conn:最小连接数；hash:原地址,四层lb使用。ip_hash:七层lb使用
	Scheduler *string `required:"true"`

	// 服务器证书ID，用于证明服务器的身份，仅当 VServer监听协议为 HTTPS时有效。
	ServerCertificateID *string `required:"false"`
}

// CreateVSResponse is response schema for CreateVS action
type CreateVSResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string

	// 返回创建的VSID
	VSID string
}

// NewCreateVSRequest will create request of CreateVS action.
func (c *UCloudStackClient) NewCreateVSRequest() *CreateVSRequest {
	req := &CreateVSRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateVS

创建负载均衡VServer
*/
func (c *UCloudStackClient) CreateVS(req *CreateVSRequest) (*CreateVSResponse, error) {
	var err error
	var res CreateVSResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateVS", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateVSPolicyRequest is request schema for CreateVSPolicy action
type CreateVSPolicyRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 内容转发规则关联的请求域名，值可为空，即代表仅匹配路径。域名和路径至少需要指定一项，且域名和路径的组合在一个 VServer 中必须唯一。
	Domain *string `required:"false"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// 内容转发规则关联的请求访问路径，如 "/" 。域名和路径至少需要指定一项，且域名和路径的组合在一个 VServer 中必须唯一。
	Path *string `required:"false"`

	// 【数组】内容转发规则应用的服务节点的 ID，来源于 VServer 中添加的服务节点。调用方式举例：RSIDs.0=“one-id”、RSIDs.1=“two-id”。
	RSIDs []string `required:"true"`

	// VServer的ID
	VSID *string `required:"true"`
}

// CreateVSPolicyResponse is response schema for CreateVSPolicy action
type CreateVSPolicyResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string

	// 返回创建的内容转发规则ID
	PolicyID string
}

// NewCreateVSPolicyRequest will create request of CreateVSPolicy action.
func (c *UCloudStackClient) NewCreateVSPolicyRequest() *CreateVSPolicyRequest {
	req := &CreateVSPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateVSPolicy

创建七层负载均衡内容转发规则，仅当 VServer 的监听协议为 HTTP 时有效。
*/
func (c *UCloudStackClient) CreateVSPolicy(req *CreateVSPolicyRequest) (*CreateVSPolicyResponse, error) {
	var err error
	var res CreateVSPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateVSPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteCertificateRequest is request schema for DeleteCertificate action
type DeleteCertificateRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 证书ID
	CertificateID *string `required:"true"`
}

// DeleteCertificateResponse is response schema for DeleteCertificate action
type DeleteCertificateResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewDeleteCertificateRequest will create request of DeleteCertificate action.
func (c *UCloudStackClient) NewDeleteCertificateRequest() *DeleteCertificateRequest {
	req := &DeleteCertificateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteCertificate

删除证书
*/
func (c *UCloudStackClient) DeleteCertificate(req *DeleteCertificateRequest) (*DeleteCertificateResponse, error) {
	var err error
	var res DeleteCertificateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteCertificate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteCustomImageRequest is request schema for DeleteCustomImage action
type DeleteCustomImageRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 自制镜像ID
	ImageID *string `required:"true"`
}

// DeleteCustomImageResponse is response schema for DeleteCustomImage action
type DeleteCustomImageResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDeleteCustomImageRequest will create request of DeleteCustomImage action.
func (c *UCloudStackClient) NewDeleteCustomImageRequest() *DeleteCustomImageRequest {
	req := &DeleteCustomImageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteCustomImage

删除自制镜像
*/
func (c *UCloudStackClient) DeleteCustomImage(req *DeleteCustomImageRequest) (*DeleteCustomImageResponse, error) {
	var err error
	var res DeleteCustomImageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteCustomImage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteDiskRequest is request schema for DeleteDisk action
type DeleteDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 被删除的硬盘ID
	DiskID *string `required:"true"`
}

// DeleteDiskResponse is response schema for DeleteDisk action
type DeleteDiskResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDeleteDiskRequest will create request of DeleteDisk action.
func (c *UCloudStackClient) NewDeleteDiskRequest() *DeleteDiskRequest {
	req := &DeleteDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteDisk

删除硬盘
*/
func (c *UCloudStackClient) DeleteDisk(req *DeleteDiskRequest) (*DeleteDiskResponse, error) {
	var err error
	var res DeleteDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteLBRequest is request schema for DeleteLB action
type DeleteLBRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 负载均衡ID
	LBID *string `required:"true"`
}

// DeleteLBResponse is response schema for DeleteLB action
type DeleteLBResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDeleteLBRequest will create request of DeleteLB action.
func (c *UCloudStackClient) NewDeleteLBRequest() *DeleteLBRequest {
	req := &DeleteLBRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteLB

删除负载均衡
*/
func (c *UCloudStackClient) DeleteLB(req *DeleteLBRequest) (*DeleteLBResponse, error) {
	var err error
	var res DeleteLBResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteLB", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteNATGWRequest is request schema for DeleteNATGW action
type DeleteNATGWRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// NAT网关ID
	NATGWID *string `required:"true"`
}

// DeleteNATGWResponse is response schema for DeleteNATGW action
type DeleteNATGWResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDeleteNATGWRequest will create request of DeleteNATGW action.
func (c *UCloudStackClient) NewDeleteNATGWRequest() *DeleteNATGWRequest {
	req := &DeleteNATGWRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteNATGW

删除NAT网关
*/
func (c *UCloudStackClient) DeleteNATGW(req *DeleteNATGWRequest) (*DeleteNATGWResponse, error) {
	var err error
	var res DeleteNATGWResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteNATGW", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteNATGWRuleRequest is request schema for DeleteNATGWRule action
type DeleteNATGWRuleRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// nat网关ID
	NATGWID *string `required:"true"`

	// 白名单ID
	RuleID *string `required:"true"`
}

// DeleteNATGWRuleResponse is response schema for DeleteNATGWRule action
type DeleteNATGWRuleResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDeleteNATGWRuleRequest will create request of DeleteNATGWRule action.
func (c *UCloudStackClient) NewDeleteNATGWRuleRequest() *DeleteNATGWRuleRequest {
	req := &DeleteNATGWRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteNATGWRule

删除NAT网关白名单
*/
func (c *UCloudStackClient) DeleteNATGWRule(req *DeleteNATGWRuleRequest) (*DeleteNATGWRuleResponse, error) {
	var err error
	var res DeleteNATGWRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteNATGWRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeletePhysicalIPRequest is request schema for DeletePhysicalIP action
type DeletePhysicalIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 物理IP的ID
	PhysicalIPID *string `required:"true"`
}

// DeletePhysicalIPResponse is response schema for DeletePhysicalIP action
type DeletePhysicalIPResponse struct {
	response.CommonBase

	// 返回状态描述
	Message string
}

// NewDeletePhysicalIPRequest will create request of DeletePhysicalIP action.
func (c *UCloudStackClient) NewDeletePhysicalIPRequest() *DeletePhysicalIPRequest {
	req := &DeletePhysicalIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeletePhysicalIP

删除物理IP
*/
func (c *UCloudStackClient) DeletePhysicalIP(req *DeletePhysicalIPRequest) (*DeletePhysicalIPResponse, error) {
	var err error
	var res DeletePhysicalIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeletePhysicalIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteRSRequest is request schema for DeleteRS action
type DeleteRSRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// RServer的ID
	RSID *string `required:"true"`

	// VServer的ID
	VSID *string `required:"true"`
}

// DeleteRSResponse is response schema for DeleteRS action
type DeleteRSResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDeleteRSRequest will create request of DeleteRS action.
func (c *UCloudStackClient) NewDeleteRSRequest() *DeleteRSRequest {
	req := &DeleteRSRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteRS

移除负载均衡的单个服务节点
*/
func (c *UCloudStackClient) DeleteRS(req *DeleteRSRequest) (*DeleteRSResponse, error) {
	var err error
	var res DeleteRSResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteRS", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSecurityGroupRequest is request schema for DeleteSecurityGroup action
type DeleteSecurityGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 安全组ID
	SGID *string `required:"true"`
}

// DeleteSecurityGroupResponse is response schema for DeleteSecurityGroup action
type DeleteSecurityGroupResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewDeleteSecurityGroupRequest will create request of DeleteSecurityGroup action.
func (c *UCloudStackClient) NewDeleteSecurityGroupRequest() *DeleteSecurityGroupRequest {
	req := &DeleteSecurityGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSecurityGroup

删除安全组
*/
func (c *UCloudStackClient) DeleteSecurityGroup(req *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error) {
	var err error
	var res DeleteSecurityGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSecurityGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSecurityGroupRuleRequest is request schema for DeleteSecurityGroupRule action
type DeleteSecurityGroupRuleRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 安全组ID
	SGID *string `required:"true"`

	// 安全组规则ID
	SGRuleID *string `required:"true"`
}

// DeleteSecurityGroupRuleResponse is response schema for DeleteSecurityGroupRule action
type DeleteSecurityGroupRuleResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewDeleteSecurityGroupRuleRequest will create request of DeleteSecurityGroupRule action.
func (c *UCloudStackClient) NewDeleteSecurityGroupRuleRequest() *DeleteSecurityGroupRuleRequest {
	req := &DeleteSecurityGroupRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSecurityGroupRule

删除安全组规则
*/
func (c *UCloudStackClient) DeleteSecurityGroupRule(req *DeleteSecurityGroupRuleRequest) (*DeleteSecurityGroupRuleResponse, error) {
	var err error
	var res DeleteSecurityGroupRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSecurityGroupRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSnapshotRequest is request schema for DeleteSnapshot action
type DeleteSnapshotRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：如 cn,表示中国。
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：如 zone-01，表示可用区1。
	// Zone *string `required:"true"`

	// 快照ID
	SnapshotID *string `required:"true"`
}

// DeleteSnapshotResponse is response schema for DeleteSnapshot action
type DeleteSnapshotResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewDeleteSnapshotRequest will create request of DeleteSnapshot action.
func (c *UCloudStackClient) NewDeleteSnapshotRequest() *DeleteSnapshotRequest {
	req := &DeleteSnapshotRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSnapshot

删除快照，仅支持状态为正常的快照进行删除操作。
*/
func (c *UCloudStackClient) DeleteSnapshot(req *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error) {
	var err error
	var res DeleteSnapshotResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSnapshot", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSubnetRequest is request schema for DeleteSubnet action
type DeleteSubnetRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// SubnetID
	SubnetID *string `required:"true"`
}

// DeleteSubnetResponse is response schema for DeleteSubnet action
type DeleteSubnetResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewDeleteSubnetRequest will create request of DeleteSubnet action.
func (c *UCloudStackClient) NewDeleteSubnetRequest() *DeleteSubnetRequest {
	req := &DeleteSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSubnet

删除子网
*/
func (c *UCloudStackClient) DeleteSubnet(req *DeleteSubnetRequest) (*DeleteSubnetResponse, error) {
	var err error
	var res DeleteSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteVMInstanceRequest is request schema for DeleteVMInstance action
type DeleteVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。 枚举值：cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 虚拟机 ID。输入有效的虚拟机 ID。
	VMID *string `required:"true"`
}

// DeleteVMInstanceResponse is response schema for DeleteVMInstance action
type DeleteVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDeleteVMInstanceRequest will create request of DeleteVMInstance action.
func (c *UCloudStackClient) NewDeleteVMInstanceRequest() *DeleteVMInstanceRequest {
	req := &DeleteVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteVMInstance

删除虚拟机
*/
func (c *UCloudStackClient) DeleteVMInstance(req *DeleteVMInstanceRequest) (*DeleteVMInstanceResponse, error) {
	var err error
	var res DeleteVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteVPCRequest is request schema for DeleteVPC action
type DeleteVPCRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// ID
	VPCID *string `required:"true"`
}

// DeleteVPCResponse is response schema for DeleteVPC action
type DeleteVPCResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewDeleteVPCRequest will create request of DeleteVPC action.
func (c *UCloudStackClient) NewDeleteVPCRequest() *DeleteVPCRequest {
	req := &DeleteVPCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteVPC

删除VPC
*/
func (c *UCloudStackClient) DeleteVPC(req *DeleteVPCRequest) (*DeleteVPCResponse, error) {
	var err error
	var res DeleteVPCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteVPC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteVSRequest is request schema for DeleteVS action
type DeleteVSRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// VServer 监听器所属的负载均衡 ID
	LBID *string `required:"true"`

	// 负载均衡VServer监听器ID
	VSID *string `required:"true"`
}

// DeleteVSResponse is response schema for DeleteVS action
type DeleteVSResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDeleteVSRequest will create request of DeleteVS action.
func (c *UCloudStackClient) NewDeleteVSRequest() *DeleteVSRequest {
	req := &DeleteVSRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteVS

删除VServer
*/
func (c *UCloudStackClient) DeleteVS(req *DeleteVSRequest) (*DeleteVSResponse, error) {
	var err error
	var res DeleteVSResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteVS", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteVSPolicyRequest is request schema for DeleteVSPolicy action
type DeleteVSPolicyRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// 内容转发规则ID
	PolicyID *string `required:"true"`

	// VServer的ID
	VSID *string `required:"true"`
}

// DeleteVSPolicyResponse is response schema for DeleteVSPolicy action
type DeleteVSPolicyResponse struct {
	response.CommonBase

	// 【该字段已废弃，请谨慎使用】
	Action string `deprecated:"true"`

	// 返回信息描述。
	Message string

	// 【该字段已废弃，请谨慎使用】
	RetCode int `deprecated:"true"`
}

// NewDeleteVSPolicyRequest will create request of DeleteVSPolicy action.
func (c *UCloudStackClient) NewDeleteVSPolicyRequest() *DeleteVSPolicyRequest {
	req := &DeleteVSPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteVSPolicy

删除七层负载均衡内容转发规则，仅当 VServer 的监听协议为 HTTP 时有效。
*/
func (c *UCloudStackClient) DeleteVSPolicy(req *DeleteVSPolicyRequest) (*DeleteVSPolicyResponse, error) {
	var err error
	var res DeleteVSPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteVSPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeCertificateRequest is request schema for DescribeCertificate action
type DescribeCertificateRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 证书ID列表
	CertificateIDs []string `required:"false"`

	// 证书类型，枚举值["ServerCrt","CACrt"]。分别表示服务器证书和CA证书。
	CertificateType *string `required:"false"`

	// 返回数据长度，默认为20，最大100
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0
	Offset *int `required:"false"`
}

// DescribeCertificateResponse is response schema for DescribeCertificate action
type DescribeCertificateResponse struct {
	response.CommonBase

	// [数组]证书对象数组
	Infos []CertificateInfo

	// 返回信息描述
	Message string

	// 证书总个数
	TotalCount int
}

// NewDescribeCertificateRequest will create request of DescribeCertificate action.
func (c *UCloudStackClient) NewDescribeCertificateRequest() *DescribeCertificateRequest {
	req := &DescribeCertificateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeCertificate

查询证书
*/
func (c *UCloudStackClient) DescribeCertificate(req *DescribeCertificateRequest) (*DescribeCertificateResponse, error) {
	var err error
	var res DescribeCertificateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeCertificate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeDiskRequest is request schema for DescribeDisk action
type DescribeDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】磁盘的 ID。输入有效的 ID。调用方式举例：DiskIDs.0=“one-id”、DiskIDs.1=“two-id”。
	DiskIDs []string `required:"false"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`
}

// DescribeDiskResponse is response schema for DescribeDisk action
type DescribeDiskResponse struct {
	response.CommonBase

	// 【数组】返回磁盘对象数组
	Infos []DiskInfo

	// 返回信息描述。
	Message string

	// 返回磁盘总个数。
	TotalCount int
}

// NewDescribeDiskRequest will create request of DescribeDisk action.
func (c *UCloudStackClient) NewDescribeDiskRequest() *DescribeDiskRequest {
	req := &DescribeDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeDisk

获取硬盘信息
*/
func (c *UCloudStackClient) DescribeDisk(req *DescribeDiskRequest) (*DescribeDiskResponse, error) {
	var err error
	var res DescribeDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeEIPRequest is request schema for DescribeEIP action
type DescribeEIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】外网的 ID。输入有效的 ID。调用方式举例：EIPIDs.0=“one-id”、EIPIDs.1=“two-id”
	EIPIDs []string `required:"false"`

	// 返回数据长度，默认为20，最大100。
	Limit *string `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *string `required:"false"`
}

// DescribeEIPResponse is response schema for DescribeEIP action
type DescribeEIPResponse struct {
	response.CommonBase

	// 外网IP数组
	Infos []EIPInfo

	// 返回信息描述
	Message string

	// 返回现有外网IP总数
	Totalcount int
}

// NewDescribeEIPRequest will create request of DescribeEIP action.
func (c *UCloudStackClient) NewDescribeEIPRequest() *DescribeEIPRequest {
	req := &DescribeEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeEIP

获取外网IP的信息
*/
func (c *UCloudStackClient) DescribeEIP(req *DescribeEIPRequest) (*DescribeEIPResponse, error) {
	var err error
	var res DescribeEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeImageRequest is request schema for DescribeImage action
type DescribeImageRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】镜像的 ID。输入有效的 ID。调用方式举例：ImageIDs.0=“one-id”、ImageIDs.1=“two-id”。
	ImageIDs []string `required:"false"`

	// 镜像类型。枚举值：Base(基础镜像，平台默认提供的镜像)，Custom(自制镜像，通过虚拟机导出的镜像) 。若该值为空，默认查询所有镜像。
	ImageType *string `required:"false"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`
}

// DescribeImageResponse is response schema for DescribeImage action
type DescribeImageResponse struct {
	response.CommonBase

	// 操作名称
	Action string

	// 【数组】返回镜像对象数组
	Infos []ImageInfo

	// 返回信息描述。
	Message string

	// 返回码
	RetCode int

	// 返回镜像的总个数。
	TotalCount int
}

// NewDescribeImageRequest will create request of DescribeImage action.
func (c *UCloudStackClient) NewDescribeImageRequest() *DescribeImageRequest {
	req := &DescribeImageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeImage

获取镜像信息，包括默认镜像和自制镜像。
*/
func (c *UCloudStackClient) DescribeImage(req *DescribeImageRequest) (*DescribeImageResponse, error) {
	var err error
	var res DescribeImageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeImage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeLBRequest is request schema for DescribeLB action
type DescribeLBRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】负载均衡的 ID。调用方式举例：LBIDs.0=“one-id”、LBIDs.1=“two-id”。
	LBIDs []string `required:"false"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 子网ID
	SubnetID *string `required:"false"`

	// VPCID
	VPCID *string `required:"false"`
}

// DescribeLBResponse is response schema for DescribeLB action
type DescribeLBResponse struct {
	response.CommonBase

	// 【数组】返回负载均衡对象数组
	Infos []LBInfo

	// 返回信息描述。
	Message string

	// 返回负载均衡总个数。
	TotalCount int
}

// NewDescribeLBRequest will create request of DescribeLB action.
func (c *UCloudStackClient) NewDescribeLBRequest() *DescribeLBRequest {
	req := &DescribeLBRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeLB

获取负载均衡信息
*/
func (c *UCloudStackClient) DescribeLB(req *DescribeLBRequest) (*DescribeLBResponse, error) {
	var err error
	var res DescribeLBResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeLB", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeMetricRequest is request schema for DescribeMetric action
type DescribeMetricRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，中国；
	// Zone *string `required:"true"`

	// 开始时间。使用unix时间戳
	BeginTime *string `required:"true"`

	// 结束时间。使用Unix时间戳
	EndTime *string `required:"true"`

	// 监控指标。1. 获取虚拟机监控信息调用举例，MetricName.0="CPUUtilization"、MetricName.0="MemUsage"。虚拟机监控指标枚举值：BlockProcessCount，表示阻塞进程数；CPUUtilization，表示CPU使用率；DiskReadOps，表示磁盘读次数；DiskWriteOps，表示磁盘写次数；IORead，表示磁盘读吞吐；IOWrite，表示磁盘写吞吐；LoadAvg，表示平均负载1分钟；MemUsage，表示内存使用率；NetPacketIn，表示网卡入包量；NetPacketOut，表示网卡出包量；NICIn，表示网卡入带宽；NICOut，表示网卡出带宽；SpaceUsage，表示空间使用率；TCPConnectCount，表示TCP连接数；2. EIP监控指标：NetPacketIn：入包量；NetPacketOut：出包量；NICIn：入带宽；NICOut：出带宽；NICOutUsage：出带宽使用率；
	MetricName []string `required:"true"`

	// 资源ID
	ResourceID *string `required:"true"`

	// 资源类型。VM：虚拟机；EIP：弹性IP
	ResourceType *string `required:"true"`
}

// DescribeMetricResponse is response schema for DescribeMetric action
type DescribeMetricResponse struct {
	response.CommonBase

	// 返回信息列表
	Infos []MetricInfo

	// 返回信息描述
	Message string

	// 返回监控信息条数
	TotalCount int
}

// NewDescribeMetricRequest will create request of DescribeMetric action.
func (c *UCloudStackClient) NewDescribeMetricRequest() *DescribeMetricRequest {
	req := &DescribeMetricRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeMetric

获取资源监控信息
*/
func (c *UCloudStackClient) DescribeMetric(req *DescribeMetricRequest) (*DescribeMetricResponse, error) {
	var err error
	var res DescribeMetricResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeMetric", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNATGWRequest is request schema for DescribeNATGW action
type DescribeNATGWRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 【数组】NAT网关的 ID。调用方式举例：NATGWIDs.0=“one-id”、NATGWIDs.1=“two-id”。
	NATGWIDs []string `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`
}

// DescribeNATGWResponse is response schema for DescribeNATGW action
type DescribeNATGWResponse struct {
	response.CommonBase

	// 【数组】返回nat网关对象数组
	Infos []NATGWInfo

	// 返回信息描述。
	Message string

	// 返回NAT网关总个数
	TotalCount int
}

// NewDescribeNATGWRequest will create request of DescribeNATGW action.
func (c *UCloudStackClient) NewDescribeNATGWRequest() *DescribeNATGWRequest {
	req := &DescribeNATGWRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNATGW

获取NAT网关信息
*/
func (c *UCloudStackClient) DescribeNATGW(req *DescribeNATGWRequest) (*DescribeNATGWResponse, error) {
	var err error
	var res DescribeNATGWResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNATGW", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeNATGWRuleRequest is request schema for DescribeNATGWRule action
type DescribeNATGWRuleRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】NAT网关白名单资源ID。调用方式举例：NATGWRules.0=“one-id”、NATGWRules.1=“two-id”。
	BindResourceIDs []string `required:"false"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// NAT网关ID
	NATGWID *string `required:"true"`

	// NAT类型。枚举值：SNAT，DNAT
	NATGWType *string `required:"true"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】NAT网关白名单ID。调用方式举例：NATGWRules.0=“one-id”、NATGWRules.1=“two-id”。
	RuleIDs []string `required:"false"`
}

// DescribeNATGWRuleResponse is response schema for DescribeNATGWRule action
type DescribeNATGWRuleResponse struct {
	response.CommonBase

	// 【数组】返回nat网关白名单对象数组
	Infos []NATGWRuleInfo

	// 返回信息描述。
	Message string

	// 返回NAT网关白名单资源总个数。
	TotalCount int
}

// NewDescribeNATGWRuleRequest will create request of DescribeNATGWRule action.
func (c *UCloudStackClient) NewDescribeNATGWRuleRequest() *DescribeNATGWRuleRequest {
	req := &DescribeNATGWRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeNATGWRule

获取NAT网关白名单信息
*/
func (c *UCloudStackClient) DescribeNATGWRule(req *DescribeNATGWRuleRequest) (*DescribeNATGWRuleResponse, error) {
	var err error
	var res DescribeNATGWRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeNATGWRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeOPLogsRequest is request schema for DescribeOPLogs action
type DescribeOPLogsRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 开始时间
	BeginTime *int `required:"true"`

	// 结束时间
	EndTime *int `required:"true"`

	// 是否操作成功
	IsSuccess *string `required:"false"`

	//
	Limit *int `required:"false"`

	//
	Offset *int `required:"false"`

	// 资源ID
	ResourceID *string `required:"false"`

	// 资源类型
	ResourceType *string `required:"false"`
}

// DescribeOPLogsResponse is response schema for DescribeOPLogs action
type DescribeOPLogsResponse struct {
	response.CommonBase

	//
	Infos []OPLogInfo

	// 错误信息
	Message string

	// 总数
	TotalCount int
}

// NewDescribeOPLogsRequest will create request of DescribeOPLogs action.
func (c *UCloudStackClient) NewDescribeOPLogsRequest() *DescribeOPLogsRequest {
	req := &DescribeOPLogsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeOPLogs

查询操作日志
*/
func (c *UCloudStackClient) DescribeOPLogs(req *DescribeOPLogsRequest) (*DescribeOPLogsResponse, error) {
	var err error
	var res DescribeOPLogsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeOPLogs", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribePhysicalIPRequest is request schema for DescribePhysicalIP action
type DescribePhysicalIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *string `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *string `required:"false"`

	// 【数组】物理IP的 ID。输入有效的 ID。调用方式举例：PhysicalIPIDs.0=“one-id”、PhysicalIPIDs.1=“two-id”
	PhysicalIPIDs []string `required:"false"`
}

// DescribePhysicalIPResponse is response schema for DescribePhysicalIP action
type DescribePhysicalIPResponse struct {
	response.CommonBase

	// 物理IP数组
	Infos []PhysicalIPInfo

	// 返回信息描述
	Message string

	// 返回现有物理IP总数
	TotalCount int
}

// NewDescribePhysicalIPRequest will create request of DescribePhysicalIP action.
func (c *UCloudStackClient) NewDescribePhysicalIPRequest() *DescribePhysicalIPRequest {
	req := &DescribePhysicalIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribePhysicalIP

获取物理IP信息
*/
func (c *UCloudStackClient) DescribePhysicalIP(req *DescribePhysicalIPRequest) (*DescribePhysicalIPResponse, error) {
	var err error
	var res DescribePhysicalIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribePhysicalIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeRSRequest is request schema for DescribeRS action
type DescribeRSRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】RServer的 ID。调用方式举例：RSIDs.0=“one-id”、RSIDs.1=“two-id”。
	RSIDs []string `required:"false"`

	// VServer的ID
	VSID *string `required:"false"`
}

// DescribeRSResponse is response schema for DescribeRS action
type DescribeRSResponse struct {
	response.CommonBase

	// 【数组】返回VServer对象数组
	Infos []RSInfo

	// 返回信息描述。
	Message string

	// 返回该负载均衡下VServer的总个数。
	TotalCount int
}

// NewDescribeRSRequest will create request of DescribeRS action.
func (c *UCloudStackClient) NewDescribeRSRequest() *DescribeRSRequest {
	req := &DescribeRSRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeRS

获取负载均衡服务的服务节点信息
*/
func (c *UCloudStackClient) DescribeRS(req *DescribeRSRequest) (*DescribeRSResponse, error) {
	var err error
	var res DescribeRSResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeRS", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeRecycledResourceRequest is request schema for DescribeRecycledResource action
type DescribeRecycledResourceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：如 cn,表示中国。
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：如 zone-01，表示可用区1。
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】资源ID，输入“有效”的ID。调用方式举例：ResourceIDs.0=“one-id”、ResourceIDs.1=“two-id”。
	ResourceIDs []string `required:"false"`
}

// DescribeRecycledResourceResponse is response schema for DescribeRecycledResource action
type DescribeRecycledResourceResponse struct {
	response.CommonBase

	// 【数组】返回资源对象数组
	Infos []RecycledResourceInfo

	// 返回回收站资源的总个数
	TotalCount int
}

// NewDescribeRecycledResourceRequest will create request of DescribeRecycledResource action.
func (c *UCloudStackClient) NewDescribeRecycledResourceRequest() *DescribeRecycledResourceRequest {
	req := &DescribeRecycledResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeRecycledResource

查询回收站资源
*/
func (c *UCloudStackClient) DescribeRecycledResource(req *DescribeRecycledResourceRequest) (*DescribeRecycledResourceResponse, error) {
	var err error
	var res DescribeRecycledResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeRecycledResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSecurityGroupRequest is request schema for DescribeSecurityGroup action
type DescribeSecurityGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】安全组的 ID。输入有效的 ID。调用方式举例：SGIDs.0=“one-id”、SGIDs.1=“two-id”
	SGIDs []string `required:"false"`
}

// DescribeSecurityGroupResponse is response schema for DescribeSecurityGroup action
type DescribeSecurityGroupResponse struct {
	response.CommonBase

	// 安全组信息列表
	Infos []SGInfo

	// 返回信息描述；
	Message string

	// 安全组的总数
	TotalCount int
}

// NewDescribeSecurityGroupRequest will create request of DescribeSecurityGroup action.
func (c *UCloudStackClient) NewDescribeSecurityGroupRequest() *DescribeSecurityGroupRequest {
	req := &DescribeSecurityGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSecurityGroup

查询安全组信息
*/
func (c *UCloudStackClient) DescribeSecurityGroup(req *DescribeSecurityGroupRequest) (*DescribeSecurityGroupResponse, error) {
	var err error
	var res DescribeSecurityGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSecurityGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeStorageTypeRequest is request schema for DescribeStorageType action
type DescribeStorageTypeRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

}

// DescribeStorageTypeResponse is response schema for DescribeStorageType action
type DescribeStorageTypeResponse struct {
	response.CommonBase

	// 存储类型的信息列表
	Infos []StorageTypeInfo

	// 返回信息描述；
	Message string

	// 存储类型的总数
	TotalCount int
}

// NewDescribeStorageTypeRequest will create request of DescribeStorageType action.
func (c *UCloudStackClient) NewDescribeStorageTypeRequest() *DescribeStorageTypeRequest {
	req := &DescribeStorageTypeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeStorageType

查询存储类型
*/
func (c *UCloudStackClient) DescribeStorageType(req *DescribeStorageTypeRequest) (*DescribeStorageTypeResponse, error) {
	var err error
	var res DescribeStorageTypeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeStorageType", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSubnetRequest is request schema for DescribeSubnet action
type DescribeSubnetRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】子网 ID。调用方式举例：SubnetIDs.0=“one-id”、SubnetIDs.1=“two-id”
	SubnetIDs []string `required:"false"`

	// VPCID
	VPCID *string `required:"false"`
}

// DescribeSubnetResponse is response schema for DescribeSubnet action
type DescribeSubnetResponse struct {
	response.CommonBase

	// 子网信息列表
	Infos []SubnetInfo

	// 返回信息描述；
	Message string

	// 子网的总数
	TotalCount int
}

// NewDescribeSubnetRequest will create request of DescribeSubnet action.
func (c *UCloudStackClient) NewDescribeSubnetRequest() *DescribeSubnetRequest {
	req := &DescribeSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSubnet

查询子网信息
*/
func (c *UCloudStackClient) DescribeSubnet(req *DescribeSubnetRequest) (*DescribeSubnetResponse, error) {
	var err error
	var res DescribeSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUserRequest is request schema for DescribeUser action
type DescribeUserRequest struct {
	request.CommonBase

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】租户的 ID。输入有效的 ID。调用方式举例：UserIDs.0=123”、UserIDs.1=456
	UserIDs []int `required:"false"`
}

// DescribeUserResponse is response schema for DescribeUser action
type DescribeUserResponse struct {
	response.CommonBase

	// 【数组】返回租户对象数组
	Infos []UserInfo

	// 返回信息描述
	Message string

	// 返回现有租户总数
	TotalCount int
}

// NewDescribeUserRequest will create request of DescribeUser action.
func (c *UCloudStackClient) NewDescribeUserRequest() *DescribeUserRequest {
	req := &DescribeUserRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUser

查询租户信息
*/
func (c *UCloudStackClient) DescribeUser(req *DescribeUserRequest) (*DescribeUserResponse, error) {
	var err error
	var res DescribeUserResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUser", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVMInstanceRequest is request schema for DescribeVMInstance action
type DescribeVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *string `required:"false"`

	// 子网 ID。输入“有效”状态的子网 ID。
	SubnetID *string `required:"false"`

	// 【数组】虚拟机的 ID。输入有效的 ID。调用方式举例：PrivateIp.0=“one-id”、PrivateIp.1=“two-id”。
	VMIDs []string `required:"false"`

	// VPC ID。输入“有效”状态的VPC ID。
	VPCID *string `required:"false"`
}

// DescribeVMInstanceResponse is response schema for DescribeVMInstance action
type DescribeVMInstanceResponse struct {
	response.CommonBase

	// 【数组】返回虚拟机对象数组
	Infos []VMInstanceInfo

	// 返回信息描述
	Message string

	// 返回虚拟机总个数
	TotalCount int
}

// NewDescribeVMInstanceRequest will create request of DescribeVMInstance action.
func (c *UCloudStackClient) NewDescribeVMInstanceRequest() *DescribeVMInstanceRequest {
	req := &DescribeVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVMInstance

查询虚拟机
*/
func (c *UCloudStackClient) DescribeVMInstance(req *DescribeVMInstanceRequest) (*DescribeVMInstanceResponse, error) {
	var err error
	var res DescribeVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVMTypeRequest is request schema for DescribeVMType action
type DescribeVMTypeRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

}

// DescribeVMTypeResponse is response schema for DescribeVMType action
type DescribeVMTypeResponse struct {
	response.CommonBase

	// 主机机型的信息列表
	Infos []VMTypeInfo

	// 返回信息描述；
	Message string

	// 主机机型的总数
	TotalCount int
}

// NewDescribeVMTypeRequest will create request of DescribeVMType action.
func (c *UCloudStackClient) NewDescribeVMTypeRequest() *DescribeVMTypeRequest {
	req := &DescribeVMTypeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVMType

查询主机机型
*/
func (c *UCloudStackClient) DescribeVMType(req *DescribeVMTypeRequest) (*DescribeVMTypeResponse, error) {
	var err error
	var res DescribeVMTypeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVMType", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVPCRequest is request schema for DescribeVPC action
type DescribeVPCRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】VPC的 ID。调用方式举例：VPCIDs.0=“one-id”、VPCIDs.1=“two-id”
	VPCIDs []string `required:"false"`
}

// DescribeVPCResponse is response schema for DescribeVPC action
type DescribeVPCResponse struct {
	response.CommonBase

	// VPC信息列表
	Infos []VPCInfo

	// 返回信息描述；
	Message string

	// VPC的总数
	TotalCount int
}

// NewDescribeVPCRequest will create request of DescribeVPC action.
func (c *UCloudStackClient) NewDescribeVPCRequest() *DescribeVPCRequest {
	req := &DescribeVPCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVPC

查询VPC信息
*/
func (c *UCloudStackClient) DescribeVPC(req *DescribeVPCRequest) (*DescribeVPCResponse, error) {
	var err error
	var res DescribeVPCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVPC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVSRequest is request schema for DescribeVS action
type DescribeVSRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】VServer的 ID。调用方式举例：VSIDs.0=“one-id”、VSIDs.1=“two-id”。
	VSIDs []string `required:"false"`
}

// DescribeVSResponse is response schema for DescribeVS action
type DescribeVSResponse struct {
	response.CommonBase

	// 【数组】返回VServer对象数组
	Infos []VSInfo

	// 返回信息描述。
	Message string

	// 返回当前负载均衡 VServer 总个数。
	TotalCount int
}

// NewDescribeVSRequest will create request of DescribeVS action.
func (c *UCloudStackClient) NewDescribeVSRequest() *DescribeVSRequest {
	req := &DescribeVSRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVS

获取负载均衡 VServer 信息
*/
func (c *UCloudStackClient) DescribeVS(req *DescribeVSRequest) (*DescribeVSResponse, error) {
	var err error
	var res DescribeVSResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVS", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVSPolicyRequest is request schema for DescribeVSPolicy action
type DescribeVSPolicyRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】七层负载均衡内容转发规则的 ID。调用方式举例：PolicyIDs.0=“one-id”、PolicyIDs.1=“two-id”
	PolicyIDs []string `required:"false"`

	// VServerID
	VSID *string `required:"false"`
}

// DescribeVSPolicyResponse is response schema for DescribeVSPolicy action
type DescribeVSPolicyResponse struct {
	response.CommonBase

	// 【数组】返回内容分转发规则对象数组
	Infos []VSPolicyInfo

	// 返回信息描述。
	Message string

	// 返回内容转发规则的总个数。
	TotalCount int
}

// NewDescribeVSPolicyRequest will create request of DescribeVSPolicy action.
func (c *UCloudStackClient) NewDescribeVSPolicyRequest() *DescribeVSPolicyRequest {
	req := &DescribeVSPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVSPolicy

获取七层负载均衡内容转发规则信息，仅当 VServer 的监听协议为 HTTP 时有效。
*/
func (c *UCloudStackClient) DescribeVSPolicy(req *DescribeVSPolicyRequest) (*DescribeVSPolicyResponse, error) {
	var err error
	var res DescribeVSPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVSPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DetachDiskRequest is request schema for DetachDisk action
type DetachDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 硬盘ID
	DiskID *string `required:"true"`

	// 绑定的资源ID
	ResourceID *string `required:"true"`
}

// DetachDiskResponse is response schema for DetachDisk action
type DetachDiskResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDetachDiskRequest will create request of DetachDisk action.
func (c *UCloudStackClient) NewDetachDiskRequest() *DetachDiskRequest {
	req := &DetachDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DetachDisk

解绑UClouStack硬盘
*/
func (c *UCloudStackClient) DetachDisk(req *DetachDiskRequest) (*DetachDiskResponse, error) {
	var err error
	var res DetachDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DetachDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DisableRSRequest is request schema for DisableRS action
type DisableRSRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// RServer的ID
	RSID *string `required:"true"`

	// VServer的ID
	VSID *string `required:"true"`
}

// DisableRSResponse is response schema for DisableRS action
type DisableRSResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDisableRSRequest will create request of DisableRS action.
func (c *UCloudStackClient) NewDisableRSRequest() *DisableRSRequest {
	req := &DisableRSRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DisableRS

禁用负载均衡的单个服务节点
*/
func (c *UCloudStackClient) DisableRS(req *DisableRSRequest) (*DisableRSResponse, error) {
	var err error
	var res DisableRSResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DisableRS", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// EnableRSRequest is request schema for EnableRS action
type EnableRSRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// RServer的ID
	RSID *string `required:"true"`

	// VServer的ID
	VSID *string `required:"true"`
}

// EnableRSResponse is response schema for EnableRS action
type EnableRSResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewEnableRSRequest will create request of EnableRS action.
func (c *UCloudStackClient) NewEnableRSRequest() *EnableRSRequest {
	req := &EnableRSRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: EnableRS

启用负载均衡的单个服务节点
*/
func (c *UCloudStackClient) EnableRS(req *EnableRSRequest) (*EnableRSResponse, error) {
	var err error
	var res EnableRSResponse

	reqCopier := *req

	err = c.Client.InvokeAction("EnableRS", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetDiskPriceRequest is request schema for GetDiskPrice action
type GetDiskPriceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 磁盘大小
	DiskSpace *int `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 磁盘类型
	SetType *string `required:"true"`
}

// GetDiskPriceResponse is response schema for GetDiskPrice action
type GetDiskPriceResponse struct {
	response.CommonBase

	// 价格信息
	Infos []PriceInfo

	// 返回信息描述。
	Message string
}

// NewGetDiskPriceRequest will create request of GetDiskPrice action.
func (c *UCloudStackClient) NewGetDiskPriceRequest() *GetDiskPriceRequest {
	req := &GetDiskPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetDiskPrice

获取硬盘价格
*/
func (c *UCloudStackClient) GetDiskPrice(req *GetDiskPriceRequest) (*GetDiskPriceResponse, error) {
	var err error
	var res GetDiskPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetDiskPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetEIPPriceRequest is request schema for GetEIPPrice action
type GetEIPPriceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 带宽，默认值1，默认范围1~100
	Bandwidth *int `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 线路。目前支持Bgp
	OpertatorName *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`
}

// GetEIPPriceResponse is response schema for GetEIPPrice action
type GetEIPPriceResponse struct {
	response.CommonBase

	// 返回的价格信息
	Infos []PriceInfo

	// 返回信息描述
	Message string
}

// NewGetEIPPriceRequest will create request of GetEIPPrice action.
func (c *UCloudStackClient) NewGetEIPPriceRequest() *GetEIPPriceRequest {
	req := &GetEIPPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetEIPPrice

获取外网IP价格
*/
func (c *UCloudStackClient) GetEIPPrice(req *GetEIPPriceRequest) (*GetEIPPriceResponse, error) {
	var err error
	var res GetEIPPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetEIPPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetVMInstancePriceRequest is request schema for GetVMInstancePrice action
type GetVMInstancePriceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 系统盘类型。枚举值：Normal，表示普通；SSD，表示SSD；
	BootDiskSetType *string `required:"true"`

	// CPU 个数，目前只能输入数据库配置指定规格参数，如：1核2048M、2核4096M、4核8192M、8核16384M、16核32768M。
	CPU *int `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 数据盘类型。枚举值：Normal，表示普通；SSD，表示SSD；
	DataDiskSetType *string `required:"true"`

	// 数据盘大小，单位 GB。默认值为0。范围：【0，8000】，步长10。
	DataDiskSpace *int `required:"true"`

	// GPU 卡核心的占用个数。枚举值：【1,2,4】。GPU与CPU、内存大小关系：CPU个数>=4*GPU个数，同时内存与CPU规格匹配.
	GPU *int `required:"false"`

	// 镜像 ID。基础镜像 ID 或者自制镜像 ID。如：cn-image-centos-74。
	ImageID *string `required:"true"`

	// 内存大小，单位 M。目前只能输入数据库配置指定规格参数，如：1核2048M、2核4096M、4核8192M、8核16384M、16核32768M。
	Memory *int `required:"true"`

	// 系统类型。
	OSType *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 机型。枚举值：Normal，表示普通；SSD，表示SSD；
	VMType *string `required:"true"`
}

// GetVMInstancePriceResponse is response schema for GetVMInstancePrice action
type GetVMInstancePriceResponse struct {
	response.CommonBase

	// 返回的价格信息
	Infos []PriceInfo

	// 返回信息描述。
	Message string
}

// NewGetVMInstancePriceRequest will create request of GetVMInstancePrice action.
func (c *UCloudStackClient) NewGetVMInstancePriceRequest() *GetVMInstancePriceRequest {
	req := &GetVMInstancePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetVMInstancePrice

获取虚拟机价格
*/
func (c *UCloudStackClient) GetVMInstancePrice(req *GetVMInstancePriceRequest) (*GetVMInstancePriceResponse, error) {
	var err error
	var res GetVMInstancePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetVMInstancePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyEIPBandwidthRequest is request schema for ModifyEIPBandwidth action
type ModifyEIPBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 调整后的带宽
	Bandwidth *int `required:"true"`

	// 外网IP的ID
	EIPID *string `required:"true"`
}

// ModifyEIPBandwidthResponse is response schema for ModifyEIPBandwidth action
type ModifyEIPBandwidthResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewModifyEIPBandwidthRequest will create request of ModifyEIPBandwidth action.
func (c *UCloudStackClient) NewModifyEIPBandwidthRequest() *ModifyEIPBandwidthRequest {
	req := &ModifyEIPBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyEIPBandwidth

调整外网IP带宽
*/
func (c *UCloudStackClient) ModifyEIPBandwidth(req *ModifyEIPBandwidthRequest) (*ModifyEIPBandwidthResponse, error) {
	var err error
	var res ModifyEIPBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyEIPBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyNameAndRemarkRequest is request schema for ModifyNameAndRemark action
type ModifyNameAndRemarkRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 名称;
	Name *string `required:"true"`

	// 描述;
	Remark *string `required:"false"`

	// 资源ID;
	ResourceID *string `required:"true"`
}

// ModifyNameAndRemarkResponse is response schema for ModifyNameAndRemark action
type ModifyNameAndRemarkResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewModifyNameAndRemarkRequest will create request of ModifyNameAndRemark action.
func (c *UCloudStackClient) NewModifyNameAndRemarkRequest() *ModifyNameAndRemarkRequest {
	req := &ModifyNameAndRemarkRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyNameAndRemark

修改资源名称和备注
*/
func (c *UCloudStackClient) ModifyNameAndRemark(req *ModifyNameAndRemarkRequest) (*ModifyNameAndRemarkResponse, error) {
	var err error
	var res ModifyNameAndRemarkResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyNameAndRemark", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// PoweroffVMInstanceRequest is request schema for PoweroffVMInstance action
type PoweroffVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：如 cn,表示中国。
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：如 zone-01，表示可用区1。
	// Zone *string `required:"true"`

	// 虚拟机ID
	VMID *string `required:"true"`
}

// PoweroffVMInstanceResponse is response schema for PoweroffVMInstance action
type PoweroffVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewPoweroffVMInstanceRequest will create request of PoweroffVMInstance action.
func (c *UCloudStackClient) NewPoweroffVMInstanceRequest() *PoweroffVMInstanceRequest {
	req := &PoweroffVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: PoweroffVMInstance

断电虚拟机，可能导致丢失数据甚至损坏操作系统，仅适用于虚拟机死机及级端测试场景。
*/
func (c *UCloudStackClient) PoweroffVMInstance(req *PoweroffVMInstanceRequest) (*PoweroffVMInstanceResponse, error) {
	var err error
	var res PoweroffVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("PoweroffVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RechargeRequest is request schema for Recharge action
type RechargeRequest struct {
	request.CommonBase

	// 充值金额。最少100,最大500000
	Amount *int `required:"true"`

	// 充值来源。INPOUR_FROM_ALIPAY：支付宝，INPOUR_FROM_OFFLINE：银行转账，INPOUR_FROM_SINPAY：新浪支付，INPOUR_FROM_WECHAT_PAY：微信转账。
	FromType *string `required:"true"`

	// 充值单号。充值方式为“账户余额”时为必要参数。
	SerialNo *string `required:"true"`

	// 租户的账户ID。
	UserID *int `required:"true"`
}

// RechargeResponse is response schema for Recharge action
type RechargeResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewRechargeRequest will create request of Recharge action.
func (c *UCloudStackClient) NewRechargeRequest() *RechargeRequest {
	req := &RechargeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: Recharge

管理员给租户充值
*/
func (c *UCloudStackClient) Recharge(req *RechargeRequest) (*RechargeResponse, error) {
	var err error
	var res RechargeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("Recharge", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ReinstallVMInstanceRequest is request schema for ReinstallVMInstance action
type ReinstallVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 镜像ID
	ImageID *string `required:"true"`

	// 虚拟机ID
	VMID *string `required:"true"`
}

// ReinstallVMInstanceResponse is response schema for ReinstallVMInstance action
type ReinstallVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewReinstallVMInstanceRequest will create request of ReinstallVMInstance action.
func (c *UCloudStackClient) NewReinstallVMInstanceRequest() *ReinstallVMInstanceRequest {
	req := &ReinstallVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ReinstallVMInstance

重装系统，关机的虚拟机才可以重装系统
*/
func (c *UCloudStackClient) ReinstallVMInstance(req *ReinstallVMInstanceRequest) (*ReinstallVMInstanceResponse, error) {
	var err error
	var res ReinstallVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ReinstallVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ReleaseEIPRequest is request schema for ReleaseEIP action
type ReleaseEIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；中国
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国
	// Zone *string `required:"true"`

	// 外网IP的ID
	EIPID *string `required:"true"`
}

// ReleaseEIPResponse is response schema for ReleaseEIP action
type ReleaseEIPResponse struct {
	response.CommonBase

	// 返回状态描述
	Message string
}

// NewReleaseEIPRequest will create request of ReleaseEIP action.
func (c *UCloudStackClient) NewReleaseEIPRequest() *ReleaseEIPRequest {
	req := &ReleaseEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ReleaseEIP

删除外网IP
*/
func (c *UCloudStackClient) ReleaseEIP(req *ReleaseEIPRequest) (*ReleaseEIPResponse, error) {
	var err error
	var res ReleaseEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ReleaseEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RenewResourceRequest is request schema for RenewResource action
type RenewResourceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：如 cn,表示中国。
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：如 zone-01，表示可用区1。
	// Zone *string `required:"true"`

	// 购买时长，默认为 1。按小时(Dynamic)付费的资源无需此参数，按月付费的资源传 0 时，代表购买至月末。
	Quantity *int `required:"false"`

	// 待续续的资源ID
	ResourceID *string `required:"true"`
}

// RenewResourceResponse is response schema for RenewResource action
type RenewResourceResponse struct {
	response.CommonBase

	// 返回描述信息
	Message string
}

// NewRenewResourceRequest will create request of RenewResource action.
func (c *UCloudStackClient) NewRenewResourceRequest() *RenewResourceRequest {
	req := &RenewResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RenewResource

续费回收站资源
*/
func (c *UCloudStackClient) RenewResource(req *RenewResourceRequest) (*RenewResourceResponse, error) {
	var err error
	var res RenewResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RenewResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ResetVMInstancePasswordRequest is request schema for ResetVMInstancePassword action
type ResetVMInstancePasswordRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 密码
	Password *string `required:"true"`

	// 虚拟机ID
	VMID *string `required:"true"`
}

// ResetVMInstancePasswordResponse is response schema for ResetVMInstancePassword action
type ResetVMInstancePasswordResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewResetVMInstancePasswordRequest will create request of ResetVMInstancePassword action.
func (c *UCloudStackClient) NewResetVMInstancePasswordRequest() *ResetVMInstancePasswordRequest {
	req := &ResetVMInstancePasswordRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ResetVMInstancePassword

重置虚拟机密码，主机必须开机才可以重置密码
*/
func (c *UCloudStackClient) ResetVMInstancePassword(req *ResetVMInstancePasswordRequest) (*ResetVMInstancePasswordResponse, error) {
	var err error
	var res ResetVMInstancePasswordResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ResetVMInstancePassword", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ResizeVMConfigRequest is request schema for ResizeVMConfig action
type ResizeVMConfigRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// CPU 个数，如 1、2、4、8、16、32、64。
	CPU *int `required:"true"`

	// 内存容量，如 2048、4096、8192、16384、32768、65536、131072。
	Memory *int `required:"true"`

	// 虚拟机ID
	VMID *string `required:"true"`
}

// ResizeVMConfigResponse is response schema for ResizeVMConfig action
type ResizeVMConfigResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewResizeVMConfigRequest will create request of ResizeVMConfig action.
func (c *UCloudStackClient) NewResizeVMConfigRequest() *ResizeVMConfigRequest {
	req := &ResizeVMConfigRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ResizeVMConfig

修改虚拟机配置
*/
func (c *UCloudStackClient) ResizeVMConfig(req *ResizeVMConfigRequest) (*ResizeVMConfigResponse, error) {
	var err error
	var res ResizeVMConfigResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ResizeVMConfig", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RestartVMInstanceRequest is request schema for RestartVMInstance action
type RestartVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 虚拟机ID;
	VMID *string `required:"true"`
}

// RestartVMInstanceResponse is response schema for RestartVMInstance action
type RestartVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewRestartVMInstanceRequest will create request of RestartVMInstance action.
func (c *UCloudStackClient) NewRestartVMInstanceRequest() *RestartVMInstanceRequest {
	req := &RestartVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RestartVMInstance

重启虚拟机
*/
func (c *UCloudStackClient) RestartVMInstance(req *RestartVMInstanceRequest) (*RestartVMInstanceResponse, error) {
	var err error
	var res RestartVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RestartVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RollbackResourceRequest is request schema for RollbackResource action
type RollbackResourceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：如 cn,表示中国。
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：如 zone-01，表示可用区1。
	// Zone *string `required:"true"`

	// 待恢复的资源ID
	ResourceID *string `required:"true"`
}

// RollbackResourceResponse is response schema for RollbackResource action
type RollbackResourceResponse struct {
	response.CommonBase

	// 返回描述信息
	Message string
}

// NewRollbackResourceRequest will create request of RollbackResource action.
func (c *UCloudStackClient) NewRollbackResourceRequest() *RollbackResourceRequest {
	req := &RollbackResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RollbackResource

恢复回收站资源
*/
func (c *UCloudStackClient) RollbackResource(req *RollbackResourceRequest) (*RollbackResourceResponse, error) {
	var err error
	var res RollbackResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RollbackResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RollbackSnapshotRequest is request schema for RollbackSnapshot action
type RollbackSnapshotRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：如 cn,表示中国。
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：如 zone-01，表示可用区1。
	// Zone *string `required:"true"`

	// 对应的云硬盘 ID；
	DiskID *string `required:"true"`

	// 快照ID
	SnapshotID *string `required:"true"`
}

// RollbackSnapshotResponse is response schema for RollbackSnapshot action
type RollbackSnapshotResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewRollbackSnapshotRequest will create request of RollbackSnapshot action.
func (c *UCloudStackClient) NewRollbackSnapshotRequest() *RollbackSnapshotRequest {
	req := &RollbackSnapshotRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RollbackSnapshot

将某个快照内的数据回滚到原云硬盘，仅支持正常状态的快照进行回滚操作，回滚时硬盘必须处于未绑定或其挂载的主机为关机状态。
*/
func (c *UCloudStackClient) RollbackSnapshot(req *RollbackSnapshotRequest) (*RollbackSnapshotResponse, error) {
	var err error
	var res RollbackSnapshotResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RollbackSnapshot", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StartVMInstanceRequest is request schema for StartVMInstance action
type StartVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 虚拟机 ID
	VMID *string `required:"true"`
}

// StartVMInstanceResponse is response schema for StartVMInstance action
type StartVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewStartVMInstanceRequest will create request of StartVMInstance action.
func (c *UCloudStackClient) NewStartVMInstanceRequest() *StartVMInstanceRequest {
	req := &StartVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StartVMInstance

开启虚拟机
*/
func (c *UCloudStackClient) StartVMInstance(req *StartVMInstanceRequest) (*StartVMInstanceResponse, error) {
	var err error
	var res StartVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StartVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StopVMInstanceRequest is request schema for StopVMInstance action
type StopVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 虚拟机 ID
	VMID *string `required:"true"`
}

// StopVMInstanceResponse is response schema for StopVMInstance action
type StopVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string

	// 虚拟机 ID
	VMID string
}

// NewStopVMInstanceRequest will create request of StopVMInstance action.
func (c *UCloudStackClient) NewStopVMInstanceRequest() *StopVMInstanceRequest {
	req := &StopVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StopVMInstance

关闭虚拟机
*/
func (c *UCloudStackClient) StopVMInstance(req *StopVMInstanceRequest) (*StopVMInstanceResponse, error) {
	var err error
	var res StopVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StopVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// TerminateResourceRequest is request schema for TerminateResource action
type TerminateResourceRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 资源id
	ResourceID *string `required:"true"`
}

// TerminateResourceResponse is response schema for TerminateResource action
type TerminateResourceResponse struct {
	response.CommonBase

	// 返回描述信息
	Message string
}

// NewTerminateResourceRequest will create request of TerminateResource action.
func (c *UCloudStackClient) NewTerminateResourceRequest() *TerminateResourceRequest {
	req := &TerminateResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: TerminateResource

销毁资源
*/
func (c *UCloudStackClient) TerminateResource(req *TerminateResourceRequest) (*TerminateResourceResponse, error) {
	var err error
	var res TerminateResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("TerminateResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnBindEIPRequest is request schema for UnBindEIP action
type UnBindEIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；中国
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 外网IP的ID
	EIPID *string `required:"true"`

	// 资源ID
	ResourceID *string `required:"true"`

	// 资源类型。VM：虚拟机, LB:负载均衡, NATGW：nat网关
	ResourceType *string `required:"true"`
}

// UnBindEIPResponse is response schema for UnBindEIP action
type UnBindEIPResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewUnBindEIPRequest will create request of UnBindEIP action.
func (c *UCloudStackClient) NewUnBindEIPRequest() *UnBindEIPRequest {
	req := &UnBindEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnBindEIP

解绑外网IP
*/
func (c *UCloudStackClient) UnBindEIP(req *UnBindEIPRequest) (*UnBindEIPResponse, error) {
	var err error
	var res UnBindEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnBindEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnBindSecurityGroupRequest is request schema for UnBindSecurityGroup action
type UnBindSecurityGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 解绑的资源ID。调用方式举例：ResourceID=“one-id”。
	ResourceID *string `required:"true"`

	// 安全组ID
	SGID *string `required:"true"`
}

// UnBindSecurityGroupResponse is response schema for UnBindSecurityGroup action
type UnBindSecurityGroupResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewUnBindSecurityGroupRequest will create request of UnBindSecurityGroup action.
func (c *UCloudStackClient) NewUnBindSecurityGroupRequest() *UnBindSecurityGroupRequest {
	req := &UnBindSecurityGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnBindSecurityGroup

解绑安全组
*/
func (c *UCloudStackClient) UnBindSecurityGroup(req *UnBindSecurityGroupRequest) (*UnBindSecurityGroupResponse, error) {
	var err error
	var res UnBindSecurityGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnBindSecurityGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnbindAlarmTemplateRequest is request schema for UnbindAlarmTemplate action
type UnbindAlarmTemplateRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 告警模板ID
	AlarmTemplateID *string `required:"true"`

	// 【数组】资源的 ID。调用方式举例：ResourceIDs.0=“one-id”、ResourceIDs.1=“two-id”。
	ResourceIDs []string `required:"true"`

	// 资源类型。VM：虚拟机, LB:负载均衡, NATGW：nat网关;EIP:弹性网卡
	ResourceType *string `required:"true"`
}

// UnbindAlarmTemplateResponse is response schema for UnbindAlarmTemplate action
type UnbindAlarmTemplateResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewUnbindAlarmTemplateRequest will create request of UnbindAlarmTemplate action.
func (c *UCloudStackClient) NewUnbindAlarmTemplateRequest() *UnbindAlarmTemplateRequest {
	req := &UnbindAlarmTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnbindAlarmTemplate

解绑告警模板
*/
func (c *UCloudStackClient) UnbindAlarmTemplate(req *UnbindAlarmTemplateRequest) (*UnbindAlarmTemplateResponse, error) {
	var err error
	var res UnbindAlarmTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnbindAlarmTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnbindPhysicalIPRequest is request schema for UnbindPhysicalIP action
type UnbindPhysicalIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 物理IP的ID
	PhysicalIPID *string `required:"true"`

	// 资源ID
	ResourceID *string `required:"true"`

	// 资源类型。VM：虚拟机
	ResourceType *string `required:"true"`
}

// UnbindPhysicalIPResponse is response schema for UnbindPhysicalIP action
type UnbindPhysicalIPResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewUnbindPhysicalIPRequest will create request of UnbindPhysicalIP action.
func (c *UCloudStackClient) NewUnbindPhysicalIPRequest() *UnbindPhysicalIPRequest {
	req := &UnbindPhysicalIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnbindPhysicalIP

解绑物理IP
*/
func (c *UCloudStackClient) UnbindPhysicalIP(req *UnbindPhysicalIPRequest) (*UnbindPhysicalIPResponse, error) {
	var err error
	var res UnbindPhysicalIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnbindPhysicalIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateAlarmTemplateRuleRequest is request schema for UpdateAlarmTemplateRule action
type UpdateAlarmTemplateRuleRequest struct {
	request.CommonBase

	// [公共参数] 地域
	// Region *string `required:"true"`

	// [公共参数] 可用区
	// Zone *string `required:"true"`

	// 瘦脸策略
	AlarmStrategy *string `required:"true"`

	// 告警模板ID
	AlarmTemplateID *string `required:"true"`

	// 告警规则ID
	AlarmTemplateRuleID *string `required:"true"`

	// 对比方式
	Compare *string `required:"true"`

	// 通知组ID
	ContactGroupID *string `required:"true"`

	// 监控指标名称
	MetricName *string `required:"true"`

	// 资源类型
	ResourceType *string `required:"true"`

	// 告警阈值
	Threshold *string `required:"true"`

	// 连续触发次数
	TriggerCount *string `required:"true"`
}

// UpdateAlarmTemplateRuleResponse is response schema for UpdateAlarmTemplateRule action
type UpdateAlarmTemplateRuleResponse struct {
	response.CommonBase

	// 返回描述信息
	Message string
}

// NewUpdateAlarmTemplateRuleRequest will create request of UpdateAlarmTemplateRule action.
func (c *UCloudStackClient) NewUpdateAlarmTemplateRuleRequest() *UpdateAlarmTemplateRuleRequest {
	req := &UpdateAlarmTemplateRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateAlarmTemplateRule

更新告警模板规则
*/
func (c *UCloudStackClient) UpdateAlarmTemplateRule(req *UpdateAlarmTemplateRuleRequest) (*UpdateAlarmTemplateRuleResponse, error) {
	var err error
	var res UpdateAlarmTemplateRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateAlarmTemplateRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateRSRequest is request schema for UpdateRS action
type UpdateRSRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// VServer 监听器所属的负载均衡 ID
	LBID *string `required:"true"`

	// 端口号
	Port *int `required:"false"`

	// RServer的ID
	RSID *string `required:"true"`

	// RServer所属的VServer的ID
	VSID *string `required:"true"`

	// 权重
	Weight *int `required:"false"`
}

// UpdateRSResponse is response schema for UpdateRS action
type UpdateRSResponse struct {
	response.CommonBase

	// 【该字段已废弃，请谨慎使用】
	Action string `deprecated:"true"`

	// 返回信息描述。
	Message string

	// 【该字段已废弃，请谨慎使用】
	RetCode int `deprecated:"true"`
}

// NewUpdateRSRequest will create request of UpdateRS action.
func (c *UCloudStackClient) NewUpdateRSRequest() *UpdateRSRequest {
	req := &UpdateRSRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateRS

修改负载均衡的服务节点
*/
func (c *UCloudStackClient) UpdateRS(req *UpdateRSRequest) (*UpdateRSResponse, error) {
	var err error
	var res UpdateRSResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateRS", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateSecurityGroupRuleRequest is request schema for UpdateSecurityGroupRule action
type UpdateSecurityGroupRuleRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】规则。输入有效的 规则。调用方式举例：Rules.0=“TCP|23|0.0.0.0/0|ACCEPT|HIGH|1”、Rules.1=“TCP|55|0.0.0.0/0|ACCEPT|HIGH|1”
	Rules []string `required:"true"`

	// 安全组ID
	SGID *string `required:"true"`
}

// UpdateSecurityGroupRuleResponse is response schema for UpdateSecurityGroupRule action
type UpdateSecurityGroupRuleResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewUpdateSecurityGroupRuleRequest will create request of UpdateSecurityGroupRule action.
func (c *UCloudStackClient) NewUpdateSecurityGroupRuleRequest() *UpdateSecurityGroupRuleRequest {
	req := &UpdateSecurityGroupRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateSecurityGroupRule

修改安全组规则
*/
func (c *UCloudStackClient) UpdateSecurityGroupRule(req *UpdateSecurityGroupRuleRequest) (*UpdateSecurityGroupRuleResponse, error) {
	var err error
	var res UpdateSecurityGroupRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateSecurityGroupRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateVSRequest is request schema for UpdateVS action
type UpdateVSRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// CA证书ID，用于验证客户端证书的签名，仅当VServer监听协议为 HTTPS 且 SSLMode 为双向认证时有效。
	CACertificateID *string `required:"false"`

	// HTTP 健康检查时校验请求的 HOST 字段中的域名。当健康检查类型为端口检查时，该值为空。
	Domain *string `required:"false"`

	// 负载均衡的健康检查类型。枚举值：Port:端口检查；Path: HTTP检查 。仅当 VServer 协议类型为 HTTP 时，才可进行 HTTP 检查。
	HealthcheckType *string `required:"false"`

	// 负载均衡的连接空闲超时时间，单位为秒，默认值为 60s 。当 VServer 协议为 UDP 时，该值为空。
	KeepaliveTimeout *int `required:"false"`

	// VServer 监听器所属的负载均衡 ID
	LBID *string `required:"true"`

	// HTTP 健康检查的路径，健康检查类型为 HTTP 检查时为必填项。当健康检查类型为端口检查时，该值为空。
	Path *string `required:"false"`

	// 会话保持KEY，会话保持类型为Manual时为必填项，仅当 VServer 协议为 HTTP 时有效。
	PersistenceKey *string `required:"false"`

	// 会话保持类型。枚举值：None:关闭；Auto:自动生成；Manual:手动生成 。当协议为 TCP 时，该值不生效，会话保持和选择的调度算法相关；当协议为 UDP 时 Auto 表示开启会话保持 。
	PersistenceType *string `required:"false"`

	// VServer 监听端口
	Port *int `required:"false"`

	// SSL认证模式,HTTPS协议下必传,取值范围["simplex","duplex"]分别表示单向认证和双向认证。
	SSLMode *string `required:"false"`

	// 负载均衡的调度算法。枚举值：wrr:加权轮训；least_conn:最小连接数；hash:原地址,四层lb使用。ip_hash:七层lb使用
	Scheduler *string `required:"false"`

	// 服务器证书ID，用于证明服务器的身份，仅当 VServer监听协议为 HTTPS 时有效。
	ServerCertificateID *string `required:"false"`

	// 需要更新的VSID
	VSID *string `required:"true"`
}

// UpdateVSResponse is response schema for UpdateVS action
type UpdateVSResponse struct {
	response.CommonBase

	// 【该字段已废弃，请谨慎使用】
	Action string `deprecated:"true"`

	// 返回信息描述。
	Message string

	// 【该字段已废弃，请谨慎使用】
	RetCode int `deprecated:"true"`
}

// NewUpdateVSRequest will create request of UpdateVS action.
func (c *UCloudStackClient) NewUpdateVSRequest() *UpdateVSRequest {
	req := &UpdateVSRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateVS

修改负载均衡VServer
*/
func (c *UCloudStackClient) UpdateVS(req *UpdateVSRequest) (*UpdateVSResponse, error) {
	var err error
	var res UpdateVSResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateVS", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateVSPolicyRequest is request schema for UpdateVSPolicy action
type UpdateVSPolicyRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 内容转发规则关联的请求域名，值可为空，即代表仅匹配路径。
	Domain *string `required:"false"`

	// 负载均衡ID
	LBID *string `required:"true"`

	// 内容转发规则关联的请求访问路径，如 "/" 。
	Path *string `required:"false"`

	// 内容转发规则ID
	PolicyID *string `required:"true"`

	// 【数组】RServer的 ID。调用方式举例：RSIDs.0=“one-id”、RSIDs.1=“two-id”。
	RSIDs []string `required:"false"`

	// VServer的ID
	VSID *string `required:"true"`
}

// UpdateVSPolicyResponse is response schema for UpdateVSPolicy action
type UpdateVSPolicyResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewUpdateVSPolicyRequest will create request of UpdateVSPolicy action.
func (c *UCloudStackClient) NewUpdateVSPolicyRequest() *UpdateVSPolicyRequest {
	req := &UpdateVSPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateVSPolicy

更新七层负载均衡内容转发规则，仅当 VServer 的监听协议为 HTTP 时有效。
*/
func (c *UCloudStackClient) UpdateVSPolicy(req *UpdateVSPolicyRequest) (*UpdateVSPolicyResponse, error) {
	var err error
	var res UpdateVSPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateVSPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpgradeDiskRequest is request schema for UpgradeDisk action
type UpgradeDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 硬盘ID
	DiskID *string `required:"true"`

	// 硬盘升级后的容量， 不能小于原硬盘容量，单位为 GB 。
	DiskSpace *int `required:"true"`
}

// UpgradeDiskResponse is response schema for UpgradeDisk action
type UpgradeDiskResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewUpgradeDiskRequest will create request of UpgradeDisk action.
func (c *UCloudStackClient) NewUpgradeDiskRequest() *UpgradeDiskRequest {
	req := &UpgradeDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpgradeDisk

升级硬盘
*/
func (c *UCloudStackClient) UpgradeDisk(req *UpgradeDiskRequest) (*UpgradeDiskResponse, error) {
	var err error
	var res UpgradeDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpgradeDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
