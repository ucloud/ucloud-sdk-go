// Code is generated by ucloud-model, DO NOT EDIT IT.

package uec

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UEC API Schema

// BindUEcFirewallRequest is request schema for BindUEcFirewall action
type BindUEcFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 防火墙Id
	FirewallId *string `required:"true"`

	// 虚拟机资源Id或容器组资源id
	ResourceId *string `required:"true"`
}

// BindUEcFirewallResponse is response schema for BindUEcFirewall action
type BindUEcFirewallResponse struct {
	response.CommonBase
}

// NewBindUEcFirewallRequest will create request of BindUEcFirewall action.
func (c *UECClient) NewBindUEcFirewallRequest() *BindUEcFirewallRequest {
	req := &BindUEcFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindUEcFirewall

绑定防火墙，应用防火墙规则
*/
func (c *UECClient) BindUEcFirewall(req *BindUEcFirewallRequest) (*BindUEcFirewallResponse, error) {
	var err error
	var res BindUEcFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindUEcFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUEcCustomImageRequest is request schema for CreateUEcCustomImage action
type CreateUEcCustomImageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 镜像描述
	ImageDescription *string `required:"false"`

	// 镜像名称
	ImageName *string `required:"true"`

	// 虚拟机实例ID
	NodeId *string `required:"true"`
}

// CreateUEcCustomImageResponse is response schema for CreateUEcCustomImage action
type CreateUEcCustomImageResponse struct {
	response.CommonBase

	// 镜像ID
	ImageId string
}

// NewCreateUEcCustomImageRequest will create request of CreateUEcCustomImage action.
func (c *UECClient) NewCreateUEcCustomImageRequest() *CreateUEcCustomImageRequest {
	req := &CreateUEcCustomImageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUEcCustomImage

从指定虚拟机，生成自定义镜像。
*/
func (c *UECClient) CreateUEcCustomImage(req *CreateUEcCustomImageRequest) (*CreateUEcCustomImageResponse, error) {
	var err error
	var res CreateUEcCustomImageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUEcCustomImage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
CreateUEcFirewallParamRule is request schema for complex param
*/
type CreateUEcFirewallParamRule struct {

	// ACCEPT（接受）和DROP（拒绝）
	Action *string `required:"true"`

	// 端口，范围用"-"符号分隔，如：1-65535
	Port *string `required:"true"`

	// 优先级：HIGH（高），MEDIUM（中），LOW（低）
	Priority *string `required:"true"`

	// 协议，可选值：TCP，UDP，ICMP
	ProtocolType *string `required:"true"`

	// 备注
	Remark *string `required:"false"`

	// 源ip
	SrcIp *string `required:"true"`
}

// CreateUEcFirewallRequest is request schema for CreateUEcFirewall action
type CreateUEcFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 防火墙名称
	Name *string `required:"true"`

	// 描述
	Remark *string `required:"false"`

	//
	Rule []CreateUEcFirewallParamRule `required:"false"`
}

// CreateUEcFirewallResponse is response schema for CreateUEcFirewall action
type CreateUEcFirewallResponse struct {
	response.CommonBase

	// 防火墙Id
	FirewallId string
}

// NewCreateUEcFirewallRequest will create request of CreateUEcFirewall action.
func (c *UECClient) NewCreateUEcFirewallRequest() *CreateUEcFirewallRequest {
	req := &CreateUEcFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUEcFirewall

创建外网防火墙
*/
func (c *UECClient) CreateUEcFirewall(req *CreateUEcFirewallRequest) (*CreateUEcFirewallResponse, error) {
	var err error
	var res CreateUEcFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUEcFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
CreateUEcHolderParamStorage is request schema for complex param
*/
type CreateUEcHolderParamStorage struct {

	// 存储卷挂载路径
	Path *string `required:"false"`

	// 存储卷资源id
	ResourceId *string `required:"false"`
}

/*
CreateUEcHolderParamImage is request schema for complex param
*/
type CreateUEcHolderParamImage struct {

	// 镜像用户名和密码（如镜像名：密码）
	Message *string `required:"false"`

	// 镜像仓库地址
	StoreAddress *string `required:"false"`
}

/*
CreateUEcHolderParamPack is request schema for complex param
*/
type CreateUEcHolderParamPack struct {

	// 容器参数（多个用；隔开）
	Args *string `required:"false"`

	// 开启容器的命令
	Cmd *string `required:"false"`

	// 容器配置字典（多个用；隔开，如：/data1:resId1;/data2:resId2）
	ConfigDict *string `required:"false"`

	// 容器Cpu核数
	CpuCore *float64 `required:"false"`

	// 容器环境变量（多个用；隔开,如：key1:value1;key2:value2）
	Environment *string `required:"false"`

	// 容器镜像名称
	ImageName *string `required:"false"`

	// 容器内存，单位MB
	MemSize *int `required:"false"`

	// 容器名称
	Name *string `required:"false"`

	// 容器工作目录
	WorkDir *string `required:"false"`
}

// CreateUEcHolderRequest is request schema for CreateUEcHolder action
type CreateUEcHolderRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 外网绑定的带宽（单位M，默认0，只有当ElasticIp为yes时，默认1）
	Bandwidth *int `required:"false"`

	// 月数或者年数（默认值：1，当为按月计费时，0表示计费到月底，默认值为0）
	ChargeQuantity *int `required:"false"`

	// 付费方式（2按月、3按年。默认2，默认月付）
	ChargeType *int `required:"false"`

	// 容器组Cpu总核数
	CpuCore *float64 `required:"true"`

	// 绑定外网ip（yes-绑定，no-不绑定，默认no）
	ElasticIp *string `required:"false"`

	// 防火墙ID
	FirewallId *string `required:"false"`

	// 机房id
	IdcId *string `required:"true"`

	//
	Image []CreateUEcHolderParamImage `required:"false"`

	// 容器组总内存，单位MB
	MemSize *int `required:"true"`

	// 容器组名称（默认default）
	Name *string `required:"false"`

	//
	Pack []CreateUEcHolderParamPack `required:"false"`

	// 机型（normal-经济型，hf-标准型，默认normal）
	ProductType *string `required:"false"`

	// 重启策略（0总是，1失败是，2永不，默认0）
	RestartStrategy *int `required:"false"`

	//
	Storage []CreateUEcHolderParamStorage `required:"false"`

	// 子网ID
	SubnetId *string `required:"true"`
}

// CreateUEcHolderResponse is response schema for CreateUEcHolder action
type CreateUEcHolderResponse struct {
	response.CommonBase

	// 容器组资源id
	ResourceId string
}

// NewCreateUEcHolderRequest will create request of CreateUEcHolder action.
func (c *UECClient) NewCreateUEcHolderRequest() *CreateUEcHolderRequest {
	req := &CreateUEcHolderRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUEcHolder

创建容器组
*/
func (c *UECClient) CreateUEcHolder(req *CreateUEcHolderRequest) (*CreateUEcHolderResponse, error) {
	var err error
	var res CreateUEcHolderResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUEcHolder", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUEcSubnetRequest is request schema for CreateUEcSubnet action
type CreateUEcSubnetRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 子网cidr
	CIDR *string `required:"true"`

	// 备注
	Comment *string `required:"false"`

	// 机房ID
	IdcId *string `required:"true"`

	// 子网名称
	SubnetName *string `required:"false"`
}

// CreateUEcSubnetResponse is response schema for CreateUEcSubnet action
type CreateUEcSubnetResponse struct {
	response.CommonBase

	// 子网ID
	SubnetId string
}

// NewCreateUEcSubnetRequest will create request of CreateUEcSubnet action.
func (c *UECClient) NewCreateUEcSubnetRequest() *CreateUEcSubnetRequest {
	req := &CreateUEcSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUEcSubnet

创建子网
*/
func (c *UECClient) CreateUEcSubnet(req *CreateUEcSubnetRequest) (*CreateUEcSubnetResponse, error) {
	var err error
	var res CreateUEcSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUEcSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUEcVHostRequest is request schema for CreateUEcVHost action
type CreateUEcVHostRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 账户名，默认root
	AccountName *string `required:"false"`

	// 月数或者年数，0计费到月底， 默认0
	ChargeQuantity *int `required:"false"`

	// 付费方式，1按时，2按月，3按年，默认2
	ChargeType *int `required:"false"`

	// cpu核心数
	CpuCore *int `required:"true"`

	// 数据盘大小，单位GB
	DiskSize *int `required:"true"`

	// 外网防护墙规则组，默认
	FirewallId *string `required:"false"`

	// Gpu卡核心数。仅Gpu机型支持此字段
	Gpu *int `required:"false"`

	// Gpu类型，枚举值["T4S"],ProductType为G时必填
	GpuType *string `required:"false"`

	// 机房id
	IdcId *string `required:"true"`

	// 镜像ID
	ImageId *string `required:"true"`

	// 是否需要外网ip（no-否）
	IsNeedOuterIp *string `required:"false"`

	// 运营商（1-电信，2-联通，4移动）
	Isp []int `required:"false"`

	// 内存大小，单位GB
	MemSize *int `required:"true"`

	// 节点带宽限制，单位Mbs
	NetLimit *int `required:"true"`

	// 创建节点数量，默认1
	NodeCount *int `required:"false"`

	// 节点名称
	NodeName *string `required:"false"`

	// 密码
	PassWord *string `required:"false"`

	// 产品类型：normal（经济型），hf（标准型）,g(Gpu型)
	ProductType *string `required:"false"`

	// 子网ID
	SubnetId *string `required:"false"`

	// 系统盘大小，单位GB， 默认20GB
	SysDiskSize *int `required:"false"`
}

// CreateUEcVHostResponse is response schema for CreateUEcVHost action
type CreateUEcVHostResponse struct {
	response.CommonBase

	// 节点id（详情参考NodeList）
	NodeList []NodeList
}

// NewCreateUEcVHostRequest will create request of CreateUEcVHost action.
func (c *UECClient) NewCreateUEcVHostRequest() *CreateUEcVHostRequest {
	req := &CreateUEcVHostRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUEcVHost

创建虚拟机v2.0
*/
func (c *UECClient) CreateUEcVHost(req *CreateUEcVHostRequest) (*CreateUEcVHostResponse, error) {
	var err error
	var res CreateUEcVHostResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUEcVHost", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUEcCustomImageRequest is request schema for DeleteUEcCustomImage action
type DeleteUEcCustomImageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 机房ID，带机房ID表示只删除指定机房镜像
	IdcId *string `required:"false"`

	// 镜像ID
	ImageId *string `required:"true"`
}

// DeleteUEcCustomImageResponse is response schema for DeleteUEcCustomImage action
type DeleteUEcCustomImageResponse struct {
	response.CommonBase

	// 镜像ID
	ImageId int
}

// NewDeleteUEcCustomImageRequest will create request of DeleteUEcCustomImage action.
func (c *UECClient) NewDeleteUEcCustomImageRequest() *DeleteUEcCustomImageRequest {
	req := &DeleteUEcCustomImageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUEcCustomImage

删除UEDN客户自定义镜像
*/
func (c *UECClient) DeleteUEcCustomImage(req *DeleteUEcCustomImageRequest) (*DeleteUEcCustomImageResponse, error) {
	var err error
	var res DeleteUEcCustomImageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUEcCustomImage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUEcHolderRequest is request schema for DeleteUEcHolder action
type DeleteUEcHolderRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 容器组资源id，n为0，1，2...
	HolderId []string `required:"true"`
}

// DeleteUEcHolderResponse is response schema for DeleteUEcHolder action
type DeleteUEcHolderResponse struct {
	response.CommonBase
}

// NewDeleteUEcHolderRequest will create request of DeleteUEcHolder action.
func (c *UECClient) NewDeleteUEcHolderRequest() *DeleteUEcHolderRequest {
	req := &DeleteUEcHolderRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUEcHolder

删除容器组
*/
func (c *UECClient) DeleteUEcHolder(req *DeleteUEcHolderRequest) (*DeleteUEcHolderResponse, error) {
	var err error
	var res DeleteUEcHolderResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUEcHolder", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUEcSubnetRequest is request schema for DeleteUEcSubnet action
type DeleteUEcSubnetRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 子网ID
	SubnetId *string `required:"true"`
}

// DeleteUEcSubnetResponse is response schema for DeleteUEcSubnet action
type DeleteUEcSubnetResponse struct {
	response.CommonBase
}

// NewDeleteUEcSubnetRequest will create request of DeleteUEcSubnet action.
func (c *UECClient) NewDeleteUEcSubnetRequest() *DeleteUEcSubnetRequest {
	req := &DeleteUEcSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUEcSubnet

删除子网
*/
func (c *UECClient) DeleteUEcSubnet(req *DeleteUEcSubnetRequest) (*DeleteUEcSubnetResponse, error) {
	var err error
	var res DeleteUEcSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUEcSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUEcVHostRequest is request schema for DeleteUEcVHost action
type DeleteUEcVHostRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 节点id
	NodeId []string `required:"true"`
}

// DeleteUEcVHostResponse is response schema for DeleteUEcVHost action
type DeleteUEcVHostResponse struct {
	response.CommonBase
}

// NewDeleteUEcVHostRequest will create request of DeleteUEcVHost action.
func (c *UECClient) NewDeleteUEcVHostRequest() *DeleteUEcVHostRequest {
	req := &DeleteUEcVHostRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUEcVHost

删除vhost虚拟机 v2.0
*/
func (c *UECClient) DeleteUEcVHost(req *DeleteUEcVHostRequest) (*DeleteUEcVHostResponse, error) {
	var err error
	var res DeleteUEcVHostResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUEcVHost", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUEcFirewallRequest is request schema for DescribeUEcFirewall action
type DescribeUEcFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 防火墙ID，默认为返回所有防火墙
	FirewallId *string `required:"false"`

	// 返回数据长度，默认为20
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0
	Offset *int `required:"false"`

	// 绑定防火墙组的虚拟机资源ID
	ResourceId *string `required:"false"`
}

// DescribeUEcFirewallResponse is response schema for DescribeUEcFirewall action
type DescribeUEcFirewallResponse struct {
	response.CommonBase

	// 防火墙组详细信息，参见 FirewallInfo
	FirewallSet []FirewallInfo

	// 满足条件的节点总数
	TotalCount int
}

// NewDescribeUEcFirewallRequest will create request of DescribeUEcFirewall action.
func (c *UECClient) NewDescribeUEcFirewallRequest() *DescribeUEcFirewallRequest {
	req := &DescribeUEcFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUEcFirewall

获取防火墙信息
*/
func (c *UECClient) DescribeUEcFirewall(req *DescribeUEcFirewallRequest) (*DescribeUEcFirewallResponse, error) {
	var err error
	var res DescribeUEcFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUEcFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUEcFirewallResourceRequest is request schema for DescribeUEcFirewallResource action
type DescribeUEcFirewallResourceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 防火墙Id
	FirewallId *string `required:"true"`
}

// DescribeUEcFirewallResourceResponse is response schema for DescribeUEcFirewallResource action
type DescribeUEcFirewallResourceResponse struct {
	response.CommonBase

	// 资源列表，详情参见ResourceInfo
	ResourceSet []ResourceInfo

	// 资源总数
	TotalCount int
}

// NewDescribeUEcFirewallResourceRequest will create request of DescribeUEcFirewallResource action.
func (c *UECClient) NewDescribeUEcFirewallResourceRequest() *DescribeUEcFirewallResourceRequest {
	req := &DescribeUEcFirewallResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUEcFirewallResource

防火墙绑定的资源列表
*/
func (c *UECClient) DescribeUEcFirewallResource(req *DescribeUEcFirewallResourceRequest) (*DescribeUEcFirewallResourceResponse, error) {
	var err error
	var res DescribeUEcFirewallResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUEcFirewallResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUEcHolderRequest is request schema for DescribeUEcHolder action
type DescribeUEcHolderRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 容器组资源id
	HolderId []string `required:"false"`

	// 返回数据长度，默认为20，非负整数
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。非负整数
	Offset *int `required:"false"`
}

// DescribeUEcHolderResponse is response schema for DescribeUEcHolder action
type DescribeUEcHolderResponse struct {
	response.CommonBase

	// 容器组列表（详情参考HolderList）
	HolderList []HolderList

	// 满足条件的容器组总数
	TotalCount int
}

// NewDescribeUEcHolderRequest will create request of DescribeUEcHolder action.
func (c *UECClient) NewDescribeUEcHolderRequest() *DescribeUEcHolderRequest {
	req := &DescribeUEcHolderRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUEcHolder

获得容器组信息
*/
func (c *UECClient) DescribeUEcHolder(req *DescribeUEcHolderRequest) (*DescribeUEcHolderResponse, error) {
	var err error
	var res DescribeUEcHolderResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUEcHolder", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUEcHolderIDCRequest is request schema for DescribeUEcHolderIDC action
type DescribeUEcHolderIDCRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 容器组Cpu核数
	Cpu *float64 `required:"true"`

	// Idc机房id。默认全部机房
	IdcId []string `required:"false"`

	// 容器组内存大小（单位MB）
	Memory *int `required:"true"`

	// 产品类型，normal标准型，hf高性能型
	ProductType *string `required:"false"`

	// 0-其它, 1-一线城市单线,2-二线城市单线, 3-全国教育网, 4-全国三通
	Type *int `required:"false"`
}

// DescribeUEcHolderIDCResponse is response schema for DescribeUEcHolderIDC action
type DescribeUEcHolderIDCResponse struct {
	response.CommonBase

	// 机房列表，具体参考下面IdcInfo
	IdcList []IdcInfo
}

// NewDescribeUEcHolderIDCRequest will create request of DescribeUEcHolderIDC action.
func (c *UECClient) NewDescribeUEcHolderIDCRequest() *DescribeUEcHolderIDCRequest {
	req := &DescribeUEcHolderIDCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUEcHolderIDC

获取容器组机房信息
*/
func (c *UECClient) DescribeUEcHolderIDC(req *DescribeUEcHolderIDCRequest) (*DescribeUEcHolderIDCResponse, error) {
	var err error
	var res DescribeUEcHolderIDCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUEcHolderIDC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUEcIDCRequest is request schema for DescribeUEcIDC action
type DescribeUEcIDCRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 节点cpu核数
	Cpu *int `required:"true"`

	// Gpu卡核心数
	Gpu *int `required:"false"`

	// Idc机房id。默认全部机房
	IdcId []string `required:"false"`

	// 节点内存大小， 单位GB
	Memory *int `required:"true"`

	// 产品类型：normal（经济型），hf（标准型）,g(GPU型)
	ProductType *string `required:"false"`

	// 0-其它, 1-一线城市单线,2-二线城市单线, 3-全国教育网, 4-全国三通
	Type *int `required:"false"`
}

// DescribeUEcIDCResponse is response schema for DescribeUEcIDC action
type DescribeUEcIDCResponse struct {
	response.CommonBase

	// 操作名称
	Action string

	// 获取的机房信息，具体参考下面IdcInfo
	IdcList []IdcInfo

	// 返回码
	RetCode int
}

// NewDescribeUEcIDCRequest will create request of DescribeUEcIDC action.
func (c *UECClient) NewDescribeUEcIDCRequest() *DescribeUEcIDCRequest {
	req := &DescribeUEcIDCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUEcIDC

获取IDC机房列表
*/
func (c *UECClient) DescribeUEcIDC(req *DescribeUEcIDCRequest) (*DescribeUEcIDCResponse, error) {
	var err error
	var res DescribeUEcIDCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUEcIDC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUEcSubnetRequest is request schema for DescribeUEcSubnet action
type DescribeUEcSubnetRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 机房ID
	IdcId *string `required:"false"`

	// 子网ID
	SubnetId *string `required:"false"`
}

// DescribeUEcSubnetResponse is response schema for DescribeUEcSubnet action
type DescribeUEcSubnetResponse struct {
	response.CommonBase

	// 子网信息列表
	SubnetList []SubnetInfo
}

// NewDescribeUEcSubnetRequest will create request of DescribeUEcSubnet action.
func (c *UECClient) NewDescribeUEcSubnetRequest() *DescribeUEcSubnetRequest {
	req := &DescribeUEcSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUEcSubnet

获取子网列表
*/
func (c *UECClient) DescribeUEcSubnet(req *DescribeUEcSubnetRequest) (*DescribeUEcSubnetResponse, error) {
	var err error
	var res DescribeUEcSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUEcSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUEcVHostRequest is request schema for DescribeUEcVHost action
type DescribeUEcVHostRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// Idc机房id。默认全部机房
	IdcId []string `required:"false"`

	// 返回数据长度， 默认20，非负整数
	Limit *int `required:"false"`

	// 节点id，创建节点时生成的id。默认全部节点
	NodeId []string `required:"false"`

	// 数据偏移量，默认0，非负整数
	Offset *int `required:"false"`
}

// DescribeUEcVHostResponse is response schema for DescribeUEcVHost action
type DescribeUEcVHostResponse struct {
	response.CommonBase

	// 节点列表
	NodeList []NodeInfo

	// 满足条件的节点总数
	TotalCount int
}

// NewDescribeUEcVHostRequest will create request of DescribeUEcVHost action.
func (c *UECClient) NewDescribeUEcVHostRequest() *DescribeUEcVHostRequest {
	req := &DescribeUEcVHostRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUEcVHost

获取虚拟机列表 2.0
*/
func (c *UECClient) DescribeUEcVHost(req *DescribeUEcVHostRequest) (*DescribeUEcVHostResponse, error) {
	var err error
	var res DescribeUEcVHostResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUEcVHost", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUEcVHostISPRequest is request schema for DescribeUEcVHostISP action
type DescribeUEcVHostISPRequest struct {
	request.CommonBase

	// 城市
	City *string `required:"false"`

	// 运营商名称
	IspName *string `required:"false"`

	// 省份
	Province *string `required:"false"`
}

// DescribeUEcVHostISPResponse is response schema for DescribeUEcVHostISP action
type DescribeUEcVHostISPResponse struct {
	response.CommonBase

	// 节点运营商列表
	NodeIspList []NodeIspList
}

// NewDescribeUEcVHostISPRequest will create request of DescribeUEcVHostISP action.
func (c *UECClient) NewDescribeUEcVHostISPRequest() *DescribeUEcVHostISPRequest {
	req := &DescribeUEcVHostISPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUEcVHostISP

获取虚拟机运营商信息
*/
func (c *UECClient) DescribeUEcVHostISP(req *DescribeUEcVHostISPRequest) (*DescribeUEcVHostISPResponse, error) {
	var err error
	var res DescribeUEcVHostISPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUEcVHostISP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUEcHolderLogRequest is request schema for GetUEcHolderLog action
type GetUEcHolderLogRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 容器名称
	PackName *string `required:"true"`

	// 容器组资源id
	ResourceId *string `required:"true"`
}

// GetUEcHolderLogResponse is response schema for GetUEcHolderLog action
type GetUEcHolderLogResponse struct {
	response.CommonBase

	// 返回的日志数据
	Data string
}

// NewGetUEcHolderLogRequest will create request of GetUEcHolderLog action.
func (c *UECClient) NewGetUEcHolderLogRequest() *GetUEcHolderLogRequest {
	req := &GetUEcHolderLogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUEcHolderLog

获取单个容器日志
*/
func (c *UECClient) GetUEcHolderLog(req *GetUEcHolderLogRequest) (*GetUEcHolderLogResponse, error) {
	var err error
	var res GetUEcHolderLogResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUEcHolderLog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUEcHolderMetricsRequest is request schema for GetUEcHolderMetrics action
type GetUEcHolderMetricsRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 结束时间
	EndTime *int `required:"false"`

	// 容器名称
	PackName *string `required:"true"`

	// 容器组资源id
	ResourceId *string `required:"true"`

	// 开始时间
	StartTime *int `required:"false"`

	// n为0 CPU利用率, 1内存使用率, 2网卡出带宽, 3网卡入带宽, 4网卡出包数, 5网卡入包数
	Type []string `required:"true"`
}

// GetUEcHolderMetricsResponse is response schema for GetUEcHolderMetrics action
type GetUEcHolderMetricsResponse struct {
	response.CommonBase

	// 获得的监控数据（详情参考MetricisDataSet）
	DataSets MetricisDataSet
}

// NewGetUEcHolderMetricsRequest will create request of GetUEcHolderMetrics action.
func (c *UECClient) NewGetUEcHolderMetricsRequest() *GetUEcHolderMetricsRequest {
	req := &GetUEcHolderMetricsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUEcHolderMetrics

获取容器（CPU利用率，带宽，内存）数据
*/
func (c *UECClient) GetUEcHolderMetrics(req *GetUEcHolderMetricsRequest) (*GetUEcHolderMetricsResponse, error) {
	var err error
	var res GetUEcHolderMetricsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUEcHolderMetrics", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUEcIDCCutInfoRequest is request schema for GetUEcIDCCutInfo action
type GetUEcIDCCutInfoRequest struct {
	request.CommonBase
}

// GetUEcIDCCutInfoResponse is response schema for GetUEcIDCCutInfo action
type GetUEcIDCCutInfoResponse struct {
	response.CommonBase

	// 机房割接信息
	IDCCutInfo []IDCCutInfo

	// 满足条件的机房总数
	TotalCount int
}

// NewGetUEcIDCCutInfoRequest will create request of GetUEcIDCCutInfo action.
func (c *UECClient) NewGetUEcIDCCutInfoRequest() *GetUEcIDCCutInfoRequest {
	req := &GetUEcIDCCutInfoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUEcIDCCutInfo

获取机房割接信息
*/
func (c *UECClient) GetUEcIDCCutInfo(req *GetUEcIDCCutInfoRequest) (*GetUEcIDCCutInfoResponse, error) {
	var err error
	var res GetUEcIDCCutInfoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUEcIDCCutInfo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUEcIDCVHostDataRequest is request schema for GetUEcIDCVHostData action
type GetUEcIDCVHostDataRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 开始时间戳
	BeginTime *int `required:"false"`

	// 结束时间戳
	EndTime *int `required:"false"`

	// 节点资源id；n为0，1，2...
	NodeId []string `required:"true"`

	// 监控数据类型；n为0,1,2,3,4...,9
	Type []string `required:"true"`
}

// GetUEcIDCVHostDataResponse is response schema for GetUEcIDCVHostData action
type GetUEcIDCVHostDataResponse struct {
	response.CommonBase

	// 监控数据集合
	DataSets DataSet
}

// NewGetUEcIDCVHostDataRequest will create request of GetUEcIDCVHostData action.
func (c *UECClient) NewGetUEcIDCVHostDataRequest() *GetUEcIDCVHostDataRequest {
	req := &GetUEcIDCVHostDataRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUEcIDCVHostData

获取机房虚拟机监控数据
*/
func (c *UECClient) GetUEcIDCVHostData(req *GetUEcIDCVHostDataRequest) (*GetUEcIDCVHostDataResponse, error) {
	var err error
	var res GetUEcIDCVHostDataResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUEcIDCVHostData", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUEcImageRequest is request schema for GetUEcImage action
type GetUEcImageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 镜像类型：1标准镜像，2行业镜像，3自定义镜像
	ImageType *string `required:"false"`

	// 返回数据长度， 默认20，非负整数
	Limit *int `required:"false"`

	// 数据偏移量，默认0，非负整数
	Offset *int `required:"false"`
}

// GetUEcImageResponse is response schema for GetUEcImage action
type GetUEcImageResponse struct {
	response.CommonBase

	// 获取的镜像信息，具体参考下面ImageInfo
	ImageList []ImageInfo

	// 镜像总数
	TotalCount int
}

// NewGetUEcImageRequest will create request of GetUEcImage action.
func (c *UECClient) NewGetUEcImageRequest() *GetUEcImageRequest {
	req := &GetUEcImageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUEcImage

uec2.0
*/
func (c *UECClient) GetUEcImage(req *GetUEcImageRequest) (*GetUEcImageResponse, error) {
	var err error
	var res GetUEcImageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUEcImage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUEcPodPriceRequest is request schema for GetUEcPodPrice action
type GetUEcPodPriceRequest struct {
	request.CommonBase

	// 绑定的带宽，默认0，当绑定外网IP时默认1（单位M）
	Bandwidth *int `required:"false"`

	// 月数或年数（默认值：1，当支付类型为按月时，默认值为0）
	ChargeQuantity *int `required:"false"`

	// 支付类型（2按月，3按年，默认2）
	ChargeType *int `required:"false"`

	// 容器组总Cpu核心数
	CpuCore *float64 `required:"false"`

	// 是否绑定外网IP（yes：是，no：否，默认：no）
	ElasticIp *string `required:"false"`

	// 机房id
	IdcId *string `required:"true"`

	// 容器组总内存大小（单位M）
	MemSize *int `required:"false"`

	// 产品类型（normal：标准型，hf：高性能型，默认：normal）
	ProductType *string `required:"false"`
}

// GetUEcPodPriceResponse is response schema for GetUEcPodPrice action
type GetUEcPodPriceResponse struct {
	response.CommonBase

	// 容器组价格
	HolderPrice float64

	// IP和带宽价格
	IpPrice float64
}

// NewGetUEcPodPriceRequest will create request of GetUEcPodPrice action.
func (c *UECClient) NewGetUEcPodPriceRequest() *GetUEcPodPriceRequest {
	req := &GetUEcPodPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUEcPodPrice

获得容器组价格
*/
func (c *UECClient) GetUEcPodPrice(req *GetUEcPodPriceRequest) (*GetUEcPodPriceResponse, error) {
	var err error
	var res GetUEcPodPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUEcPodPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUEcUpgradePriceRequest is request schema for GetUEcUpgradePrice action
type GetUEcUpgradePriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// cpu核心数
	CpuCore *int `required:"false"`

	// 数据盘大小，单位GB
	DiskSize *int `required:"false"`

	// 内存大小，单位GB
	MemSize *int `required:"false"`

	// 节点带宽限制，单位Mbs
	NetLimit *int `required:"false"`

	// 虚拟机资源ID
	NodeId *string `required:"true"`

	// 系统盘大小，单位GB
	SysDiskSize *int `required:"false"`
}

// GetUEcUpgradePriceResponse is response schema for GetUEcUpgradePrice action
type GetUEcUpgradePriceResponse struct {
	response.CommonBase

	// 规格调整差价
	Price int
}

// NewGetUEcUpgradePriceRequest will create request of GetUEcUpgradePrice action.
func (c *UECClient) NewGetUEcUpgradePriceRequest() *GetUEcUpgradePriceRequest {
	req := &GetUEcUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUEcUpgradePrice

获取虚拟机调整差价
*/
func (c *UECClient) GetUEcUpgradePrice(req *GetUEcUpgradePriceRequest) (*GetUEcUpgradePriceResponse, error) {
	var err error
	var res GetUEcUpgradePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUEcUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUEcVHostDataRequest is request schema for GetUEcVHostData action
type GetUEcVHostDataRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 查询起始时间
	BeginTime *int `required:"false"`

	// 查询结束时间
	EndTime *int `required:"false"`

	// 节点id
	NodeId *string `required:"true"`

	// 0CPU使用率, 1内存使用率, 2 网卡出流量, 3网卡入流量, 4网卡出包量, 5网卡入包量, 6磁盘读流量, 7磁盘写流量, 8磁盘读次数, 9磁盘写次数
	Type []int `required:"true"`
}

// GetUEcVHostDataResponse is response schema for GetUEcVHostData action
type GetUEcVHostDataResponse struct {
	response.CommonBase

	// 操作名称
	Action string

	// 带宽数据实例集合
	DataSets DataSet

	// 返回码
	RetCode int
}

// NewGetUEcVHostDataRequest will create request of GetUEcVHostData action.
func (c *UECClient) NewGetUEcVHostDataRequest() *GetUEcVHostDataRequest {
	req := &GetUEcVHostDataRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUEcVHostData

获取虚拟机监控数据
*/
func (c *UECClient) GetUEcVHostData(req *GetUEcVHostDataRequest) (*GetUEcVHostDataResponse, error) {
	var err error
	var res GetUEcVHostDataResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUEcVHostData", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUEcVHostPriceRequest is request schema for GetUEcVHostPrice action
type GetUEcVHostPriceRequest struct {
	request.CommonBase

	// 月数或者年数，0计费到月底， 默认0
	ChargeQuantity *int `required:"false"`

	// 付费方式，1按时，2按月，3按年，默认2
	ChargeType *int `required:"false"`

	// CPU核数
	CpuCore *int `required:"false"`

	// 数据盘大小，单位GB
	DiskSize *int `required:"false"`

	// Gpu卡核心数。仅Gpu机型支持此字段
	Gpu *int `required:"false"`

	// Gpu类型，枚举值["T4"],ProductType为g时必填
	GpuType *string `required:"false"`

	// 机房Id
	IdcId *string `required:"true"`

	// 外网IP的数量，默认1
	IpCount *int `required:"false"`

	// 内存大小，单位GB
	MemSize *int `required:"false"`

	// 网络带宽限速，单位Mbs
	NetLimit *int `required:"false"`

	// 节点数量，默认1
	NodeCount *int `required:"false"`

	// 产品类型：normal（经济型），hf（标准型），g(Gpu型),默认normal
	ProductType *string `required:"false"`

	// 系统盘大小，单位GB
	SysDiskSize *int `required:"false"`
}

// GetUEcVHostPriceResponse is response schema for GetUEcVHostPrice action
type GetUEcVHostPriceResponse struct {
	response.CommonBase

	// Ip和带宽价格
	IpPrice float64

	// 节点价格
	NodePrice float64
}

// NewGetUEcVHostPriceRequest will create request of GetUEcVHostPrice action.
func (c *UECClient) NewGetUEcVHostPriceRequest() *GetUEcVHostPriceRequest {
	req := &GetUEcVHostPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUEcVHostPrice

获取虚拟机价格
*/
func (c *UECClient) GetUEcVHostPrice(req *GetUEcVHostPriceRequest) (*GetUEcVHostPriceResponse, error) {
	var err error
	var res GetUEcVHostPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUEcVHostPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ImportUEcCustomImageRequest is request schema for ImportUEcCustomImage action
type ImportUEcCustomImageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 镜像格式，可选RAW、qcow2， 不带镜像ID时必填
	Format *string `required:"false"`

	// 镜像需要导入机房，默认分发到所有机房
	IdcId []string `required:"false"`

	// 镜像描述
	ImageDesc *string `required:"false"`

	// 镜像Id，不传参表示新导入镜像，传参表示已有镜像分发到指定机房
	ImageId *string `required:"false"`

	// 镜像名称，不带镜像ID时必填
	ImageName *string `required:"false"`

	// 操作系统平台，linux、windows(当前版本暂不支持windows)，不带镜像ID时必填
	OsType *string `required:"false"`

	// UFile镜像文件下载地址，不带镜像ID时必填
	UFileUrl *string `required:"false"`
}

// ImportUEcCustomImageResponse is response schema for ImportUEcCustomImage action
type ImportUEcCustomImageResponse struct {
	response.CommonBase

	// 镜像Id
	ImageId string
}

// NewImportUEcCustomImageRequest will create request of ImportUEcCustomImage action.
func (c *UECClient) NewImportUEcCustomImageRequest() *ImportUEcCustomImageRequest {
	req := &ImportUEcCustomImageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: ImportUEcCustomImage

导入自定义镜像
*/
func (c *UECClient) ImportUEcCustomImage(req *ImportUEcCustomImageRequest) (*ImportUEcCustomImageResponse, error) {
	var err error
	var res ImportUEcCustomImageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ImportUEcCustomImage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// LoginUEcDockerRequest is request schema for LoginUEcDocker action
type LoginUEcDockerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 容器名称
	Name *string `required:"true"`

	// 容器组资源id
	ResourceId *string `required:"true"`
}

// LoginUEcDockerResponse is response schema for LoginUEcDocker action
type LoginUEcDockerResponse struct {
	response.CommonBase

	// 登录地址
	Link string

	// 登录端口
	LinkPort int

	// 返回的token
	SessionId string
}

// NewLoginUEcDockerRequest will create request of LoginUEcDocker action.
func (c *UECClient) NewLoginUEcDockerRequest() *LoginUEcDockerRequest {
	req := &LoginUEcDockerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: LoginUEcDocker

登录容器
*/
func (c *UECClient) LoginUEcDocker(req *LoginUEcDockerRequest) (*LoginUEcDockerResponse, error) {
	var err error
	var res LoginUEcDockerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("LoginUEcDocker", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUEcBandwidthRequest is request schema for ModifyUEcBandwidth action
type ModifyUEcBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 节点带宽限制，单位Mbs
	NetLimit *string `required:"true"`

	// 节点Id
	NodeId *string `required:"true"`
}

// ModifyUEcBandwidthResponse is response schema for ModifyUEcBandwidth action
type ModifyUEcBandwidthResponse struct {
	response.CommonBase
}

// NewModifyUEcBandwidthRequest will create request of ModifyUEcBandwidth action.
func (c *UECClient) NewModifyUEcBandwidthRequest() *ModifyUEcBandwidthRequest {
	req := &ModifyUEcBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUEcBandwidth

修改节点带宽限制
*/
func (c *UECClient) ModifyUEcBandwidth(req *ModifyUEcBandwidthRequest) (*ModifyUEcBandwidthResponse, error) {
	var err error
	var res ModifyUEcBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUEcBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUEcHolderNameRequest is request schema for ModifyUEcHolderName action
type ModifyUEcHolderNameRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 容器组名称
	Name *string `required:"true"`

	// 容器组资源id
	ResourceId *string `required:"true"`
}

// ModifyUEcHolderNameResponse is response schema for ModifyUEcHolderName action
type ModifyUEcHolderNameResponse struct {
	response.CommonBase
}

// NewModifyUEcHolderNameRequest will create request of ModifyUEcHolderName action.
func (c *UECClient) NewModifyUEcHolderNameRequest() *ModifyUEcHolderNameRequest {
	req := &ModifyUEcHolderNameRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUEcHolderName

修改容器组名称
*/
func (c *UECClient) ModifyUEcHolderName(req *ModifyUEcHolderNameRequest) (*ModifyUEcHolderNameResponse, error) {
	var err error
	var res ModifyUEcHolderNameResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUEcHolderName", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUEcImageNameRequest is request schema for ModifyUEcImageName action
type ModifyUEcImageNameRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 镜像描述
	ImageDesc *string `required:"false"`

	// 镜像ID
	ImageId *string `required:"true"`

	// 镜像名称
	ImageName *string `required:"true"`
}

// ModifyUEcImageNameResponse is response schema for ModifyUEcImageName action
type ModifyUEcImageNameResponse struct {
	response.CommonBase
}

// NewModifyUEcImageNameRequest will create request of ModifyUEcImageName action.
func (c *UECClient) NewModifyUEcImageNameRequest() *ModifyUEcImageNameRequest {
	req := &ModifyUEcImageNameRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUEcImageName

修改镜像名称
*/
func (c *UECClient) ModifyUEcImageName(req *ModifyUEcImageNameRequest) (*ModifyUEcImageNameResponse, error) {
	var err error
	var res ModifyUEcImageNameResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUEcImageName", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// PoweroffUEcVHostRequest is request schema for PoweroffUEcVHost action
type PoweroffUEcVHostRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 虚拟机资源ID
	NodeId []string `required:"true"`
}

// PoweroffUEcVHostResponse is response schema for PoweroffUEcVHost action
type PoweroffUEcVHostResponse struct {
	response.CommonBase
}

// NewPoweroffUEcVHostRequest will create request of PoweroffUEcVHost action.
func (c *UECClient) NewPoweroffUEcVHostRequest() *PoweroffUEcVHostRequest {
	req := &PoweroffUEcVHostRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: PoweroffUEcVHost

虚拟机断电
*/
func (c *UECClient) PoweroffUEcVHost(req *PoweroffUEcVHostRequest) (*PoweroffUEcVHostResponse, error) {
	var err error
	var res PoweroffUEcVHostResponse

	reqCopier := *req

	err = c.Client.InvokeAction("PoweroffUEcVHost", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ReinstallUEcVHostRequest is request schema for ReinstallUEcVHost action
type ReinstallUEcVHostRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 镜像ID
	ImageId *string `required:"true"`

	// 是否保留数据盘数据， 0-不保留，1-保留，默认为1
	KeepData *int `required:"false"`

	// 虚拟机资源ID
	NodeId *string `required:"true"`

	// 节点密码
	Password *string `required:"false"`

	// 系统盘大小，单位GB
	SysDiskSize *int `required:"false"`
}

// ReinstallUEcVHostResponse is response schema for ReinstallUEcVHost action
type ReinstallUEcVHostResponse struct {
	response.CommonBase
}

// NewReinstallUEcVHostRequest will create request of ReinstallUEcVHost action.
func (c *UECClient) NewReinstallUEcVHostRequest() *ReinstallUEcVHostRequest {
	req := &ReinstallUEcVHostRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ReinstallUEcVHost

虚拟机重装系统
*/
func (c *UECClient) ReinstallUEcVHost(req *ReinstallUEcVHostRequest) (*ReinstallUEcVHostResponse, error) {
	var err error
	var res ReinstallUEcVHostResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ReinstallUEcVHost", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RestartUEcHolderRequest is request schema for RestartUEcHolder action
type RestartUEcHolderRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 容器组资源id，n为0，1，2...
	ResourceId []string `required:"true"`
}

// RestartUEcHolderResponse is response schema for RestartUEcHolder action
type RestartUEcHolderResponse struct {
	response.CommonBase
}

// NewRestartUEcHolderRequest will create request of RestartUEcHolder action.
func (c *UECClient) NewRestartUEcHolderRequest() *RestartUEcHolderRequest {
	req := &RestartUEcHolderRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RestartUEcHolder

重启容器组
*/
func (c *UECClient) RestartUEcHolder(req *RestartUEcHolderRequest) (*RestartUEcHolderResponse, error) {
	var err error
	var res RestartUEcHolderResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RestartUEcHolder", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RestartUEcVHostRequest is request schema for RestartUEcVHost action
type RestartUEcVHostRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 节点id
	NodeId []string `required:"true"`
}

// RestartUEcVHostResponse is response schema for RestartUEcVHost action
type RestartUEcVHostResponse struct {
	response.CommonBase
}

// NewRestartUEcVHostRequest will create request of RestartUEcVHost action.
func (c *UECClient) NewRestartUEcVHostRequest() *RestartUEcVHostRequest {
	req := &RestartUEcVHostRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RestartUEcVHost

重启虚拟机v2.0
*/
func (c *UECClient) RestartUEcVHost(req *RestartUEcVHostRequest) (*RestartUEcVHostResponse, error) {
	var err error
	var res RestartUEcVHostResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RestartUEcVHost", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StartUEcVHostRequest is request schema for StartUEcVHost action
type StartUEcVHostRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 虚拟机资源ID
	NodeId []string `required:"true"`
}

// StartUEcVHostResponse is response schema for StartUEcVHost action
type StartUEcVHostResponse struct {
	response.CommonBase
}

// NewStartUEcVHostRequest will create request of StartUEcVHost action.
func (c *UECClient) NewStartUEcVHostRequest() *StartUEcVHostRequest {
	req := &StartUEcVHostRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StartUEcVHost

启动UEC虚拟机
*/
func (c *UECClient) StartUEcVHost(req *StartUEcVHostRequest) (*StartUEcVHostResponse, error) {
	var err error
	var res StartUEcVHostResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StartUEcVHost", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StopUEcVHostRequest is request schema for StopUEcVHost action
type StopUEcVHostRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 虚拟机资源ID
	NodeId []string `required:"true"`
}

// StopUEcVHostResponse is response schema for StopUEcVHost action
type StopUEcVHostResponse struct {
	response.CommonBase
}

// NewStopUEcVHostRequest will create request of StopUEcVHost action.
func (c *UECClient) NewStopUEcVHostRequest() *StopUEcVHostRequest {
	req := &StopUEcVHostRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StopUEcVHost

停止UEC虚拟机
*/
func (c *UECClient) StopUEcVHost(req *StopUEcVHostRequest) (*StopUEcVHostResponse, error) {
	var err error
	var res StopUEcVHostResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StopUEcVHost", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnBindUEcFirewallRequest is request schema for UnBindUEcFirewall action
type UnBindUEcFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 防火墙Id
	FirewallId *string `required:"true"`

	// 节点Id或容器组资源id
	ResourceId *string `required:"true"`
}

// UnBindUEcFirewallResponse is response schema for UnBindUEcFirewall action
type UnBindUEcFirewallResponse struct {
	response.CommonBase
}

// NewUnBindUEcFirewallRequest will create request of UnBindUEcFirewall action.
func (c *UECClient) NewUnBindUEcFirewallRequest() *UnBindUEcFirewallRequest {
	req := &UnBindUEcFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnBindUEcFirewall

解绑防火墙
*/
func (c *UECClient) UnBindUEcFirewall(req *UnBindUEcFirewallRequest) (*UnBindUEcFirewallResponse, error) {
	var err error
	var res UnBindUEcFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnBindUEcFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UpdateUEcFirewallParamRule is request schema for complex param
*/
type UpdateUEcFirewallParamRule struct {

	// ACCEPT（接受）和DROP（拒绝）
	Action *string `required:"true"`

	// 端口，范围用"-"符号分隔，如：1-65535
	Port *string `required:"true"`

	// 优先级：HIGH（高），MEDIUM（中），LOW（低）
	Priority *string `required:"true"`

	// 协议，可选值：TCP，UDP，ICMP
	ProtocolType *string `required:"true"`

	// 备注
	Remark *string `required:"true"`

	// 源ip
	SrcIp *string `required:"true"`
}

// UpdateUEcFirewallRequest is request schema for UpdateUEcFirewall action
type UpdateUEcFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 防火墙Id
	FirewallId *string `required:"true"`

	//
	Rule []UpdateUEcFirewallParamRule `required:"false"`
}

// UpdateUEcFirewallResponse is response schema for UpdateUEcFirewall action
type UpdateUEcFirewallResponse struct {
	response.CommonBase
}

// NewUpdateUEcFirewallRequest will create request of UpdateUEcFirewall action.
func (c *UECClient) NewUpdateUEcFirewallRequest() *UpdateUEcFirewallRequest {
	req := &UpdateUEcFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateUEcFirewall

更新防火墙信息，新增和删除规则
*/
func (c *UECClient) UpdateUEcFirewall(req *UpdateUEcFirewallRequest) (*UpdateUEcFirewallResponse, error) {
	var err error
	var res UpdateUEcFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateUEcFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateUEcFirewallAttributeRequest is request schema for UpdateUEcFirewallAttribute action
type UpdateUEcFirewallAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 防火墙Id
	FirewallId *string `required:"true"`

	// 防火墙名称
	Name *string `required:"false"`

	// 描述
	Remark *string `required:"false"`
}

// UpdateUEcFirewallAttributeResponse is response schema for UpdateUEcFirewallAttribute action
type UpdateUEcFirewallAttributeResponse struct {
	response.CommonBase
}

// NewUpdateUEcFirewallAttributeRequest will create request of UpdateUEcFirewallAttribute action.
func (c *UECClient) NewUpdateUEcFirewallAttributeRequest() *UpdateUEcFirewallAttributeRequest {
	req := &UpdateUEcFirewallAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateUEcFirewallAttribute

更新防火墙名称及描述
*/
func (c *UECClient) UpdateUEcFirewallAttribute(req *UpdateUEcFirewallAttributeRequest) (*UpdateUEcFirewallAttributeResponse, error) {
	var err error
	var res UpdateUEcFirewallAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateUEcFirewallAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateUEcSubnetRequest is request schema for UpdateUEcSubnet action
type UpdateUEcSubnetRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 备注
	Comment *string `required:"false"`

	// 子网ID
	SubnetId *string `required:"true"`

	// 子网名称
	SubnetName *string `required:"false"`
}

// UpdateUEcSubnetResponse is response schema for UpdateUEcSubnet action
type UpdateUEcSubnetResponse struct {
	response.CommonBase
}

// NewUpdateUEcSubnetRequest will create request of UpdateUEcSubnet action.
func (c *UECClient) NewUpdateUEcSubnetRequest() *UpdateUEcSubnetRequest {
	req := &UpdateUEcSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateUEcSubnet

更新子网信息
*/
func (c *UECClient) UpdateUEcSubnet(req *UpdateUEcSubnetRequest) (*UpdateUEcSubnetResponse, error) {
	var err error
	var res UpdateUEcSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateUEcSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
