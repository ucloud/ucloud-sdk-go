// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/ucloudstack"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario5183(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testUCloudStackAccPreCheck(t)
		},
		Id: "5183",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region":    "cn",
				"Zone":      "zone-01",
				"BeginTime": scenario.Must(functions.Calculate("-", scenario.Must(functions.GetTimestamp(10)), 3600)),
				"EndTime":   scenario.Must(functions.GetTimestamp(10)),
			}
		},
		Owners: []string{"lisa.wang@ucloud.cn"},
		Title:  "UCloudStack_02",
		Steps: []*driver.Step{
			testStep5183UCloudStackDescribeVPC01,
			testStep5183UCloudStackDescribeSecurityGroup02,
			testStep5183UCloudStackDescribeStorageType03,
			testStep5183UCloudStackDescribeVMType04,
			testStep5183UCloudStackDescribeImage05,
			testStep5183UCloudStackDescribeImage06,
			testStep5183UCloudStackCreateVMInstance07,
			testStep5183UCloudStackDescribeVMInstance08,
			testStep5183UCloudStackAllocateEIP09,
			testStep5183UCloudStackCreateLB10,
			testStep5183UCloudStackDescribeLB11,
			testStep5183UCloudStackCreateVS12,
			testStep5183UCloudStackUpdateVS13,
			testStep5183UCloudStackCreateRS14,
			testStep5183UCloudStackUpdateRS15,
			testStep5183UCloudStackDescribeRS16,
			testStep5183UCloudStackDisableRS17,
			testStep5183UCloudStackDescribeRS18,
			testStep5183UCloudStackEnableRS19,
			testStep5183UCloudStackDescribeRS20,
			testStep5183UCloudStackCreateVSPolicy21,
			testStep5183UCloudStackDescribeVSPolicy22,
			testStep5183UCloudStackUpdateVSPolicy23,
			testStep5183UCloudStackDeleteVSPolicy24,
			testStep5183UCloudStackDeleteRS25,
			testStep5183UCloudStackPoweroffVMInstance26,
			testStep5183UCloudStackDeleteVMInstance27,
			testStep5183UCloudStackDeleteLB28,
		},
	})
}

var testStep5183UCloudStackDescribeVPC01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVPCRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeVPC(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VPCID", step.Must(utils.GetValue(resp, "Infos.0.VPCID")))
		step.Scenario.SetVar("SubnetID", step.Must(utils.GetValue(resp, "Infos.0.SubnetInfos.0.SubnetID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVPCResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询VPC信息",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeSecurityGroup02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeSecurityGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeSecurityGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SGID", step.Must(utils.GetValue(resp, "Infos.0.SGID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeSecurityGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询安全组信息",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeStorageType03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeStorageTypeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeStorageType(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("StorageType", step.Must(utils.GetValue(resp, "Infos.0.StorageType")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeStorageTypeResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询存储类型",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeVMType04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMTypeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeVMType(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VMType", "ComputeSetBBBB")
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMTypeResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询主机机型",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeImage05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeImageRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeImage(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("Infos", step.Must(utils.GetValue(resp, "Infos")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeImageResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取镜像信息，包括默认镜像和自制镜像。",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeImage06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeImageRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"ImageIDs": []interface{}{
				step.Must(functions.SearchValue(step.Scenario.GetVar("Infos"), "OSName", "CentOS 6.5 x86_64", "ImageID")),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeImage(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("ImageID", step.Must(utils.GetValue(resp, "Infos.0.ImageID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeImageResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取镜像信息，包括默认镜像和自制镜像。",
	FastFail:      false,
}

var testStep5183UCloudStackCreateVMInstance07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":            step.Scenario.GetVar("Zone"),
			"WANSGID":         step.Scenario.GetVar("SGID"),
			"VPCID":           step.Scenario.GetVar("VPCID"),
			"VMType":          step.Scenario.GetVar("VMType"),
			"SubnetID":        step.Scenario.GetVar("SubnetID"),
			"Region":          step.Scenario.GetVar("Region"),
			"Quantity":        1,
			"Password":        "Zhongshang_2018",
			"Name":            "host_test",
			"Memory":          2048,
			"ImageID":         step.Scenario.GetVar("ImageID"),
			"DataDiskSpace":   10,
			"DataDiskSetType": "StorageSetBBBB",
			"ChargeType":      "Month",
			"CPU":             1,
			"BootDiskSetType": "StorageSetBBBB",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateVMInstance(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VMID", step.Must(utils.GetValue(resp, "VMID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建虚拟机",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeVMInstance08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VMIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeVMInstance(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("InterfaceID", step.Must(utils.GetValue(resp, "Infos.0.IPInfos.0.InterfaceID")))
		step.Scenario.SetVar("DiskID", step.Must(utils.GetValue(resp, "Infos.0.DiskInfos.0.DiskID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(90) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询虚拟机",
	FastFail:      false,
}

var testStep5183UCloudStackAllocateEIP09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewAllocateEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"Region":       step.Scenario.GetVar("Region"),
			"OperatorName": "Bgp",
			"Name":         "test_eip",
			"ChargeType":   "Month",
			"Bandwidth":    2,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AllocateEIP(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("EIPID", step.Must(utils.GetValue(resp, "EIPID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AllocateEIPResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "申请外网IP",
	FastFail:      false,
}

var testStep5183UCloudStackCreateLB10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateLBRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"VPCID":      step.Scenario.GetVar("VPCID"),
			"VMType":     step.Scenario.GetVar("VMType"),
			"SubnetID":   step.Scenario.GetVar("SubnetID"),
			"SGID":       step.Scenario.GetVar("SGID"),
			"Region":     step.Scenario.GetVar("Region"),
			"Name":       "lb_test1",
			"LBType":     "WAN",
			"EIPID":      step.Scenario.GetVar("EIPID"),
			"ChargeType": "Month",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateLB(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("LBID", step.Must(utils.GetValue(resp, "LBID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateLBResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建负载均衡",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeLB11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeLBRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"LBIDs": []interface{}{
				step.Scenario.GetVar("LBID"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeLB(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeLBResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.LBStatus", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取负载均衡信息",
	FastFail:      false,
}

var testStep5183UCloudStackCreateVS12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateVSRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":            step.Scenario.GetVar("Zone"),
			"Scheduler":       "wrr",
			"Region":          step.Scenario.GetVar("Region"),
			"Protocol":        "HTTP",
			"Port":            123,
			"LBID":            step.Scenario.GetVar("LBID"),
			"HealthcheckType": "Port",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateVS(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VSID", step.Must(utils.GetValue(resp, "VSID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateVSResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建负载均衡VServer",
	FastFail:      false,
}

var testStep5183UCloudStackUpdateVS13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewUpdateVSRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"VSID":      step.Scenario.GetVar("VSID"),
			"Scheduler": "ip_hash",
			"Region":    step.Scenario.GetVar("Region"),
			"LBID":      step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateVS(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateVSResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改负载均衡VServer",
	FastFail:      false,
}

var testStep5183UCloudStackCreateRS14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateRSRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":           step.Scenario.GetVar("Zone"),
			"Weight":         1,
			"VSID":           step.Scenario.GetVar("VSID"),
			"Region":         step.Scenario.GetVar("Region"),
			"Port":           112,
			"LBID":           step.Scenario.GetVar("LBID"),
			"BindResourceID": step.Scenario.GetVar("VMID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateRS(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("RSID", step.Must(utils.GetValue(resp, "RSID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateRSResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "添加服务节点",
	FastFail:      false,
}

var testStep5183UCloudStackUpdateRS15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewUpdateRSRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Weight": 55,
			"VSID":   step.Scenario.GetVar("VSID"),
			"Region": step.Scenario.GetVar("Region"),
			"RSID":   step.Scenario.GetVar("RSID"),
			"LBID":   step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateRS(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateRSResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改服务节点",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeRS16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeRSRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VSID":   step.Scenario.GetVar("VSID"),
			"Region": step.Scenario.GetVar("Region"),
			"LBID":   step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeRS(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("RSID_1", step.Must(utils.GetValue(resp, "Infos.0.RSID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeRSResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取服务节点信息",
	FastFail:      false,
}

var testStep5183UCloudStackDisableRS17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDisableRSRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VSID":   step.Scenario.GetVar("VSID"),
			"Region": step.Scenario.GetVar("Region"),
			"RSID":   step.Scenario.GetVar("RSID"),
			"LBID":   step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DisableRS(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DisableRSResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "禁用服务节点",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeRS18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeRSRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VSID":   step.Scenario.GetVar("VSID"),
			"Region": step.Scenario.GetVar("Region"),
			"RSIDs": []interface{}{
				step.Scenario.GetVar("RSID"),
			},
			"LBID": step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeRS(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeRSResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.RSMode", "Disable", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取服务节点信息",
	FastFail:      false,
}

var testStep5183UCloudStackEnableRS19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewEnableRSRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VSID":   step.Scenario.GetVar("VSID"),
			"Region": step.Scenario.GetVar("Region"),
			"RSID":   step.Scenario.GetVar("RSID"),
			"LBID":   step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.EnableRS(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "EnableRSResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "启用服务节点",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeRS20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeRSRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VSID":   step.Scenario.GetVar("VSID"),
			"Region": step.Scenario.GetVar("Region"),
			"RSIDs": []interface{}{
				step.Scenario.GetVar("RSID"),
			},
			"LBID": step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeRS(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeRSResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.RSMode", "Enable", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取服务节点信息",
	FastFail:      false,
}

var testStep5183UCloudStackCreateVSPolicy21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateVSPolicyRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VSID":   step.Scenario.GetVar("VSID"),
			"Region": step.Scenario.GetVar("Region"),
			"RSIDs": []interface{}{
				step.Scenario.GetVar("RSID"),
			},
			"Path":   "/test12321",
			"LBID":   step.Scenario.GetVar("LBID"),
			"Domain": "test.com11",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateVSPolicy(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("PolicyID", step.Must(utils.GetValue(resp, "PolicyID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateVSPolicyResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建内容转发规则",
	FastFail:      false,
}

var testStep5183UCloudStackDescribeVSPolicy22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVSPolicyRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VSID":   step.Scenario.GetVar("VSID"),
			"Region": step.Scenario.GetVar("Region"),
			"PolicyIDs": []interface{}{
				step.Scenario.GetVar("PolicyID"),
			},
			"LBID": step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeVSPolicy(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVSPolicyResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取内容转发规则信息",
	FastFail:      false,
}

var testStep5183UCloudStackUpdateVSPolicy23 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewUpdateVSPolicyRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"VSID":     step.Scenario.GetVar("VSID"),
			"Region":   step.Scenario.GetVar("Region"),
			"PolicyID": step.Scenario.GetVar("PolicyID"),
			"Path":     "/testnew",
			"LBID":     step.Scenario.GetVar("LBID"),
			"Domain":   "test.comnew",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateVSPolicy(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateVSPolicyResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更新内容转发规则",
	FastFail:      false,
}

var testStep5183UCloudStackDeleteVSPolicy24 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteVSPolicyRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"VSID":     step.Scenario.GetVar("VSID"),
			"Region":   step.Scenario.GetVar("Region"),
			"PolicyID": step.Scenario.GetVar("PolicyID"),
			"LBID":     step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteVSPolicy(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteVSPolicyResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除内容转发规则",
	FastFail:      false,
}

var testStep5183UCloudStackDeleteRS25 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteRSRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VSID":   step.Scenario.GetVar("VSID"),
			"Region": step.Scenario.GetVar("Region"),
			"RSID":   step.Scenario.GetVar("RSID"),
			"LBID":   step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteRS(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteRSResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "移除服务节点",
	FastFail:      false,
}

var testStep5183UCloudStackPoweroffVMInstance26 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewPoweroffVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VMID":   step.Scenario.GetVar("VMID"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.PoweroffVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "PoweroffVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "断电虚拟机",
	FastFail:      false,
}

var testStep5183UCloudStackDeleteVMInstance27 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VMID":   step.Scenario.GetVar("VMID"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除虚拟机",
	FastFail:      false,
}

var testStep5183UCloudStackDeleteLB28 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteLBRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"LBID":   step.Scenario.GetVar("LBID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteLB(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteLBResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除负载均衡",
	FastFail:      false,
}
