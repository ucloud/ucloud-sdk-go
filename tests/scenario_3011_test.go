// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/umem"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario3011(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "3011",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Protocol": "redis",
				"Type":     "double",
				"Name":     "distributed_redis",
				"Size":     16,
				"SizeUp":   18,
				"Region":   "cn-bj2",
				"Zone":     "cn-bj2-03",
			}
		},
		Owners: []string{"yonge.li@ucloud.cn"},
		Title:  "DistributedRedis",
		Steps: []*driver.Step{
			testStep3011CheckUMemSpaceAllowance01,
			testStep3011CreateUMemSpace02,
			testStep3011DescribeUMem03,
			testStep3011ModifyUMemSpaceName04,
			testStep3011DescribeUMem05,
			testStep3011GetUMemSpaceState06,
			testStep3011ResizeUMemSpace07,
			testStep3011DescribeUMem08,
			testStep3011DeleteUMemSpace09,
			testStep3011DescribeUMem10,
		},
	})
}

var testStep3011CheckUMemSpaceAllowance01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUMemSpaceAllowance")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Size":     step.Scenario.GetVar("Size"),
			"Region":   step.Scenario.GetVar("Region"),
			"Protocol": step.Scenario.GetVar("Protocol"),
			"Count":    1,
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckUMemSpaceAllowanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Count", 0, "gt"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "检查分布式UMem剩余资源",
	FastFail:      true,
}

var testStep3011CreateUMemSpace02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewCreateUMemSpaceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Type":       step.Scenario.GetVar("Type"),
			"Size":       step.Scenario.GetVar("Size"),
			"Region":     step.Scenario.GetVar("Region"),
			"Quantity":   1,
			"Protocol":   step.Scenario.GetVar("Protocol"),
			"Name":       step.Scenario.GetVar("Name"),
			"ChargeType": "Month",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateUMemSpace(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("Space_Id", step.Must(utils.GetValue(resp, "SpaceId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建内存空间",
	FastFail:      false,
}

var testStep3011DescribeUMem03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("Space_Id"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
			"Offset":     0,
			"Limit":      1000,
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    8,
	RetryInterval: 30 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3011ModifyUMemSpaceName04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewModifyUMemSpaceNameRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"SpaceId": step.Scenario.GetVar("Space_Id"),
			"Region":  step.Scenario.GetVar("Region"),
			"Name":    "Rename_FBS",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ModifyUMemSpaceName(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ModifyUMemSpaceNameResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改名称",
	FastFail:      false,
}

var testStep3011DescribeUMem05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("Space_Id"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
			"Offset":     0,
			"Limit":      1000,
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3011GetUMemSpaceState06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewGetUMemSpaceStateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"SpaceId": step.Scenario.GetVar("Space_Id"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUMemSpaceState(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUMemSpaceStateResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取空间状态",
	FastFail:      false,
}

var testStep3011ResizeUMemSpace07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewResizeUMemSpaceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"SpaceId": step.Scenario.GetVar("Space_Id"),
			"Size":    step.Scenario.GetVar("SizeUp"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ResizeUMemSpace(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "调整容量",
	FastFail:      false,
}

var testStep3011DescribeUMem08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("Space_Id"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
			"Offset":     0,
			"Limit":      1000,
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Size", step.Scenario.GetVar("SizeUp"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    40,
	RetryInterval: 10 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3011DeleteUMemSpace09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDeleteUMemSpaceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"SpaceId": step.Scenario.GetVar("Space_Id"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUMemSpace(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteUMemSpaceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 10 * time.Second,
	Title:         "删除空间",
	FastFail:      false,
}

var testStep3011DescribeUMem10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("Space_Id"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
			"Offset":     0,
			"Limit":      1000,
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet", step.Scenario.GetVar("Space_Id"), "object_not_contains"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    8,
	RetryInterval: 30 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}
