// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/umem"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario3001(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "3001",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Name":             "URedis-Config",
				"HighAvailability": "enable",
				"Version":          4,
				"Protocol":         "redis",
				"Password":         "eW9uZ2VsaXVjbG91ZGNu",
				"Key":              "maxmemory-samples",
				"Value":            6,
				"Size":             2,
				"Region":           "cn-bj2",
				"Zone":             "cn-bj2-02",
			}
		},
		Owners: []string{"yonge.li@ucloud.cn"},
		Title:  "URedis(Config-V4.0)",
		Steps: []*driver.Step{
			testStep3001DescribeURedisConfig01,
			testStep3001CreateURedisConfig02,
			testStep3001DescribeURedisConfigParam03,
			testStep3001ModifyURedisConfig04,
			testStep3001ModifyURedisConfig05,
			testStep3001DescribeURedisConfigParam06,
			testStep3001CheckURedisAllowance07,
			testStep3001DescribeURedisConfig08,
			testStep3001CreateURedisGroup09,
			testStep3001DescribeUMem10,
			testStep3001ChangeURedisConfig11,
			testStep3001DescribeUMem12,
			testStep3001DescribeURedisSlowlog13,
			testStep3001DeleteURedisGroup14,
			testStep3001DescribeUMem15,
			testStep3001DeleteURedisConfig16,
			testStep3001DescribeURedisConfig17,
		},
	})
}

var testStep3001DescribeURedisConfig01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDescribeURedisConfigRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Version":    step.Scenario.GetVar("Version"),
			"RegionFlag": "false",
			"Region":     step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeURedisConfig(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SourceConfigId", step.Must(utils.GetValue(resp, "DataSet.0.ConfigId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询主备Redis所有配置文件",
	FastFail:      false,
}

var testStep3001CreateURedisConfig02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CreateURedisConfig")
		err = req.SetPayload(map[string]interface{}{
			"Zone":           step.Scenario.GetVar("Zone"),
			"SourceConfigId": step.Scenario.GetVar("SourceConfigId"),
			"Region":         step.Scenario.GetVar("Region"),
			"Name":           "ConfigTest",
			"Description":    "ConfigTest",
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("ConfigId", step.Must(utils.GetValue(resp, "ConfigId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateURedisConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建URedis自定义配置文件",
	FastFail:      false,
}

var testStep3001DescribeURedisConfigParam03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeURedisConfigParam")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"ConfigId": step.Scenario.GetVar("ConfigId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisConfigParamResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    5,
	RetryInterval: 30 * time.Second,
	Title:         "显示主备Redis配置文件参数信息",
	FastFail:      false,
}

var testStep3001ModifyURedisConfig04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("ModifyURedisConfig")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Value":    6,
			"Region":   step.Scenario.GetVar("Region"),
			"Key":      step.Scenario.GetVar("Key"),
			"ConfigId": step.Scenario.GetVar("ConfigId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ModifyURedisConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改主备Redis配置文件参数",
	FastFail:      false,
}

var testStep3001ModifyURedisConfig05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("ModifyURedisConfig")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Value":    100,
			"Region":   step.Scenario.GetVar("Region"),
			"Key":      "slowlog-log-slower-than",
			"ConfigId": step.Scenario.GetVar("ConfigId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ModifyURedisConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改主备Redis配置文件参数",
	FastFail:      false,
}

var testStep3001DescribeURedisConfigParam06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeURedisConfigParam")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"ConfigId": step.Scenario.GetVar("ConfigId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisConfigParamResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    5,
	RetryInterval: 30 * time.Second,
	Title:         "显示主备Redis配置文件参数信息",
	FastFail:      false,
}

var testStep3001CheckURedisAllowance07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckURedisAllowance")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Size":     step.Scenario.GetVar("Size"),
			"Region":   step.Scenario.GetVar("Region"),
			"Protocol": step.Scenario.GetVar("Protocol"),
			"Count":    1,
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckURedisAllowanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "检查URedis资源是否足够",
	FastFail:      false,
}

var testStep3001DescribeURedisConfig08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDescribeURedisConfigRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Version":    step.Scenario.GetVar("Version"),
			"RegionFlag": "false",
			"Region":     step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeURedisConfig(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("ConfigId2", step.Must(utils.GetValue(resp, "DataSet.0.ConfigId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询主备Redis所有配置文件",
	FastFail:      false,
}

var testStep3001CreateURedisGroup09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewCreateURedisGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":             step.Scenario.GetVar("Zone"),
			"Version":          step.Scenario.GetVar("Version"),
			"Size":             step.Scenario.GetVar("Size"),
			"Region":           step.Scenario.GetVar("Region"),
			"Password":         step.Scenario.GetVar("Password"),
			"Name":             step.Scenario.GetVar("Name"),
			"HighAvailability": step.Scenario.GetVar("HighAvailability"),
			"ConfigId":         step.Scenario.GetVar("ConfigId2"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateURedisGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("GroupId", step.Must(utils.GetValue(resp, "GroupId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建主备redis",
	FastFail:      false,
}

var testStep3001DescribeUMem10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupId"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Version", step.Scenario.GetVar("Version"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    15,
	RetryInterval: 60 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3001ChangeURedisConfig11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("ChangeURedisConfig")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"GroupId":  step.Scenario.GetVar("GroupId"),
			"ConfigId": step.Scenario.GetVar("ConfigId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ChangeURedisConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更换Redis配置文件",
	FastFail:      false,
}

var testStep3001DescribeUMem12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupId"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ConfigId", step.Scenario.GetVar("ConfigId"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    15,
	RetryInterval: 60 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3001DescribeURedisSlowlog13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDescribeURedisSlowlogRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("GroupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeURedisSlowlog(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisSlowlogResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询URedis慢日志",
	FastFail:      false,
}

var testStep3001DeleteURedisGroup14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDeleteURedisGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("GroupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteURedisGroup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除主备redis",
	FastFail:      false,
}

var testStep3001DescribeUMem15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupId"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("TotalCount", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    3,
	RetryInterval: 60 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3001DeleteURedisConfig16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteURedisConfig")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"ConfigId": step.Scenario.GetVar("ConfigId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteURedisConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(120) * time.Second,
	MaxRetries:    3,
	RetryInterval: 120 * time.Second,
	Title:         "删除主备Redis自定义配置文件",
	FastFail:      false,
}

var testStep3001DescribeURedisConfig17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDescribeURedisConfigRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Version":  step.Scenario.GetVar("Version"),
			"Region":   step.Scenario.GetVar("Region"),
			"ConfigId": step.Scenario.GetVar("ConfigId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeURedisConfig(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 30 * time.Second,
	Title:         "查询主备Redis所有配置文件",
	FastFail:      false,
}
