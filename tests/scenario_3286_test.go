// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/umem"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario3286(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "3286",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Name":             "URedis-Create",
				"HighAvailability": "enable",
				"Version":          4,
				"Protocol":         "redis",
				"Size":             2,
				"SizeUp":           4,
				"Password":         "eW9uZ2VsaXVjbG91ZGNu",
				"Region":           "cn-bj2",
				"Zone":             "cn-bj2-02",
			}
		},
		Owners: []string{"keyu.wu@ucloud.cn"},
		Title:  "URedis(Create-V4.0)",
		Steps: []*driver.Step{
			testStep3286CheckURedisAllowance01,
			testStep3286DescribeURedisConfig02,
			testStep3286CreateURedisGroup03,
			testStep3286DescribeUMem04,
			testStep3286ModifyURedisGroupName05,
			testStep3286DescribeUMem06,
			testStep3286ResizeURedisGroup07,
			testStep3286DescribeUMem08,
			testStep3286ModifyURedisGroupPassword09,
			testStep3286RestartURedisGroup10,
			testStep3286DescribeUMem11,
			testStep3286DeleteURedisGroup12,
			testStep3286DescribeUMem13,
		},
	})
}

var testStep3286CheckURedisAllowance01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckURedisAllowance")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Size":     step.Scenario.GetVar("Size"),
			"Region":   step.Scenario.GetVar("Region"),
			"Protocol": step.Scenario.GetVar("Protocol"),
			"Count":    1,
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckURedisAllowanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "检查URedis资源是否足够",
	FastFail:      false,
}

var testStep3286DescribeURedisConfig02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDescribeURedisConfigRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Version":    step.Scenario.GetVar("Version"),
			"RegionFlag": "false",
			"Region":     step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeURedisConfig(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("ConfigId", step.Must(utils.GetValue(resp, "DataSet.0.ConfigId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询主备Redis所有配置文件",
	FastFail:      false,
}

var testStep3286CreateURedisGroup03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewCreateURedisGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":             step.Scenario.GetVar("Zone"),
			"Version":          step.Scenario.GetVar("Version"),
			"Size":             step.Scenario.GetVar("Size"),
			"Region":           step.Scenario.GetVar("Region"),
			"Password":         step.Scenario.GetVar("Password"),
			"Name":             step.Scenario.GetVar("Name"),
			"HighAvailability": step.Scenario.GetVar("HighAvailability"),
			"ConfigId":         step.Scenario.GetVar("ConfigId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateURedisGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("GroupId", step.Must(utils.GetValue(resp, "GroupId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建主备redis",
	FastFail:      true,
}

var testStep3286DescribeUMem04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupId"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Size", step.Scenario.GetVar("Size"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Version", step.Scenario.GetVar("Version"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    15,
	RetryInterval: 60 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3286ModifyURedisGroupName05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewModifyURedisGroupNameRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"Region":  step.Scenario.GetVar("Region"),
			"Name":    "ReName",
			"GroupId": step.Scenario.GetVar("GroupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ModifyURedisGroupName(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ModifyURedisGroupNameResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改名称",
	FastFail:      false,
}

var testStep3286DescribeUMem06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupId"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", "ReName", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 30 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3286ResizeURedisGroup07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewResizeURedisGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"Size":    step.Scenario.GetVar("SizeUp"),
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("GroupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ResizeURedisGroup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ResizeURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "调整容量",
	FastFail:      false,
}

var testStep3286DescribeUMem08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupId"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Size", step.Scenario.GetVar("SizeUp"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    15,
	RetryInterval: 60 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3286ModifyURedisGroupPassword09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewModifyURedisGroupPasswordRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"Password": step.Scenario.GetVar("Password"),
			"GroupId":  step.Scenario.GetVar("GroupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ModifyURedisGroupPassword(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ModifyURedisGroupPasswordResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改主备密码",
	FastFail:      false,
}

var testStep3286RestartURedisGroup10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("RestartURedisGroup")
		err = req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("GroupId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "RestartURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "重启主备实例",
	FastFail:      false,
}

var testStep3286DescribeUMem11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupId"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Size", step.Scenario.GetVar("SizeUp"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    20,
	RetryInterval: 60 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3286DeleteURedisGroup12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDeleteURedisGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("GroupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteURedisGroup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除主备redis",
	FastFail:      false,
}

var testStep3286DescribeUMem13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupId"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("TotalCount", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    3,
	RetryInterval: 60 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}
