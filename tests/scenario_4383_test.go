// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/ulb"
	"github.com/ucloud/ucloud-sdk-go/services/unet"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario4383(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "4383",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"tag":                "tag_api_test",
				"remark":             "remark_api_test",
				"fw_name_1":          scenario.Must(functions.Concat("fw_A_", scenario.Must(functions.GetTimestamp(13)), "_")),
				"fw_rule_1_protocol": "TCP",
				"fw_rule_1_port":     1111,
				"fw_rule_1_srcip":    "0.0.0.0/0",
				"fw_rule_1_action":   "ACCEPT",
				"fw_rule_1_priority": "HIGH",
				"uhost_name_1":       "firewall_api_test",
				"fw_rule_2_protocol": "UDP",
				"fw_rule_2_port":     2222,
				"fw_rule_2_srcip":    "10.0.0.0/8",
				"fw_rule_2_action":   "DROP",
				"fw_rule_2_priority": "LOW",
				"fw_name_2":          scenario.Must(functions.Concat("fw_B_", scenario.Must(functions.GetTimestamp(13)), "_")),
				"tag_2":              "tag_api_test_3",
				"remark_2":           "remark_api_test_3",
				"Image_Id":           "#{u_get_image_resource($Region,$Zone)}",
				"recommend_web":      "recommend web",
				"fw_rule_1":          "TCP|1111|0.0.0.0/0|ACCEPT|HIGH",
				"fw_rule_2":          "UDP|2222|10.0.0.0/8|DROP|LOW",
				"Region":             "cn-bj2",
				"Zone":               "cn-bj2-02",
			}
		},
		Owners: []string{"arno.gao@ucloud.cn"},
		Title:  "外网-ulb7自动化回归-支持防火墙-08",
		Steps: []*driver.Step{
			testStep4383DescribeFirewall01,
			testStep4383CreateFirewall02,
			testStep4383DescribeFirewall03,
			testStep4383DescribeFirewall04,
			testStep4383CreateULB05,
			testStep4383CreateVServer06,
			testStep4383DescribeFirewallResource07,
			testStep4383UpdateFirewall08,
			testStep4383UpdateFirewallAttribute09,
			testStep4383DescribeFirewall10,
			testStep4383DescribeFirewall11,
			testStep4383DisassociateFirewall12,
			testStep4383DeleteULB13,
			testStep4383DescribeFirewall14,
			testStep4383DeleteFirewall15,
			testStep4383DescribeFirewall16,
		},
	})
}

var testStep4383DescribeFirewall01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeFirewallRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeFirewall(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取防火墙信息",
	FastFail:      false,
}

var testStep4383CreateFirewall02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewCreateFirewallRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Tag": step.Scenario.GetVar("tag"),
			"Rule": []interface{}{
				step.Scenario.GetVar("fw_rule_1"),
			},
			"Remark": step.Scenario.GetVar("remark"),
			"Region": step.Scenario.GetVar("Region"),
			"Name":   step.Must(functions.Concat(step.Scenario.GetVar("fw_name_1"), step.Scenario.GetVar("Zone"))),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateFirewall(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("fw_id1", step.Must(utils.GetValue(resp, "FWId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建防火墙",
	FastFail:      true,
}

var testStep4383DescribeFirewall03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeFirewallRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeFirewall(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取防火墙信息",
	FastFail:      false,
}

var testStep4383DescribeFirewall04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeFirewallRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"FWId":   step.Scenario.GetVar("fw_id1"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeFirewall(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.FWId", step.Scenario.GetVar("fw_id1"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Must(functions.Concat(step.Scenario.GetVar("fw_name_1"), step.Scenario.GetVar("Zone"))), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Tag", step.Scenario.GetVar("tag"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Remark", step.Scenario.GetVar("remark"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ResourceCount", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Type", "user defined", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Rule.0.ProtocolType", step.Scenario.GetVar("fw_rule_1_protocol"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Rule.0.DstPort", step.Scenario.GetVar("fw_rule_1_port"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Rule.0.SrcIP", step.Scenario.GetVar("fw_rule_1_srcip"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Rule.0.RuleAction", step.Scenario.GetVar("fw_rule_1_action"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Rule.0.Priority", step.Scenario.GetVar("fw_rule_1_priority"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取防火墙信息",
	FastFail:      false,
}

var testStep4383CreateULB05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("ULB")
		if err != nil {
			return nil, err
		}
		client := c.(*ulb.ULBClient)

		req := client.NewCreateULBRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ULBName":    "test",
			"Tag":        "Default",
			"Region":     step.Scenario.GetVar("Region"),
			"InnerMode":  "No",
			"FirewallId": step.Scenario.GetVar("fw_id1"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateULB(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("ULBId", step.Must(utils.GetValue(resp, "ULBId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateULBResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建负载均衡",
	FastFail:      true,
}

var testStep4383CreateVServer06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("ULB")
		if err != nil {
			return nil, err
		}
		client := c.(*ulb.ULBClient)

		req := client.NewCreateVServerRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VServerName":     "vserver-test",
			"ULBId":           step.Scenario.GetVar("ULBId"),
			"Region":          step.Scenario.GetVar("Region"),
			"Protocol":        "HTTP",
			"PersistenceType": "UserDefined",
			"Method":          "Roundrobin",
			"ListenType":      "RequestProxy",
			"FrontendPort":    80,
			"ClientTimeout":   60,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateVServer(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateVServerResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建VServer",
	FastFail:      false,
}

var testStep4383DescribeFirewallResource07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeFirewallResourceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"FWId":   step.Scenario.GetVar("fw_id1"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeFirewallResource(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("ResourceSet.0.ResourceType", "ulb", "str_eq"),
			validation.Builtins.NewValidator("ResourceSet.0.ResourceID", step.Scenario.GetVar("ULBId"), "str_eq"),
			validation.Builtins.NewValidator("TotalCount", 1, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取防火墙绑定资源",
	FastFail:      false,
}

var testStep4383UpdateFirewall08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewUpdateFirewallRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Rule": []interface{}{
				step.Scenario.GetVar("fw_rule_2"),
			},
			"Region": step.Scenario.GetVar("Region"),
			"FWId":   step.Scenario.GetVar("fw_id1"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateFirewall(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "更新防火墙规则",
	FastFail:      false,
}

var testStep4383UpdateFirewallAttribute09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewUpdateFirewallAttributeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Tag":    step.Scenario.GetVar("tag_2"),
			"Remark": step.Scenario.GetVar("remark_2"),
			"Region": step.Scenario.GetVar("Region"),
			"Name":   step.Must(functions.Concat(step.Scenario.GetVar("fw_name_2"), step.Scenario.GetVar("Zone"))),
			"FWId":   step.Scenario.GetVar("fw_id1"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateFirewallAttribute(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "更新防火墙属性",
	FastFail:      false,
}

var testStep4383DescribeFirewall10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeFirewallRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"FWId":   step.Scenario.GetVar("fw_id1"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeFirewall(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.FWId", step.Scenario.GetVar("fw_id1"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Must(functions.Concat(step.Scenario.GetVar("fw_name_2"), step.Scenario.GetVar("Zone"))), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Tag", step.Scenario.GetVar("tag_2"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Remark", step.Scenario.GetVar("remark_2"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ResourceCount", 1, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Type", "user defined", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Rule.0.ProtocolType", step.Scenario.GetVar("fw_rule_2_protocol"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Rule.0.DstPort", step.Scenario.GetVar("fw_rule_2_port"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Rule.0.SrcIP", step.Scenario.GetVar("fw_rule_2_srcip"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Rule.0.RuleAction", step.Scenario.GetVar("fw_rule_2_action"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Rule.0.Priority", step.Scenario.GetVar("fw_rule_2_priority"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取防火墙信息",
	FastFail:      false,
}

var testStep4383DescribeFirewall11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeFirewallRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  20,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeFirewall(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("fw_dataset", step.Must(utils.GetValue(resp, "DataSet")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取防火墙信息",
	FastFail:      false,
}

var testStep4383DisassociateFirewall12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DisassociateFirewall")
		err = req.SetPayload(map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"ResourceType": "ULB",
			"ResourceId":   step.Scenario.GetVar("ULBId"),
			"Region":       step.Scenario.GetVar("Region"),
			"FWId":         step.Scenario.GetVar("fw_id1"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DisassociateFirewallResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "解绑防火墙",
	FastFail:      false,
}

var testStep4383DeleteULB13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("ULB")
		if err != nil {
			return nil, err
		}
		client := c.(*ulb.ULBClient)

		req := client.NewDeleteULBRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ULBId":  step.Scenario.GetVar("ULBId"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteULB(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteULBResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除负载均衡",
	FastFail:      false,
}

var testStep4383DescribeFirewall14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeFirewallRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"FWId":   step.Scenario.GetVar("fw_id1"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeFirewall(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ResourceCount", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取防火墙信息",
	FastFail:      false,
}

var testStep4383DeleteFirewall15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDeleteFirewallRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"FWId":   step.Scenario.GetVar("fw_id1"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteFirewall(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    10,
	RetryInterval: 1 * time.Second,
	Title:         "删除防火墙",
	FastFail:      true,
}

var testStep4383DescribeFirewall16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeFirewallRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  10,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeFirewall(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet", step.Scenario.GetVar("fw_id1"), "object_not_contains"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取防火墙信息",
	FastFail:      false,
}
