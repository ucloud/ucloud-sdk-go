// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/ufile"
	"github.com/ucloud/ucloud-sdk-go/services/umedia"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario5076(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "5076",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"BucketName": scenario.Must(functions.Concat("umedia-", scenario.Must(functions.GetTimestamp(10)))),
				"url":        "http://chen-bj.cn-bj.ufileos.com/Veido/S12E04.mp4",
				"Region":     "cn-bj2",
				"Zone":       "cn-bj2-03",
			}
		},
		Owners: []string{"fuan.yan@ucloud.cn"},
		Title:  "umedia测试集",
		Steps: []*driver.Step{
			testStep5076CreateBucket01,
			testStep5076DescribeBucket02,
			testStep5076CreateFormatTask03,
			testStep5076GetFormatTaskDetail04,
			testStep5076GetFormatTaskList05,
			testStep5076CreateSnapTask06,
			testStep5076GetSnapTaskDetail07,
			testStep5076GetSnapTaskList08,
			testStep5076CreateWatermarkPatten09,
			testStep5076UpdateWatermarkPatten10,
			testStep5076GetWaterMarkPattenList11,
			testStep5076DeleteWatermarkPatten12,
			testStep5076GetSnapTotalStat13,
			testStep5076CreateCodecPatten14,
			testStep5076CreateCodecTaskByPatten15,
			testStep5076GetCodecTaskList16,
			testStep5076GetCodecTaskDetail17,
			testStep5076UpdateCodecPatten18,
			testStep5076GetCodecPattenList19,
			testStep5076DeleteCodecPatten20,
			testStep5076GetCodecTotalStat21,
			testStep5076GetFormatTotalStat22,
			testStep5076DeleteBucket23,
		},
	})
}

var testStep5076CreateBucket01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UFile")
		if err != nil {
			return nil, err
		}
		client := c.(*ufile.UFileClient)

		req := client.NewCreateBucketRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":     step.Scenario.GetVar("Region"),
			"BucketName": step.Scenario.GetVar("BucketName"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateBucket(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("bucketId", step.Must(utils.GetValue(resp, "BucketId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateBucketResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建Bucket",
	FastFail:      false,
}

var testStep5076DescribeBucket02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UFile")
		if err != nil {
			return nil, err
		}
		client := c.(*ufile.UFileClient)

		req := client.NewDescribeBucketRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":     step.Scenario.GetVar("Region"),
			"BucketName": step.Scenario.GetVar("BucketName"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeBucket(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SRCdomain", step.Must(utils.GetValue(resp, "DataSet.0.Domain.Src.0")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeBucketResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取Bucket信息",
	FastFail:      false,
}

var testStep5076CreateFormatTask03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewCreateFormatTaskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Url": []interface{}{
				step.Scenario.GetVar("url"),
			},
			"DestBucket": step.Scenario.GetVar("SRCdomain"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateFormatTask(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("TaskId", step.Must(utils.GetValue(resp, "TaskIdList.0.TaskId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateFormatTaskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建封装任务",
	FastFail:      false,
}

var testStep5076GetFormatTaskDetail04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetFormatTaskDetailRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"TaskId": step.Scenario.GetVar("TaskId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetFormatTaskDetail(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetFormatTaskDetailResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取封装任务详情",
	FastFail:      false,
}

var testStep5076GetFormatTaskList05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetFormatTaskListRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetFormatTaskList(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetFormatTaskListResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取封装任务列表",
	FastFail:      false,
}

var testStep5076CreateSnapTask06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewCreateSnapTaskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Url": []interface{}{
				step.Scenario.GetVar("url"),
			},
			"SnapType":    "single",
			"SnapTime":    5,
			"ImageFormat": "jpg",
			"DestBucket":  step.Scenario.GetVar("SRCdomain"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateSnapTask(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SnapTaskId", step.Must(utils.GetValue(resp, "TaskIdList.0.TaskId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateSnapTaskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建截图任务",
	FastFail:      false,
}

var testStep5076GetSnapTaskDetail07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetSnapTaskDetailRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"TaskId": step.Scenario.GetVar("SnapTaskId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetSnapTaskDetail(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetSnapTaskDetailResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取截图任务详情",
	FastFail:      false,
}

var testStep5076GetSnapTaskList08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetSnapTaskListRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetSnapTaskList(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetSnapTaskListResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取截图任务列表",
	FastFail:      false,
}

var testStep5076CreateWatermarkPatten09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewCreateWatermarkPattenRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"WaterMarkType": "image",
			"Position":      "center",
			"PattenName":    "ucloud",
			"PaddingY":      12,
			"PaddingX":      9,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateWatermarkPatten(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("PattenId", step.Must(utils.GetValue(resp, "PattenId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateWatermarkPattenResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建水印模版",
	FastFail:      false,
}

var testStep5076UpdateWatermarkPatten10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewUpdateWatermarkPattenRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"WaterMarkType": "text",
			"Position":      "topleft",
			"PattenName":    "text",
			"PattenId":      step.Scenario.GetVar("PattenId"),
			"PaddingY":      6,
			"PaddingX":      8,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateWatermarkPatten(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateWatermarkPattenResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更新水印模版",
	FastFail:      false,
}

var testStep5076GetWaterMarkPattenList11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetWaterMarkPattenListRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetWaterMarkPattenList(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetWaterMarkPattenListResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取水印模版列表",
	FastFail:      false,
}

var testStep5076DeleteWatermarkPatten12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewDeleteWatermarkPattenRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"PattenId": step.Scenario.GetVar("PattenId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteWatermarkPatten(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteWatermarkPattenResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除水印模版",
	FastFail:      false,
}

var testStep5076GetSnapTotalStat13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetSnapTotalStatRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetSnapTotalStat(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetSnapTotalStatResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取截图使用量统计",
	FastFail:      false,
}

var testStep5076CreateCodecPatten14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewCreateCodecPattenRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"PattenName":       "text-yan",
			"DestVideoBitrate": 0,
			"DestFormat":       "mp4",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateCodecPatten(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("CodecPattenId", step.Must(utils.GetValue(resp, "PattenId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateCodecPattenResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建转码模版",
	FastFail:      false,
}

var testStep5076CreateCodecTaskByPatten15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewCreateCodecTaskByPattenRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Url": []interface{}{
				step.Scenario.GetVar("url"),
			},
			"DestBucket": step.Scenario.GetVar("SRCdomain"),
			"CodecPattenId": []interface{}{
				step.Scenario.GetVar("CodecPattenId"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateCodecTaskByPatten(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("CodecTaskid", step.Must(utils.GetValue(resp, "TaskIdList.0.TaskId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateCodecTaskByPattenResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "使用模版创建转码任务",
	FastFail:      false,
}

var testStep5076GetCodecTaskList16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetCodecTaskListRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetCodecTaskList(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetCodecTaskListResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取转码任务列表",
	FastFail:      false,
}

var testStep5076GetCodecTaskDetail17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetCodecTaskDetailRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"TaskId": step.Scenario.GetVar("CodecTaskid"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetCodecTaskDetail(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetCodecTaskDetailResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取转码任务详情",
	FastFail:      false,
}

var testStep5076UpdateCodecPatten18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewUpdateCodecPattenRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"PattenName":       "测试",
			"PattenId":         step.Scenario.GetVar("CodecPattenId"),
			"DestVideoBitrate": 0,
			"DestSuffix":       "yan",
			"DestFormat":       "mp4",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateCodecPatten(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateCodecPattenResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更新转码模版",
	FastFail:      false,
}

var testStep5076GetCodecPattenList19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetCodecPattenListRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetCodecPattenList(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetCodecPattenListResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取转码模版列表",
	FastFail:      false,
}

var testStep5076DeleteCodecPatten20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewDeleteCodecPattenRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"PattenId": step.Scenario.GetVar("CodecPattenId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteCodecPatten(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteCodecPattenResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除转码模版",
	FastFail:      false,
}

var testStep5076GetCodecTotalStat21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetCodecTotalStatRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetCodecTotalStat(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetCodecTotalStatResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取转码使用量统计",
	FastFail:      false,
}

var testStep5076GetFormatTotalStat22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMedia")
		if err != nil {
			return nil, err
		}
		client := c.(*umedia.UMediaClient)

		req := client.NewGetFormatTotalStatRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetFormatTotalStat(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetFormatTotalStatResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取转封装使用量统计",
	FastFail:      false,
}

var testStep5076DeleteBucket23 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UFile")
		if err != nil {
			return nil, err
		}
		client := c.(*ufile.UFileClient)

		req := client.NewDeleteBucketRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"BucketName": step.Scenario.GetVar("BucketName"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteBucket(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteBucketResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除Bucket",
	FastFail:      false,
}
