// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/udisk"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario527(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "527",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"DiskType":                  "DataDisk",
				"Size":                      1,
				"UDataArkMode":              "Yes",
				"Name":                      "udisk_ark",
				"snapshot_name1":            "udisk_ark_snap1",
				"snapshot_name2":            "udisk_ark_snap2",
				"snapshot_comment1":         "snap1_comment",
				"snapshot_comment2":         "snap2_comment",
				"udiskName_ark_snapclone":   "udisk_ark_snapclone",
				"udiskName_noark_snapclone": "udisk_noark_snapclone",
				"Region":                    "cn-bj2",
				"Zone":                      "cn-bj2-02",
			}
		},
		Owners: []string{"chenoa.chen@ucloud.cn"},
		Title:  "UDisk-普通方舟盘_04",
		Steps: []*driver.Step{
			testStep527DescribeUDiskPrice01,
			testStep527CheckUDiskAllowance02,
			testStep527CreateUDisk03,
			testStep527DescribeUDisk04,
			testStep527SetUDiskUDataArkMode05,
			testStep527DescribeUDisk06,
			testStep527CreateUDiskSnapshot07,
			testStep527DescribeUDiskSnapshot08,
			testStep527UpdateUDiskSnapshotInfo09,
			testStep527DescribeUDiskSnapshot10,
			testStep527CloneUDiskSnapshot11,
			testStep527DescribeUDisk12,
			testStep527CloneUDiskSnapshot13,
			testStep527DescribeUDisk14,
			testStep527RestoreUDisk15,
			testStep527DescribeUDisk16,
			testStep527DeleteUDiskSnapshot17,
			testStep527DescribeUDiskSnapshot18,
			testStep527DescribeUDisk19,
			testStep527DeleteUDisk20,
			testStep527DeleteUDisk21,
			testStep527DeleteUDisk22,
		},
	})
}

var testStep527DescribeUDiskPrice01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDescribeUDiskPriceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"UDataArkMode": step.Scenario.GetVar("UDataArkMode"),
			"Size":         step.Scenario.GetVar("Size"),
			"Region":       step.Scenario.GetVar("Region"),
			"Quantity":     1,
			"DiskType":     step.Scenario.GetVar("DiskType"),
			"ChargeType":   "Month",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDiskPrice(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskPriceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取云硬盘价格",
	FastFail:      false,
}

var testStep527CheckUDiskAllowance02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDiskAllowance")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Size":     step.Scenario.GetVar("Size"),
			"Region":   step.Scenario.GetVar("Region"),
			"DiskType": step.Scenario.GetVar("DiskType"),
			"Count":    3,
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckUDiskAllowanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "检查UDisk资源余量",
	FastFail:      true,
}

var testStep527CreateUDisk03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewCreateUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"UDataArkMode": step.Scenario.GetVar("UDataArkMode"),
			"Size":         step.Scenario.GetVar("Size"),
			"Region":       step.Scenario.GetVar("Region"),
			"Quantity":     0,
			"Name":         step.Scenario.GetVar("Name"),
			"DiskType":     step.Scenario.GetVar("DiskType"),
			"ChargeType":   "Month",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateUDisk(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("udisk_id", step.Must(utils.GetValue(resp, "UDiskId.0")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateUDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建云硬盘",
	FastFail:      false,
}

var testStep527DescribeUDisk04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDescribeUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_id"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Scenario.GetVar("Name"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Status", "Available", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Size", step.Scenario.GetVar("Size"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.UDataArkMode", "Yes", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    60,
	RetryInterval: 3 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}

var testStep527SetUDiskUDataArkMode05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewSetUDiskUDataArkModeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"UDiskId":      step.Scenario.GetVar("udisk_id"),
			"UDataArkMode": "No",
			"Region":       step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.SetUDiskUDataArkMode(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "设置UDisk数据方舟的状态",
	FastFail:      false,
}

var testStep527DescribeUDisk06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDescribeUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_id"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Scenario.GetVar("Name"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.UDataArkMode", "No", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    10,
	RetryInterval: 2 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}

var testStep527CreateUDiskSnapshot07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewCreateUDiskSnapshotRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_id"),
			"Region":  step.Scenario.GetVar("Region"),
			"Name":    step.Scenario.GetVar("snapshot_name1"),
			"Comment": step.Scenario.GetVar("snapshot_comment1"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateUDiskSnapshot(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("snapshot_id", step.Must(utils.GetValue(resp, "SnapshotId.0")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建快照",
	FastFail:      false,
}

var testStep527DescribeUDiskSnapshot08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDescribeUDiskSnapshotRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"SnapshotId": step.Scenario.GetVar("snapshot_id"),
			"Region":     step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDiskSnapshot(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskSnapshotResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Status", "Normal", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Scenario.GetVar("snapshot_name1"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Comment", step.Scenario.GetVar("snapshot_comment1"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    60,
	RetryInterval: 6 * time.Second,
	Title:         "获取快照列表",
	FastFail:      false,
}

var testStep527UpdateUDiskSnapshotInfo09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("UpdateUDiskSnapshotInfo")
		err = req.SetPayload(map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"SnapshotName": step.Scenario.GetVar("snapshot_name2"),
			"SnapshotId":   step.Scenario.GetVar("snapshot_id"),
			"Region":       step.Scenario.GetVar("Region"),
			"Comment":      step.Scenario.GetVar("snapshot_comment2"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateUDiskSnapshotInfoResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更新云硬盘快照信息",
	FastFail:      false,
}

var testStep527DescribeUDiskSnapshot10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDescribeUDiskSnapshotRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"SnapshotId": step.Scenario.GetVar("snapshot_id"),
			"Region":     step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDiskSnapshot(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskSnapshotResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Status", "Normal", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Scenario.GetVar("snapshot_name2"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Comment", step.Scenario.GetVar("snapshot_comment2"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取快照列表",
	FastFail:      false,
}

var testStep527CloneUDiskSnapshot11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewCloneUDiskSnapshotRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"UDataArkMode": "Yes",
			"SourceId":     step.Scenario.GetVar("snapshot_id"),
			"Size":         step.Scenario.GetVar("Size"),
			"Region":       step.Scenario.GetVar("Region"),
			"Quantity":     0,
			"Name":         step.Scenario.GetVar("udiskName_ark_snapclone"),
			"ChargeType":   "Month",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CloneUDiskSnapshot(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("udisk_id1_from_snap", step.Must(utils.GetValue(resp, "UDiskId.0")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CloneUDiskSnapshotResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "克隆快照",
	FastFail:      false,
}

var testStep527DescribeUDisk12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDescribeUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_id1_from_snap"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Scenario.GetVar("udiskName_ark_snapclone"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Status", "Available", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Size", step.Scenario.GetVar("Size"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.UDataArkMode", "Yes", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(120) * time.Second,
	MaxRetries:    90,
	RetryInterval: 3 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}

var testStep527CloneUDiskSnapshot13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewCloneUDiskSnapshotRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"UDataArkMode": "No",
			"SourceId":     step.Scenario.GetVar("snapshot_id"),
			"Size":         step.Scenario.GetVar("Size"),
			"Region":       step.Scenario.GetVar("Region"),
			"Quantity":     0,
			"Name":         step.Scenario.GetVar("udiskName_noark_snapclone"),
			"ChargeType":   "Month",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CloneUDiskSnapshot(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("udisk_id2_from_snap", step.Must(utils.GetValue(resp, "UDiskId.0")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CloneUDiskSnapshotResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 5 * time.Second,
	Title:         "克隆快照",
	FastFail:      false,
}

var testStep527DescribeUDisk14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDescribeUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_id2_from_snap"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Scenario.GetVar("udiskName_noark_snapclone"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Status", "Available", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Size", step.Scenario.GetVar("Size"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.UDataArkMode", "No", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(120) * time.Second,
	MaxRetries:    60,
	RetryInterval: 3 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}

var testStep527RestoreUDisk15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewRestoreUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"UDiskId":    step.Scenario.GetVar("udisk_id"),
			"SnapshotId": step.Scenario.GetVar("snapshot_id"),
			"Region":     step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.RestoreUDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "RestoreUDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "从备份恢复数据至UDisk",
	FastFail:      false,
}

var testStep527DescribeUDisk16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDescribeUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_id"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Scenario.GetVar("Name"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Status", "Available", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Size", step.Scenario.GetVar("Size"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.UDataArkMode", "No", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    90,
	RetryInterval: 3 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}

var testStep527DeleteUDiskSnapshot17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDeleteUDiskSnapshotRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"SnapshotId": step.Scenario.GetVar("snapshot_id"),
			"Region":     step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUDiskSnapshot(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteUDiskSnapshotResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 2 * time.Second,
	Title:         "删除快照",
	FastFail:      false,
}

var testStep527DescribeUDiskSnapshot18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDescribeUDiskSnapshotRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"SnapshotId": step.Scenario.GetVar("snapshot_id"),
			"Region":     step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDiskSnapshot(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskSnapshotResponse", "str_eq"),
			validation.Builtins.NewValidator("TotalCount", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取快照列表",
	FastFail:      false,
}

var testStep527DescribeUDisk19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDescribeUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 3 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}

var testStep527DeleteUDisk20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDeleteUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_id"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteUDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除云硬盘",
	FastFail:      false,
}

var testStep527DeleteUDisk21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDeleteUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_id1_from_snap"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteUDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除云硬盘",
	FastFail:      false,
}

var testStep527DeleteUDisk22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDisk")
		if err != nil {
			return nil, err
		}
		client := c.(*udisk.UDiskClient)

		req := client.NewDeleteUDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_id2_from_snap"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteUDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除云硬盘",
	FastFail:      false,
}
