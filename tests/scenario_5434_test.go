// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/ucloudstack"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario5434(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testUCloudStackAccPreCheck(t)
		},
		Id: "5434",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region":    "cn",
				"Zone":      "zone-01",
				"BeginTime": scenario.Must(functions.Calculate("-", scenario.Must(functions.GetTimestamp(10)), 3600)),
				"EndTime":   scenario.Must(functions.GetTimestamp(10)),
			}
		},
		Owners: []string{"lisa.wang@ucloud.cn"},
		Title:  "UCloudStack_01_16",
		Steps: []*driver.Step{
			testStep5434UCloudStackDescribeVPC01,
			testStep5434UCloudStackDescribeSecurityGroup02,
			testStep5434UCloudStackDescribeImage03,
			testStep5434UCloudStackDescribeVMType04,
			testStep5434UCloudStackDescribeStorageType05,
			testStep5434UCloudStackCreateVMInstance06,
			testStep5434UCloudStackDescribeVMInstance07,
			testStep5434UCloudStackDescribeDisk08,
			testStep5434UCloudStackDescribeDisk09,
			testStep5434UCloudStackDescribeDisk10,
			testStep5434UCloudStackCreateNIC11,
			testStep5434UCloudStackDescribeNIC12,
			testStep5434UCloudStackAttachNIC13,
			testStep5434UCloudStackDetachNIC14,
			testStep5434UCloudStackDeleteNIC15,
			testStep5434UCloudStackAllocateEIP16,
			testStep5434UCloudStackAllocateEIP17,
			testStep5434UCloudStackDescribeEIP18,
			testStep5434UCloudStackDescribeEIP19,
			testStep5434UCloudStackDescribeEIP20,
			testStep5434UCloudStackStopVMInstance21,
			testStep5434UCloudStackDeleteVMInstance22,
			testStep5434UCloudStackReleaseEIP23,
			testStep5434UCloudStackReleaseEIP24,
		},
	})
}

var testStep5434UCloudStackDescribeVPC01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVPCRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeVPC(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VPCID", step.Must(utils.GetValue(resp, "Infos.0.VPCID")))
		step.Scenario.SetVar("SubnetID", step.Must(utils.GetValue(resp, "Infos.0.SubnetInfos.0.SubnetID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVPCResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询VPC信息",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeSecurityGroup02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeSecurityGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeSecurityGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SGID", step.Must(utils.GetValue(resp, "Infos.0.SGID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeSecurityGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询安全组信息",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeImage03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeImageRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeImage(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("Image_id", step.Must(utils.GetValue(resp, "Infos.0.ImageID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeImageResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取镜像信息，包括默认镜像和自制镜像。",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeVMType04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMTypeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeVMType(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VMType", step.Must(utils.GetValue(resp, "Infos.0.VMType")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMTypeResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询主机机型",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeStorageType05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeStorageTypeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeStorageType(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("StorageType", step.Must(utils.GetValue(resp, "Infos.0.StorageType")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeStorageTypeResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询存储类型",
	FastFail:      false,
}

var testStep5434UCloudStackCreateVMInstance06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":            step.Scenario.GetVar("Zone"),
			"WANSGID":         step.Scenario.GetVar("SGID"),
			"VPCID":           step.Scenario.GetVar("VPCID"),
			"VMType":          step.Scenario.GetVar("VMType"),
			"SubnetID":        step.Scenario.GetVar("SubnetID"),
			"Region":          step.Scenario.GetVar("Region"),
			"Password":        "Zhongshang_2018",
			"Name":            "uhost_test",
			"Memory":          2048,
			"ImageID":         step.Scenario.GetVar("Image_id"),
			"DataDiskSpace":   10,
			"DataDiskSetType": "StorageSetBBBB",
			"ChargeType":      "Month",
			"CPU":             1,
			"BootDiskSetType": "StorageSetBBBB",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateVMInstance(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VMID", step.Must(utils.GetValue(resp, "VMID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建虚拟机",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeVMInstance07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VMIDs": []interface{}{
				step.Scenario.GetVar("VMID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(180) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询虚拟机",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeDisk08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeDisk(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DiskID", step.Must(utils.GetValue(resp, "Infos.0.DiskID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取硬盘信息",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeDisk09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"DiskType": "Boot",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取硬盘信息",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeDisk10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeDiskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"DiskType": "Data",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeDisk(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取硬盘信息",
	FastFail:      false,
}

var testStep5434UCloudStackCreateNIC11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateNICRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"VPCID":    step.Scenario.GetVar("VPCID"),
			"SubnetID": step.Scenario.GetVar("SubnetID"),
			"Region":   step.Scenario.GetVar("Region"),
			"Name":     "test_nic",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateNIC(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("NICID", step.Must(utils.GetValue(resp, "NICID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateNICResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建网卡",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeNIC12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeNICRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeNIC(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeNICResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取网卡信息",
	FastFail:      false,
}

var testStep5434UCloudStackAttachNIC13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewAttachNICRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceID": step.Scenario.GetVar("VMID"),
			"Region":     step.Scenario.GetVar("Region"),
			"NICID":      step.Scenario.GetVar("NICID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AttachNIC(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AttachNICResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "绑定UCloudStack网卡",
	FastFail:      false,
}

var testStep5434UCloudStackDetachNIC14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDetachNICRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceID": step.Scenario.GetVar("VMID"),
			"Region":     step.Scenario.GetVar("Region"),
			"NICID":      step.Scenario.GetVar("NICID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DetachNIC(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DetachNICResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "解绑UClouStack网卡",
	FastFail:      false,
}

var testStep5434UCloudStackDeleteNIC15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteNICRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"NICID":  step.Scenario.GetVar("NICID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteNIC(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteNICResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除网卡",
	FastFail:      false,
}

var testStep5434UCloudStackAllocateEIP16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewAllocateEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"Region":       step.Scenario.GetVar("Region"),
			"OperatorName": "wan-bgp-R6KtjeNmR",
			"Name":         "test_eip",
			"ChargeType":   "Month",
			"Bandwidth":    2,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AllocateEIP(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("EIPID", step.Must(utils.GetValue(resp, "EIPID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AllocateEIPResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "申请外网IP",
	FastFail:      false,
}

var testStep5434UCloudStackAllocateEIP17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewAllocateEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"Region":       step.Scenario.GetVar("Region"),
			"OperatorName": "segment-keqhkSMGg",
			"Name":         "ipv6-eip",
			"IPVersion":    "IPv6",
			"ChargeType":   "Month",
			"Bandwidth":    1,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AllocateEIP(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("EIPID_ipv6", step.Must(utils.GetValue(resp, "EIPID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AllocateEIPResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "申请外网IP",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeEIP18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeEIPResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取外网IP的信息",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeEIP19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"IPVersion": "IPv4",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeEIPResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取外网IP的信息",
	FastFail:      false,
}

var testStep5434UCloudStackDescribeEIP20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"IPVersion": "IPv6",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeEIPResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取外网IP的信息",
	FastFail:      false,
}

var testStep5434UCloudStackStopVMInstance21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewStopVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VMID":   step.Scenario.GetVar("VMID"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.StopVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭虚拟机",
	FastFail:      false,
}

var testStep5434UCloudStackDeleteVMInstance22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteVMInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VMID":   step.Scenario.GetVar("VMID"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteVMInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteVMInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除虚拟机",
	FastFail:      false,
}

var testStep5434UCloudStackReleaseEIP23 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewReleaseEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"EIPID":  step.Scenario.GetVar("EIPID"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ReleaseEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ReleaseEIPResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除外网IP",
	FastFail:      false,
}

var testStep5434UCloudStackReleaseEIP24 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewReleaseEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"EIPID":  step.Scenario.GetVar("EIPID_ipv6"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ReleaseEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ReleaseEIPResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除外网IP",
	FastFail:      false,
}
