// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/uaccount"
	"github.com/ucloud/ucloud-sdk-go/services/uk8s"
	"github.com/ucloud/ucloud-sdk-go/services/vpc"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario5065(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "5065",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region": "cn-bj2",
				"Zone":   "cn-bj2-04",
			}
		},
		Owners: []string{"xiangyu.wang@ucloud.cn"},
		Title:  "UK8S回归测试-secondaryip",
		Steps: []*driver.Step{
			testStep5065CheckUK8SClusterQuota01,
			testStep5065GetProjectList02,
			testStep5065CreateVPC03,
			testStep5065CreateSubnet04,
			testStep5065DescribeSubnet05,
			testStep5065CheckUK8SClusterCIDR06,
			testStep5065DescribeUK8SAvailableUHost07,
			testStep5065CreateUK8SClusterV208,
			testStep5065DescribeUK8SCluster09,
			testStep5065ListUK8SClusterNodeV210,
			testStep5065AllocateSecondaryIp11,
			testStep5065DescribeSecondaryIp12,
			testStep5065DeleteSecondaryIp13,
			testStep5065DelUK8SCluster14,
			testStep5065DeleteSubnet15,
			testStep5065DeleteVPC16,
			testStep5065ListUK8SClusterV217,
		},
	})
}

var testStep5065CheckUK8SClusterQuota01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUK8SClusterQuota")
		err = req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckUK8SClusterQuotaResponse", "str_eq"),
			validation.Builtins.NewValidator("ClusterQuota", 1000, "le"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "检查可创建集群数量",
	FastFail:      false,
}

var testStep5065GetProjectList02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UAccount")
		if err != nil {
			return nil, err
		}
		client := c.(*uaccount.UAccountClient)

		req := client.NewGetProjectListRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetProjectList(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("ProjectId", step.Must(utils.GetValue(resp, "ProjectSet.0.ProjectId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetProjectListResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取帐号下的项目列表",
	FastFail:      false,
}

var testStep5065CreateVPC03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewCreateVPCRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
			"Network": []interface{}{
				"192.16.16.0/20",
			},
			"Name": "test_k8s_vpc",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateVPC(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VPCId_0", step.Must(utils.GetValue(resp, "VPCId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateVPCResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建VPC",
	FastFail:      false,
}

var testStep5065CreateSubnet04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewCreateSubnetRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPCId":     step.Scenario.GetVar("VPCId_0"),
			"Subnet":    "192.16.17.0",
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateSubnet(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SubnetId_0", step.Must(utils.GetValue(resp, "SubnetId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateSubnetResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建子网",
	FastFail:      false,
}

var testStep5065DescribeSubnet05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewDescribeSubnetRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"SubnetId":  step.Scenario.GetVar("SubnetId_0"),
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
			"Offset":    1,
			"Limit":     1,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeSubnet(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeSubnetResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取子网信息",
	FastFail:      false,
}

var testStep5065CheckUK8SClusterCIDR06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUK8SClusterCIDR")
		err = req.SetPayload(map[string]interface{}{
			"VPCId":       step.Scenario.GetVar("VPCId_0"),
			"SubnetId":    step.Scenario.GetVar("SubnetId_0"),
			"ServiceCIDR": "172.17.0.0/16",
			"Region":      step.Scenario.GetVar("Region"),
			"ProjectId":   step.Scenario.GetVar("ProjectId"),
			"PodCIDR":     "172.16.0.0/16",
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckUK8SClusterCIDRResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "检查集群的CIDR冲突",
	FastFail:      true,
}

var testStep5065DescribeUK8SAvailableUHost07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUK8SAvailableUHost")
		err = req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUK8SAvailableUHostResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取可用主机类型",
	FastFail:      false,
}

var testStep5065CreateUK8SClusterV208 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UK8S")
		if err != nil {
			return nil, err
		}
		client := c.(*uk8s.UK8SClient)

		req := client.NewCreateUK8SClusterV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"cn-bj2-04":   step.Scenario.GetVar("Zone"),
			"VPCId":       step.Scenario.GetVar("VPCId_0"),
			"SubnetId":    step.Scenario.GetVar("SubnetId_0"),
			"ServiceCIDR": "172.17.0.0/16",
			"Region":      step.Scenario.GetVar("Region"),
			"Quantity":    1,
			"ProjectId":   step.Scenario.GetVar("ProjectId"),
			"Password":    "Z3VhbmxpeXVhbm1pbWEx",
			"Nodes": []map[string]interface{}{
				{
					"BootDiskType":      "CLOUD_SSD",
					"CPU":               4,
					"Count":             2,
					"DataDiskSize":      20,
					"DataDiskType":      "CLOUD_SSD",
					"GPU":               0,
					"MachineType":       "N",
					"Mem":               8192,
					"MinmalCpuPlatform": "Intel/Auto",
					"Zone":              step.Scenario.GetVar("Zone"),
				},
			},
			"MasterMinmalCpuPlatform": "Intel/Auto",
			"MasterMem":               8192,
			"MasterMachineType":       "N",
			"MasterDataDiskType":      "CLOUD_SSD",
			"MasterDataDiskSize":      20,
			"MasterCPU":               4,
			"MasterBootDiskType":      "CLOUD_SSD",
			"Master": []map[string]interface{}{
				{
					"Zone": step.Scenario.GetVar("Zone"),
				},
				{
					"Zone": step.Scenario.GetVar("Zone"),
				},
				{
					"Zone": step.Scenario.GetVar("Zone"),
				},
			},
			"K8sVersion":        "1.16.4",
			"ExternalApiServer": "Yes",
			"ClusterName":       "test_k8s_secondary_ip",
			"ChargeType":        "Dynamic",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateUK8SClusterV2(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("ClusterId", step.Must(utils.GetValue(resp, "ClusterId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateUK8SClusterV2Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建UK8S集群V2版",
	FastFail:      false,
}

var testStep5065DescribeUK8SCluster09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUK8SCluster")
		err = req.SetPayload(map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
			"ClusterId": step.Scenario.GetVar("ClusterId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUK8SClusterResponse", "str_eq"),
			validation.Builtins.NewValidator("Status", "RUNNING", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(150) * time.Second,
	MaxRetries:    60,
	RetryInterval: 20 * time.Second,
	Title:         "获取集群信息",
	FastFail:      true,
}

var testStep5065ListUK8SClusterNodeV210 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UK8S")
		if err != nil {
			return nil, err
		}
		client := c.(*uk8s.UK8SClient)

		req := client.NewListUK8SClusterNodeV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
			"ClusterId": step.Scenario.GetVar("ClusterId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ListUK8SClusterNodeV2(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("Mac", step.Must(utils.GetValue(resp, "NodeSet.3.IPSet.0.Mac")))
		step.Scenario.SetVar("uhostid", step.Must(utils.GetValue(resp, "NodeSet.3.InstanceId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ListUK8SClusterNodeV2Response", "str_eq"),
			validation.Builtins.NewValidator("NodeSet.0.NodeStatus", "Ready", "str_eq"),
			validation.Builtins.NewValidator("NodeSet.1.NodeStatus", "Ready", "str_eq"),
			validation.Builtins.NewValidator("NodeSet.2.NodeStatus", "Ready", "str_eq"),
			validation.Builtins.NewValidator("NodeSet.3.NodeStatus", "Ready", "str_eq"),
			validation.Builtins.NewValidator("NodeSet.4.NodeStatus", "Ready", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    20,
	RetryInterval: 10 * time.Second,
	Title:         "获取UK8S集群节点信息",
	FastFail:      false,
}

var testStep5065AllocateSecondaryIp11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewAllocateSecondaryIpRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"VPCId":     step.Scenario.GetVar("VPCId_0"),
			"SubnetId":  step.Scenario.GetVar("SubnetId_0"),
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
			"ObjectId":  step.Scenario.GetVar("uhostid"),
			"Mac":       step.Scenario.GetVar("Mac"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AllocateSecondaryIp(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("secondaryip", step.Must(utils.GetValue(resp, "IpInfo.Ip")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AllocateSecondaryIpResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "分配ip",
	FastFail:      false,
}

var testStep5065DescribeSecondaryIp12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewDescribeSecondaryIpRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"VPCId":     step.Scenario.GetVar("VPCId_0"),
			"SubnetId":  step.Scenario.GetVar("SubnetId_0"),
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeSecondaryIp(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeSecondaryIpResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 5 * time.Second,
	Title:         "查询SecondaryIp",
	FastFail:      false,
}

var testStep5065DeleteSecondaryIp13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewDeleteSecondaryIpRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"SubnetId":  step.Scenario.GetVar("SubnetId_0"),
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
			"Mac":       step.Scenario.GetVar("Mac"),
			"Ip":        step.Scenario.GetVar("secondaryip"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteSecondaryIp(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteSecondaryIpResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除Ip",
	FastFail:      false,
}

var testStep5065DelUK8SCluster14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UK8S")
		if err != nil {
			return nil, err
		}
		client := c.(*uk8s.UK8SClient)

		req := client.NewDelUK8SClusterRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
			"ClusterId": step.Scenario.GetVar("ClusterId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DelUK8SCluster(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DelUK8SClusterResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除k8s集群",
	FastFail:      false,
}

var testStep5065DeleteSubnet15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewDeleteSubnetRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"SubnetId":  step.Scenario.GetVar("SubnetId_0"),
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteSubnet(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteSubnetResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(300) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除子网",
	FastFail:      false,
}

var testStep5065DeleteVPC16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewDeleteVPCRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPCId":     step.Scenario.GetVar("VPCId_0"),
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("ProjectId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteVPC(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteVPCResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除VPC",
	FastFail:      false,
}

var testStep5065ListUK8SClusterV217 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UK8S")
		if err != nil {
			return nil, err
		}
		client := c.(*uk8s.UK8SClient)

		req := client.NewListUK8SClusterV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"ClusterId": step.Scenario.GetVar("ClusterId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ListUK8SClusterV2(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ListUK8SClusterV2Response", "str_eq"),
			validation.Builtins.NewValidator("ClusterCount", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取集群信息",
	FastFail:      false,
}
