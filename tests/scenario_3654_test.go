// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/umem"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario3654(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "3654",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Name":             "URedis-Backup",
				"HighAvailability": "enable",
				"Version":          4,
				"Protocol":         "redis",
				"BackupName":       "RedisBackup",
				"Name_Backup":      "RedisBackup",
				"BackupTime":       1,
				"AutoBackup":       "enable",
				"Size":             2,
				"Region":           "cn-bj2",
				"Zone":             "cn-bj2-04",
			}
		},
		Owners: []string{"keyu.wu@ucloud.cn"},
		Title:  "URedis(Backup-V4.0)",
		Steps: []*driver.Step{
			testStep3654CheckURedisAllowance01,
			testStep3654DescribeURedisConfig02,
			testStep3654CreateURedisGroup03,
			testStep3654DescribeUMem04,
			testStep3654CreateURedisBackup05,
			testStep3654DescribeURedisBackupState06,
			testStep3654DescribeURedisBackup07,
			testStep3654DescribeURedisBackupURL08,
			testStep3654UpdateURedisBackupStrategy09,
			testStep3654DescribeUMem10,
			testStep3654UpdateURedisBackupStrategy11,
			testStep3654DescribeUMem12,
			testStep3654DescribeURedisBackupState13,
			testStep3654CreateURedisGroup14,
			testStep3654DescribeUMem15,
			testStep3654CreateURedisBackup16,
			testStep3654CreateURedisBackup17,
			testStep3654DescribeUMem18,
			testStep3654DeleteURedisGroup19,
			testStep3654DeleteURedisGroup20,
			testStep3654DescribeURedisGroup21,
		},
	})
}

var testStep3654CheckURedisAllowance01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckURedisAllowance")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Size":     step.Scenario.GetVar("Size"),
			"Region":   step.Scenario.GetVar("Region"),
			"Protocol": step.Scenario.GetVar("Protocol"),
			"Count":    1,
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckURedisAllowanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "检查URedis资源是否足够",
	FastFail:      false,
}

var testStep3654DescribeURedisConfig02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDescribeURedisConfigRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Version":    step.Scenario.GetVar("Version"),
			"RegionFlag": "false",
			"Region":     step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeURedisConfig(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("ConfigId", step.Must(utils.GetValue(resp, "DataSet.0.ConfigId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询主备Redis所有配置文件",
	FastFail:      false,
}

var testStep3654CreateURedisGroup03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewCreateURedisGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":             step.Scenario.GetVar("Zone"),
			"Version":          step.Scenario.GetVar("Version"),
			"Size":             step.Scenario.GetVar("Size"),
			"Region":           step.Scenario.GetVar("Region"),
			"Name":             step.Scenario.GetVar("Name"),
			"HighAvailability": step.Scenario.GetVar("HighAvailability"),
			"ConfigId":         step.Scenario.GetVar("ConfigId"),
			"BackupTime":       step.Scenario.GetVar("BackupTime"),
			"AutoBackup":       step.Scenario.GetVar("AutoBackup"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateURedisGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("GroupIdV", step.Must(utils.GetValue(resp, "GroupId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建主备redis",
	FastFail:      true,
}

var testStep3654DescribeUMem04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupIdV"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ResourceId", step.Scenario.GetVar("GroupIdV"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AutoBackup", step.Scenario.GetVar("AutoBackup"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Version", step.Scenario.GetVar("Version"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    15,
	RetryInterval: 60 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3654CreateURedisBackup05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewCreateURedisBackupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"GroupId":    step.Scenario.GetVar("GroupIdV"),
			"BackupName": step.Scenario.GetVar("BackupName"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateURedisBackup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("BackupIdV", step.Must(utils.GetValue(resp, "BackupId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateURedisBackupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建主备Redis备份",
	FastFail:      false,
}

var testStep3654DescribeURedisBackupState06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeURedisBackupState")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"GroupId":  step.Scenario.GetVar("GroupIdV"),
			"BackupId": step.Scenario.GetVar("BackupIdV"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisBackupStateResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询备份状态",
	FastFail:      false,
}

var testStep3654DescribeURedisBackup07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDescribeURedisBackupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("GroupIdV"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeURedisBackup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisBackupResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.BackupId", step.Scenario.GetVar("BackupIdV"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.GroupId", step.Scenario.GetVar("GroupIdV"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Success", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    30,
	RetryInterval: 30 * time.Second,
	Title:         "查询主备redis备份",
	FastFail:      false,
}

var testStep3654DescribeURedisBackupURL08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDescribeURedisBackupURLRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"GroupId":  step.Scenario.GetVar("GroupIdV"),
			"BackupId": step.Scenario.GetVar("BackupIdV"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeURedisBackupURL(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisBackupURLResponse", "str_eq"),
			validation.Builtins.NewValidator("BackupURL", "http", "contains"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取主备Redis备份下载链接",
	FastFail:      false,
}

var testStep3654UpdateURedisBackupStrategy09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewUpdateURedisBackupStrategyRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"GroupId":    step.Scenario.GetVar("GroupIdV"),
			"BackupTime": step.Scenario.GetVar("BackupTime"),
			"AutoBackup": "enable",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateURedisBackupStrategy(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateURedisBackupStrategyResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更改zhubeiredis的备份策略",
	FastFail:      false,
}

var testStep3654DescribeUMem10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupIdV"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AutoBackup", "enable", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 30 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3654UpdateURedisBackupStrategy11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewUpdateURedisBackupStrategyRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"GroupId":    step.Scenario.GetVar("GroupIdV"),
			"BackupTime": step.Scenario.GetVar("BackupTime"),
			"AutoBackup": "disable",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateURedisBackupStrategy(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateURedisBackupStrategyResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更改zhubeiredis的备份策略",
	FastFail:      false,
}

var testStep3654DescribeUMem12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupIdV"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AutoBackup", "disable", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 30 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3654DescribeURedisBackupState13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeURedisBackupState")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"GroupId":  step.Scenario.GetVar("GroupIdV"),
			"BackupId": step.Scenario.GetVar("BackupIdV"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisBackupStateResponse", "str_eq"),
			validation.Builtins.NewValidator("State", "Success", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询备份状态",
	FastFail:      false,
}

var testStep3654CreateURedisGroup14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewCreateURedisGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":             step.Scenario.GetVar("Zone"),
			"Version":          step.Scenario.GetVar("Version"),
			"Size":             step.Scenario.GetVar("Size"),
			"Region":           step.Scenario.GetVar("Region"),
			"Name":             step.Scenario.GetVar("Name_Backup"),
			"HighAvailability": step.Scenario.GetVar("HighAvailability"),
			"ConfigId":         step.Scenario.GetVar("ConfigId"),
			"BackupId":         step.Scenario.GetVar("BackupIdV"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateURedisGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("GroupIdVB", step.Must(utils.GetValue(resp, "GroupId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建主备redis",
	FastFail:      false,
}

var testStep3654DescribeUMem15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"ResourceId": step.Scenario.GetVar("GroupIdVB"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ResourceId", step.Scenario.GetVar("GroupIdVB"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    30,
	RetryInterval: 30 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3654CreateURedisBackup16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewCreateURedisBackupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"GroupId":    step.Scenario.GetVar("GroupIdV"),
			"BackupName": step.Scenario.GetVar("BackupName"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateURedisBackup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("BackupIdV2", step.Must(utils.GetValue(resp, "BackupId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateURedisBackupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建主备Redis备份",
	FastFail:      false,
}

var testStep3654CreateURedisBackup17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewCreateURedisBackupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"GroupId":    step.Scenario.GetVar("GroupIdV"),
			"BackupName": step.Scenario.GetVar("BackupName"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateURedisBackup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("BackupIdV3", step.Must(utils.GetValue(resp, "BackupId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateURedisBackupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建主备Redis备份",
	FastFail:      false,
}

var testStep3654DescribeUMem18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		err = req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"Protocol": step.Scenario.GetVar("Protocol"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    5,
	RetryInterval: 30 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep3654DeleteURedisGroup19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDeleteURedisGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("GroupIdVB"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteURedisGroup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除主备redis",
	FastFail:      false,
}

var testStep3654DeleteURedisGroup20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDeleteURedisGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("GroupIdV"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteURedisGroup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除主备redis",
	FastFail:      false,
}

var testStep3654DescribeURedisGroup21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UMem")
		if err != nil {
			return nil, err
		}
		client := c.(*umem.UMemClient)

		req := client.NewDescribeURedisGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeURedisGroup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeURedisGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    3,
	RetryInterval: 60 * time.Second,
	Title:         "查询主备Redis",
	FastFail:      false,
}
