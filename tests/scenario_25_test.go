// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/ipsecvpn"
	"github.com/ucloud/ucloud-sdk-go/services/unet"
	"github.com/ucloud/ucloud-sdk-go/services/vpc"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario25(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "25",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region": "cn-bj2",
				"Zone":   "cn-bj2-03",
			}
		},
		Owners: []string{"becky.xu@ucloud.cn"},
		Title:  "IPSecVPN自动化回归-BGP机房",
		Steps: []*driver.Step{
			testStep25CreateVPC01,
			testStep25CreateSubnet02,
			testStep25GetVPNGatewayPrice03,
			testStep25CreateVPNGateway04,
			testStep25AllocateEIP05,
			testStep25BindEIP06,
			testStep25DescribeVPNGateway07,
			testStep25GetVPNGatewayUpgradePrice08,
			testStep25UpdateVPNGateway09,
			testStep25CreateRemoteVPNGateway10,
			testStep25DescribeRemoteVPNGateway11,
			testStep25CreateVPNTunnel12,
			testStep25DescribeVPNTunnel13,
			testStep25UpdateVPNTunnelAttribute14,
			testStep25DeleteVPNGateway15,
			testStep25DeleteRemoteVPNGateway16,
			testStep25DeleteVPNTunnel17,
			testStep25DeleteVPNGateway18,
			testStep25DeleteRemoteVPNGateway19,
			testStep25ReleaseEIP20,
			testStep25DeleteSubnet21,
			testStep25DeleteVPC22,
		},
	})
}

var testStep25CreateVPC01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewCreateVPCRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"Network": []interface{}{
				"192.168.0.0/16",
			},
			"Name": "ipsecvpn-vpc",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateVPC(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("vpc_id", step.Must(utils.GetValue(resp, "VPCId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建VPC",
	FastFail:      false,
}

var testStep25CreateSubnet02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewCreateSubnetRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPCId":      step.Scenario.GetVar("vpc_id"),
			"SubnetName": "ipsecvpn-subnet",
			"Subnet":     "192.168.11.0",
			"Region":     step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateSubnet(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("subnet_id", step.Must(utils.GetValue(resp, "SubnetId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建子网",
	FastFail:      false,
}

var testStep25GetVPNGatewayPrice03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("GetVPNGatewayPrice")
		err = req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"Grade":  "Standard",
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取VPN价格",
	FastFail:      false,
}

var testStep25CreateVPNGateway04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewCreateVPNGatewayRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPNGatewayName": "auto_apitest",
			"VPCId":          step.Scenario.GetVar("vpc_id"),
			"Region":         step.Scenario.GetVar("Region"),
			"Grade":          "Standard",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateVPNGateway(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("vpngw_id", step.Must(utils.GetValue(resp, "VPNGatewayId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "新建VPN网关",
	FastFail:      false,
}

var testStep25AllocateEIP05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewAllocateEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":       step.Scenario.GetVar("Region"),
			"OperatorName": "Bgp",
			"Bandwidth":    2,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AllocateEIP(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("eip_id", step.Must(utils.GetValue(resp, "EIPSet.0.EIPId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "申请弹性IP",
	FastFail:      false,
}

var testStep25BindEIP06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewBindEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ResourceType": "vpngw",
			"ResourceId":   step.Scenario.GetVar("vpngw_id"),
			"Region":       step.Scenario.GetVar("Region"),
			"EIPId":        step.Scenario.GetVar("eip_id"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.BindEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "绑定弹性IP",
	FastFail:      false,
}

var testStep25DescribeVPNGateway07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewDescribeVPNGatewayRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeVPNGateway(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取VPN网关信息",
	FastFail:      false,
}

var testStep25GetVPNGatewayUpgradePrice08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("GetVPNGatewayUpgradePrice")
		err = req.SetPayload(map[string]interface{}{
			"VPNGatewayId": step.Scenario.GetVar("vpngw_id"),
			"Region":       step.Scenario.GetVar("Region"),
			"Grade":        "Enhanced",
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取VPN网关规格改动价格",
	FastFail:      false,
}

var testStep25UpdateVPNGateway09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewUpdateVPNGatewayRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPNGatewayId": step.Scenario.GetVar("vpngw_id"),
			"Region":       step.Scenario.GetVar("Region"),
			"Grade":        "Enhanced",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateVPNGateway(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    10,
	RetryInterval: 1 * time.Second,
	Title:         "更新VPN网关信息",
	FastFail:      false,
}

var testStep25CreateRemoteVPNGateway10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewCreateRemoteVPNGatewayRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"RemoteVPNGatewayName": "auto_apitest",
			"RemoteVPNGatewayAddr": "10.1.1.0",
			"Region":               step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateRemoteVPNGateway(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("remote_vpngw_id", step.Must(utils.GetValue(resp, "RemoteVPNGatewayId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "新建客户VPN网关",
	FastFail:      false,
}

var testStep25DescribeRemoteVPNGateway11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewDescribeRemoteVPNGatewayRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeRemoteVPNGateway(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取客户VPN网关信息",
	FastFail:      false,
}

var testStep25CreateVPNTunnel12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewCreateVPNTunnelRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPNTunnelName":      "auto_apitest",
			"VPNGatewayId":       step.Scenario.GetVar("vpngw_id"),
			"RemoteVPNGatewayId": step.Scenario.GetVar("remote_vpngw_id"),
			"Region":             step.Scenario.GetVar("Region"),
			"IPSecRemoteSubnets": []interface{}{
				"10.1.1.0/24",
			},
			"IPSecProtocol":   "ah",
			"IPSecPFSDhGroup": 15,
			"IPSecLocalSubnetIds": []interface{}{
				step.Scenario.GetVar("subnet_id"),
			},
			"IKEPreSharedKey": "test",
			"IKEExchangeMode": "main",
			"IKEDhGroup":      15,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateVPNTunnel(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("vpn_tunnel_id", step.Must(utils.GetValue(resp, "VPNTunnelId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "新建VPN隧道",
	FastFail:      false,
}

var testStep25DescribeVPNTunnel13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewDescribeVPNTunnelRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeVPNTunnel(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取VPN隧道信息",
	FastFail:      false,
}

var testStep25UpdateVPNTunnelAttribute14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewUpdateVPNTunnelAttributeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPNTunnelId": step.Scenario.GetVar("vpn_tunnel_id"),
			"Region":      step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateVPNTunnelAttribute(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "更新VPN隧道属性",
	FastFail:      false,
}

var testStep25DeleteVPNGateway15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewDeleteVPNGatewayRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPNGatewayId": step.Scenario.GetVar("vpngw_id"),
			"Region":       step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteVPNGateway(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 66007, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除VPN网关",
	FastFail:      false,
}

var testStep25DeleteRemoteVPNGateway16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewDeleteRemoteVPNGatewayRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"RemoteVPNGatewayId": step.Scenario.GetVar("remote_vpngw_id"),
			"Region":             step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteRemoteVPNGateway(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 66032, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除客户VPN网关",
	FastFail:      false,
}

var testStep25DeleteVPNTunnel17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewDeleteVPNTunnelRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPNTunnelId": step.Scenario.GetVar("vpn_tunnel_id"),
			"Region":      step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteVPNTunnel(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除VPN隧道",
	FastFail:      false,
}

var testStep25DeleteVPNGateway18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewDeleteVPNGatewayRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPNGatewayId": step.Scenario.GetVar("vpngw_id"),
			"Region":       step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteVPNGateway(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 5 * time.Second,
	Title:         "删除VPN网关",
	FastFail:      false,
}

var testStep25DeleteRemoteVPNGateway19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("IPSecVPN")
		if err != nil {
			return nil, err
		}
		client := c.(*ipsecvpn.IPSecVPNClient)

		req := client.NewDeleteRemoteVPNGatewayRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"RemoteVPNGatewayId": step.Scenario.GetVar("remote_vpngw_id"),
			"Region":             step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteRemoteVPNGateway(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除客户VPN网关",
	FastFail:      false,
}

var testStep25ReleaseEIP20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewReleaseEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"EIPId":  step.Scenario.GetVar("eip_id"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ReleaseEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "释放弹性IP",
	FastFail:      false,
}

var testStep25DeleteSubnet21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewDeleteSubnetRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"SubnetId": step.Scenario.GetVar("subnet_id"),
			"Region":   step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteSubnet(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除子网",
	FastFail:      false,
}

var testStep25DeleteVPC22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("VPC")
		if err != nil {
			return nil, err
		}
		client := c.(*vpc.VPCClient)

		req := client.NewDeleteVPCRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"VPCId":  step.Scenario.GetVar("vpc_id"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteVPC(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除VPC",
	FastFail:      false,
}
