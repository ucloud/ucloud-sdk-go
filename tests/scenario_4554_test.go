// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/services/ucloudstack"
)

func TestScenario4554(t *testing.T) {
	t.Skip()
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testUCloudStackAccPreCheck(t)
		},
		Id: "4554",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region": "cn",
				"Zone":   "zone-01",
			}
		},
		Owners: []string{"sunny.zhang@ucloud.cn"},
		Title:  "SDK-测试集-3",
		Steps: []*driver.Step{
			testStep4554UCloudStackCreateVPC01,
			testStep4554UCloudStackDescribeVPC02,
			testStep4554UCloudStackCreateSubnet03,
			testStep4554UCloudStackDescribeSubnet04,
			testStep4554UCloudStackDeleteSubnet05,
			testStep4554UCloudStackDeleteVPC06,
			testStep4554UCloudStackCreateSecurityGroup07,
			testStep4554UCloudStackDescribeSecurityGroup08,
			testStep4554UCloudStackCreateSecurityGroupRule09,
			testStep4554UCloudStackUpdateSecurityGroupRule10,
			testStep4554UCloudStackDeleteSecurityGroupRule11,
			testStep4554UCloudStackDeleteSecurityGroup12,
			testStep4554UCloudStackAllocateEIP13,
			testStep4554UCloudStackDescribeEIP14,
			testStep4554UCloudStackModifyEIPBandwidth15,
			testStep4554UCloudStackReleaseEIP16,
		},
	})
}

var testStep4554UCloudStackCreateVPC01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateVPCRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"Region":  step.Scenario.GetVar("Region"),
			"Network": "10.0.0.0/16",
			"Name":    "test",
		})

		resp, err := client.CreateVPC(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VPCID", step.Must(utils.GetValue(resp, "VPCID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateVPCResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建VPC",
	FastFail:      true,
}

var testStep4554UCloudStackDescribeVPC02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeVPCRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"VPCIDs": []interface{}{
				step.Scenario.GetVar("VPCID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeVPC(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVPCResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询VPC信息",
	FastFail:      true,
}

var testStep4554UCloudStackCreateSubnet03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateSubnetRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"VPCID":   step.Scenario.GetVar("VPCID"),
			"Region":  step.Scenario.GetVar("Region"),
			"Network": "10.0.0.0/16",
			"Name":    "testsubnet",
		})

		resp, err := client.CreateSubnet(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SubnetID", step.Must(utils.GetValue(resp, "SubnetID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateSubnetResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建子网",
	FastFail:      true,
}

var testStep4554UCloudStackDescribeSubnet04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeSubnetRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":  step.Scenario.GetVar("Zone"),
			"VPCID": step.Scenario.GetVar("VPCID"),
			"SubnetIDs": []interface{}{
				step.Scenario.GetVar("SubnetID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeSubnet(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeSubnetResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查询子网信息",
	FastFail:      true,
}

var testStep4554UCloudStackDeleteSubnet05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteSubnetRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"SubnetID": step.Scenario.GetVar("SubnetID"),
			"Region":   step.Scenario.GetVar("Region"),
		})

		resp, err := client.DeleteSubnet(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteSubnetResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除子网",
	FastFail:      true,
}

var testStep4554UCloudStackDeleteVPC06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteVPCRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VPCID":  step.Scenario.GetVar("VPCID"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DeleteVPC(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteVPCResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除VPC",
	FastFail:      true,
}

var testStep4554UCloudStackCreateSecurityGroup07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateSecurityGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"Rule": []interface{}{
				"TCP|1|0.0.0.0/0|ACCEPT|HIGH|1",
			},
			"Region": step.Scenario.GetVar("Region"),
			"Name":   "testsecuritygroup",
		})

		resp, err := client.CreateSecurityGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SGID", step.Must(utils.GetValue(resp, "SGID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateSecurityGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建安全组",
	FastFail:      true,
}

var testStep4554UCloudStackDescribeSecurityGroup08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeSecurityGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"SGIDs": []interface{}{
				step.Scenario.GetVar("SGID"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DescribeSecurityGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("RuleID", step.Must(utils.GetValue(resp, "Infos.0.Rule.0.RuleID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeSecurityGroupResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.Status", "Available", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "查询安全组信息",
	FastFail:      true,
}

var testStep4554UCloudStackCreateSecurityGroupRule09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewCreateSecurityGroupRuleRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"SGID": step.Scenario.GetVar("SGID"),
			"Rules": []interface{}{
				"TCP|2|0.0.0.0/0|ACCEPT|HIGH|1",
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.CreateSecurityGroupRule(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateSecurityGroupRuleResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建安全组规则",
	FastFail:      true,
}

var testStep4554UCloudStackUpdateSecurityGroupRule10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewUpdateSecurityGroupRuleRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone": step.Scenario.GetVar("Zone"),
			"SGID": step.Scenario.GetVar("SGID"),
			"Rules": []interface{}{
				step.Must(functions.Concat("TCP|5|0.0.0.0/0|ACCEPT|HIGH|1|", step.Scenario.GetVar("RuleID"))),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.UpdateSecurityGroupRule(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateSecurityGroupRuleResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改安全组规则",
	FastFail:      true,
}

var testStep4554UCloudStackDeleteSecurityGroupRule11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteSecurityGroupRuleRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"SGRuleID": step.Scenario.GetVar("RuleID"),
			"SGID":     step.Scenario.GetVar("SGID"),
			"Region":   step.Scenario.GetVar("Region"),
		})

		resp, err := client.DeleteSecurityGroupRule(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteSecurityGroupRuleResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除安全组规则",
	FastFail:      true,
}

var testStep4554UCloudStackDeleteSecurityGroup12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDeleteSecurityGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"SGID":   step.Scenario.GetVar("SGID"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.DeleteSecurityGroup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteSecurityGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Second * 50,
	MaxRetries:    3,
	RetryInterval: time.Second,
	Title:         "删除安全组",
	FastFail:      true,
}

var testStep4554UCloudStackAllocateEIP13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewAllocateEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":       step.Scenario.GetVar("Region"),
			"OperatorName": "Bgp",
			"Bandwidth":    1,
			"Name":         "eip测试",
			"ChargeType":   "Month",
		})

		resp, err := client.AllocateEIP(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("EIPID", step.Must(utils.GetValue(resp, "EIPID")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AllocateEIPResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "申请弹性IP",
	FastFail:      true,
}

var testStep4554UCloudStackDescribeEIP14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewDescribeEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"EIPIDs": []interface{}{
				step.Scenario.GetVar("EIPID"),
			},
		})

		resp, err := client.DescribeEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeEIPResponse", "str_eq"),
			validation.Builtins.NewValidator("Infos.0.Status", "Free", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取UCloudStack外网IP的信息",
	FastFail:      true,
}

var testStep4554UCloudStackModifyEIPBandwidth15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewModifyEIPBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"EIPID":     step.Scenario.GetVar("EIPID"),
			"Bandwidth": 2,
		})

		resp, err := client.ModifyEIPBandwidth(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ModifyEIPBandwidthResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "调整外网IP带宽",
	FastFail:      true,
}

var testStep4554UCloudStackReleaseEIP16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCloudStack")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloudstack.UCloudStackClient)

		req := client.NewReleaseEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"EIPID":  step.Scenario.GetVar("EIPID"),
		})

		resp, err := client.ReleaseEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ReleaseEIPResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除UCloudStack外网IP",
	FastFail:      true,
}
