// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/ulb"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario4688(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "4688",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"GroupId": "group_dewdsd",
				"Region":  "cn-bj2",
			}
		},
		Owners: []string{"li.wei@ucloud.cn"},
		Title:  "内网-外网-ulb7-内容转发组-09",
		Steps: []*driver.Step{
			testStep4688CreatePolicyGroup01,
			testStep4688DescribePolicyGroup02,
			testStep4688UpdatePolicyGroupAttribute03,
			testStep4688DeletePolicyGroup04,
		},
	})
}

var testStep4688CreatePolicyGroup01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("ULB")
		if err != nil {
			return nil, err
		}
		client := c.(*ulb.ULBClient)

		req := client.NewCreatePolicyGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"GroupName": "policygroup_1",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreatePolicyGroup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建内容转发组",
	FastFail:      false,
}

var testStep4688DescribePolicyGroup02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("ULB")
		if err != nil {
			return nil, err
		}
		client := c.(*ulb.ULBClient)

		req := client.NewDescribePolicyGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribePolicyGroup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribePolicyGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取内容转发组信息",
	FastFail:      false,
}

var testStep4688UpdatePolicyGroupAttribute03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("ULB")
		if err != nil {
			return nil, err
		}
		client := c.(*ulb.ULBClient)

		req := client.NewUpdatePolicyGroupAttributeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"GroupName": "policyGroup_gai",
			"GroupId":   step.Scenario.GetVar("GroupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdatePolicyGroupAttribute(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdatePolicyGroupAttributeResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更新内容转发组属性",
	FastFail:      false,
}

var testStep4688DeletePolicyGroup04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("ULB")
		if err != nil {
			return nil, err
		}
		client := c.(*ulb.ULBClient)

		req := client.NewDeletePolicyGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("GroupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeletePolicyGroup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeletePolicyGroupResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除内容转发组",
	FastFail:      false,
}
